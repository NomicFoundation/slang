grammar = { S production } S $ ;

production = Identifier S '=' S expression S ';' ;

expression = sequence { S '|' S sequence } ;

sequence = difference { S difference } ;

difference = negation [ S '-' S negation ] ;

negation = [ '¬' S ] primary ;

primary = EOF | Any | CharRange | String | productionReference | grouped | optional | repeated ;
productionReference = Identifier ;
grouped = '(' S expression S ')' ;
optional = '[' S expression S ']' ;
repeated = '{' S expression S '}' ;

EOF = '$' ;
Any = '.' ;

String = '\'' { StringChar } '\'' ;
StringChar = ¬( '\'' | '\\' ) | '\\' ( '\'' | '\\' | 'u{' HexDigit { HexDigit } '}' ) ;

CharRange = SingleCharString S '…' S SingleCharString ;
SingleCharString = '\'' StringChar '\'' ;

HexDigit = '0'…'9' | 'a'…'f' | 'A'…'F' ;

Identifier = IdentifierStart { IdentifierFollow } ;
IdentifierStart = '_' | 'a'…'z' | 'A'…'Z' ;
IdentifierFollow = IdentifierStart | '0'…'9' ;

S = { Whitespace | Comment } ;
Comment = '/*' { ¬'*' | '*' { '*' } ¬( '*' | '/' ) } '*' { '*' } '/' ;
Whitespace = '\u{09}' | '\u{0A}' | '\u{0D}' | '\u{20}' ;
