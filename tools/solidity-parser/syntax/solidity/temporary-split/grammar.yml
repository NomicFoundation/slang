# yaml-language-server: $schema=../../../../syntax-schema/syntax/schema/topic.schema.json

- name: LeadingTrivia
  kind: Token
  zeroOrMore:
    choice:
      - reference: Whitespace
      - reference: EndOfLine
      - reference: MultilineComment
      - reference: SingleLineComment
- name: TrailingTrivia
  kind: Token
  optional:
    sequence:
      - zeroOrMore:
          choice:
            - reference: Whitespace
            - reference: MultilineComment
      - choice:
          - reference: EndOfLine
          - reference: SingleLineComment
- name: EndOfFileTrivia
  kind: Token
  zeroOrMore:
    choice:
      - reference: Whitespace
      - reference: MultilineComment
      - reference: SingleLineComment
- name: Whitespace
  kind: Token
  oneOrMore:
    choice:
      - terminal: " "
      - terminal: "\t"
- name: EndOfLine
  kind: Token
  oneOrMore:
    choice:
      - terminal: "\r"
      - terminal: "\n"
- name: MultilineComment
  kind: Token
  delimitedBy:
    open: /*
    config: { name: content }
    sequence:
      - zeroOrMore:
          choice:
            - not:
                terminal: "*"
            - sequence:
                - oneOrMore:
                    terminal: "*"
                - not:
                    choice:
                      - terminal: "*"
                      - terminal: /
      - zeroOrMore:
          terminal: "*"
    close: "*/"
- name: SingleLineComment
  kind: Token
  sequence:
    - terminal: //
    - zeroOrMore:
        not:
          choice:
            - terminal: "\r"
            - terminal: "\n"
- name: SourceUnit
  sequence:
    - reference: LeadingTrivia
    - zeroOrMore:
        choice:
          - reference: Directive
          - reference: Definition
    - reference: EndOfFileTrivia
    - end: ~
- name: Directive
  choice:
    - reference: PragmaDirective
    - reference: ImportDirective
    - reference: UsingDirective
- name: Definition
  choice:
    - reference: ContractDefinition
    - reference: InterfaceDefinition
    - reference: LibraryDefinition
    - reference: FunctionDefinition
    - reference: ConstantDefinition
    - reference: StructDefinition
    - reference: EnumDefinition
    - reference: UserDefinedValueTypeDefinition
    - reference: ErrorDefinition
- name: ImportDirective
  sequence:
    - terminal: import
    - choice:
        - reference: SimpleImportDirective
        - reference: StarImportDirective
        - reference: SelectingImportDirective
    - terminal: ;
- name: SimpleImportDirective
  sequence:
    - reference: ImportPath
    - zeroOrMore:
        sequence:
          - terminal: as
          - reference: Identifier
- name: StarImportDirective
  sequence:
    - terminal: "*"
    - terminal: as
    - reference: Identifier
    - terminal: from
    - reference: ImportPath
- name: SelectingImportDirective
  sequence:
    - delimitedBy:
        open: "{"
        oneOrMore:
          reference: SelectedImport
          separator:
            terminal: ","
        close: "}"
    - terminal: from
    - reference: ImportPath
- name: SelectedImport
  sequence:
    - reference: Identifier
    - optional:
        sequence:
          - terminal: as
          - reference: Identifier
- name: ImportPath
  reference: AsciiStringLiteral
- name: UsingDirective
  sequence:
    - terminal: using
    - choice:
        - reference: IdentifierPath
        - delimitedBy:
            open: "{"
            oneOrMore:
              reference: IdentifierPath
              separator:
                terminal: ","
            close: "}"
    - terminal: for
    - choice:
        - terminal: "*"
        - reference: TypeName
    - optional:
        terminal: global
    - terminal: ;
- name: ContractDefinition
  sequence:
    - optional:
        terminal: abstract
    - terminal: contract
    - reference: Identifier
    - optional:
        reference: InheritanceSpecifierList
    - delimitedBy:
        open: "{"
        zeroOrMore:
          reference: ContractBodyElement
        close: "}"
- name: InterfaceDefinition
  sequence:
    - terminal: interface
    - reference: Identifier
    - optional:
        reference: InheritanceSpecifierList
    - delimitedBy:
        open: "{"
        zeroOrMore:
          reference: ContractBodyElement
        close: "}"
- name: InheritanceSpecifierList
  sequence:
    - terminal: is
    - oneOrMore:
        reference: InheritanceSpecifier
        separator:
          terminal: ","
- name: InheritanceSpecifier
  sequence:
    - reference: IdentifierPath
    - optional:
        reference: ArgumentList
- name: LibraryDefinition
  sequence:
    - terminal: library
    - reference: Identifier
    - delimitedBy:
        open: "{"
        zeroOrMore:
          reference: ContractBodyElement
        close: "}"
- name: FunctionDefinition
  sequence:
    - terminal: function
    - choice:
        - reference: Identifier
        - terminal: fallback
        - terminal: receive
    - reference: ParameterList
    - zeroOrMore:
        reference: FunctionAttribute
    - optional:
        sequence:
          - terminal: returns
          - reference: ParameterList
    - choice:
        - terminal: ;
        - reference: Block
- name: FunctionAttribute
  choice:
    - reference: ModifierInvocation
    - reference: OverrideSpecifier
    - terminal: external
    - terminal: internal
    - terminal: payable
    - terminal: private
    - terminal: public
    - terminal: pure
    - terminal: view
    - terminal: virtual
- name: ConstantDefinition
  sequence:
    - reference: TypeName
    - terminal: constant
    - reference: Identifier
    - terminal: "="
    - reference: Expression
    - terminal: ;
- name: StructDefinition
  sequence:
    - terminal: struct
    - reference: Identifier
    - delimitedBy:
        open: "{"
        oneOrMore:
          reference: StructMember
        close: "}"
- name: StructMember
  sequence:
    - reference: TypeName
    - reference: Identifier
    - terminal: ;
- name: EnumDefinition
  sequence:
    - terminal: enum
    - reference: Identifier
    - delimitedBy:
        open: "{"
        oneOrMore:
          reference: Identifier
          separator:
            terminal: ","
        close: "}"
- name: UserDefinedValueTypeDefinition
  sequence:
    - terminal: type
    - reference: Identifier
    - terminal: is
    - reference: ElementaryType
    - terminal: ;
- name: EventDefinition
  sequence:
    - terminal: event
    - reference: Identifier
    - delimitedBy:
        open: (
        zeroOrMore:
          reference: EventParameter
          separator:
            terminal: ","
        close: )
    - optional:
        terminal: anonymous
    - terminal: ;
- name: EventParameter
  sequence:
    - reference: TypeName
    - optional:
        terminal: indexed
    - optional:
        reference: Identifier
- name: ErrorDefinition
  sequence:
    - terminal: error
    - reference: Identifier
    - delimitedBy:
        open: (
        zeroOrMore:
          reference: ErrorParameter
          separator:
            terminal: ","
        close: )
    - terminal: ;
- name: ErrorParameter
  sequence:
    - reference: TypeName
    - optional:
        reference: Identifier
- name: ContractBodyElement
  choice:
    - reference: UsingDirective
    - reference: ConstructorDefinition
    - reference: FunctionDefinition
    - reference: FallbackFunctionDefinition
    - reference: ReceiveFunctionDefinition
    - reference: ModifierDefinition
    - reference: StructDefinition
    - reference: EnumDefinition
    - reference: UserDefinedValueTypeDefinition
    - reference: EventDefinition
    - reference: ErrorDefinition
    - reference: StateVariableDeclaration
- name: ConstructorDefinition
  sequence:
    - terminal: constructor
    - reference: ParameterList
    - zeroOrMore:
        reference: ConstructorAttribute
    - reference: Block
- name: ConstructorAttribute
  choice:
    - reference: ModifierInvocation
    - terminal: internal
    - terminal: payable
    - terminal: public
- name: FallbackFunctionDefinition
  sequence:
    - terminal: fallback
    - reference: ParameterList
    - zeroOrMore:
        reference: FallbackFunctionAttribute
    - optional:
        sequence:
          - terminal: returns
          - reference: ParameterList
    - choice:
        - terminal: ;
        - reference: Block
- name: FallbackFunctionAttribute
  choice:
    - reference: ModifierInvocation
    - reference: OverrideSpecifier
    - terminal: external
    - terminal: payable
    - terminal: pure
    - terminal: view
    - terminal: virtual
- name: ReceiveFunctionDefinition
  sequence:
    - terminal: receive
    - reference: ParameterList
    - zeroOrMore:
        reference: ReceiveFunctionAttribute
    - choice:
        - terminal: ;
        - reference: Block
- name: ReceiveFunctionAttribute
  choice:
    - reference: ModifierInvocation
    - reference: OverrideSpecifier
    - terminal: external
    - terminal: payable
    - terminal: virtual
- name: ModifierDefinition
  sequence:
    - terminal: modifier
    - reference: Identifier
    - optional:
        reference: ParameterList
    - zeroOrMore:
        reference: ModifierAttribute
    - choice:
        - terminal: ;
        - reference: Block
- name: ModifierAttribute
  choice:
    - reference: OverrideSpecifier
    - terminal: virtual
- name: StateVariableDeclaration
  sequence:
    - reference: TypeName
    - zeroOrMore:
        reference: StateVariableAttribute
    - reference: Identifier
    - optional:
        sequence:
          - terminal: "="
          - reference: Expression
    - terminal: ;
- name: StateVariableAttribute
  choice:
    - reference: OverrideSpecifier
    - terminal: constant
    - terminal: immutable
    - terminal: internal
    - terminal: private
    - terminal: public
- name: ArgumentList
  delimitedBy:
    open: (
    optional:
      choice:
        - reference: PositionalArgumentList
        - reference: NamedArgumentList
    close: )
- name: PositionalArgumentList
  oneOrMore:
    reference: Expression
    separator:
      terminal: ","
- name: NamedArgumentList
  delimitedBy:
    open: "{"
    zeroOrMore:
      reference: NamedArgument
      separator:
        terminal: ","
    close: "}"
- name: NamedArgument
  sequence:
    - reference: Identifier
    - terminal: ":"
    - reference: Expression
- name: ModifierInvocation
  sequence:
    - reference: IdentifierPath
    - optional:
        reference: ArgumentList
- name: ParameterList
  delimitedBy:
    open: (
    zeroOrMore:
      reference: ParameterDeclaration
      separator:
        terminal: ","
    close: )
- name: ParameterDeclaration
  sequence:
    - reference: TypeName
    - optional:
        reference: DataLocation
    - optional:
        reference: Identifier
- name: OverrideSpecifier
  sequence:
    - terminal: override
    - optional:
        delimitedBy:
          open: (
          oneOrMore:
            reference: IdentifierPath
            separator:
              terminal: ","
          close: )
- name: IdentifierPath
  oneOrMore:
    reference: Identifier
    separator:
      terminal: "."
- name: TypeName
  sequence:
    - choice:
        - reference: ElementaryType
        - reference: FunctionType
        - reference: MappingType
        - reference: IdentifierPath
    - zeroOrMore:
        delimitedBy:
          open: "["
          optional:
            reference: Expression
          close: "]"
    - reference: ElementaryType
- name: ElementaryType
  choice:
    - terminal: bool
    - terminal: string
    - reference: AddressType
    - reference: FixedBytesType
    - reference: SignedIntegerType
    - reference: UnsignedIntegerType
    - reference: SignedFixedType
    - reference: UnsignedFixedType
- name: AddressType
  sequence:
    - terminal: address
    - optional:
        terminal: payable
- name: FunctionType
  sequence:
    - terminal: function
    - reference: ParameterList
    - zeroOrMore:
        choice:
          - terminal: internal
          - terminal: external
          - terminal: private
          - terminal: public
          - terminal: pure
          - terminal: view
          - terminal: payable
    - optional:
        sequence:
          - terminal: returns
          - reference: ParameterList
- name: MappingType
  sequence:
    - terminal: mapping
    - delimitedBy:
        open: (
        sequence:
          - choice:
              - reference: ElementaryType
              - reference: IdentifierPath
          - terminal: "=>"
          - reference: TypeName
        close: )
- name: DataLocation
  choice:
    - terminal: memory
    - terminal: storage
    - terminal: calldata
- name: Expression
  kind: ExpressionRule
  choice:
    - reference: AssignmentExpression
    - reference: ConditionalExpression
    - reference: OrExpression
    - reference: AndExpression
    - reference: EqualityComparisonExpression
    - reference: OrderComparisonExpression
    - reference: BitOrExpression
    - reference: BitXOrExpression
    - reference: BitAndExpression
    - reference: ShiftExpression
    - reference: AddSubExpression
    - reference: MulDivModExpression
    - reference: ExponentiationExpression
    - reference: UnarySuffixExpression
    - reference: UnaryPrefixExpression
    - reference: FunctionCallExpression
    - reference: MemberAccessExpression
    - reference: IndexAccessExpression
    - reference: PrimaryExpression
- name: AssignmentExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: "="
        - terminal: "|="
        - terminal: ^=
        - terminal: "&="
        - terminal: "<<="
        - terminal: ">>="
        - terminal: ">>>="
        - terminal: +=
        - terminal: "-="
        - terminal: "*="
        - terminal: /=
        - terminal: "%="
    - reference: Expression
- name: ConditionalExpression
  sequence:
    - reference: Expression
    - sequence: # This subsequence gives the correct form to the AST
        - terminal: "?"
        - reference: Expression
        - terminal: ":"
        - reference: Expression
- name: OrExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - terminal: "||"
    - reference: Expression
- name: AndExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - terminal: "&&"
    - reference: Expression
- name: EqualityComparisonExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: "=="
        - terminal: "!="
    - reference: Expression
- name: OrderComparisonExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: "<"
        - terminal: ">"
        - terminal: "<="
        - terminal: ">="
    - reference: Expression
- name: BitOrExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - terminal: "|"
    - reference: Expression
- name: BitXOrExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - terminal: "^"
    - reference: Expression
- name: BitAndExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - terminal: "&"
    - reference: Expression
- name: ShiftExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: "<<"
        - terminal: ">>"
        - terminal: ">>>"
    - reference: Expression
- name: AddSubExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: +
        - terminal: "-"
    - reference: Expression
- name: MulDivModExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - choice:
        - terminal: "*"
        - terminal: /
        - terminal: "%"
    - reference: Expression
- name: ExponentiationExpression
  config: { associativity: Right }
  sequence:
    - reference: Expression
    - terminal: "**"
    - reference: Expression
- name: UnarySuffixExpression
  sequence:
    - reference: Expression
    - choice:
        - terminal: ++
        - terminal: "--"
- name: UnaryPrefixExpression
  sequence:
    - choice:
        - terminal: ++
        - terminal: "--"
        - terminal: "!"
        - terminal: "~"
        - terminal: "-"
    - reference: Expression
- name: FunctionCallExpression
  sequence:
    - reference: Expression
    - optional:
        delimitedBy:
          open: "{"
          oneOrMore:
            reference: NamedArgument
            separator:
              terminal: ","
          close: "}"
    - reference: ArgumentList
- name: MemberAccessExpression
  sequence:
    - reference: Expression
    - terminal: "."
    - choice:
        - reference: Identifier
        - terminal: address
- name: IndexAccessExpression
  config: { associativity: Left }
  sequence:
    - reference: Expression
    - delimitedBy:
        open: "["
        sequence:
          - optional:
              reference: Expression
          - optional:
              sequence:
                - terminal: ":"
                - optional:
                    reference: Expression
        close: "]"
- name: PrimaryExpression
  choice:
    - reference: PayableExpression
    - reference: TypeExpression
    - reference: NewExpression
    - reference: ParenthesisExpression
    - reference: ArrayLiteral
    - reference: AsciiStringLiteral
    - reference: UnicodeStringLiteral
    - reference: HexStringLiteral
    - reference: NumericLiteral
    - reference: BooleanLiteral
    - reference: Identifier
- name: PayableExpression
  sequence:
    - terminal: payable
    - reference: ArgumentList
- name: TypeExpression
  sequence:
    - terminal: type
    - delimitedBy:
        open: (
        reference: TypeName
        close: )
- name: NewExpression
  sequence:
    - terminal: new
    - reference: IdentifierPath
    - reference: ArgumentList
- name: ParenthesisExpression
  delimitedBy:
    open: (
    oneOrMore:
      optional:
        reference: Expression
      separator:
        terminal: ","
    close: )
- name: ArrayLiteral
  delimitedBy:
    open: "["
    oneOrMore:
      reference: Expression
      separator:
        terminal: ","
    close: "]"
- name: NumericLiteral
  kind: Token
  sequence:
    - choice:
        - reference: DecimalNumber
        - reference: HexNumber
    - optional:
        reference: NumberUnit
- name: Block
  delimitedBy:
    open: "{"
    zeroOrMore:
      choice:
        - reference: Statement
        - reference: UncheckedBlock
    close: "}"
- name: UncheckedBlock
  sequence:
    - terminal: unchecked
    - reference: Block
- name: Statement
  choice:
    - reference: Block
    - reference: SimpleStatement
    - reference: IfStatement
    - reference: ForStatement
    - reference: WhileStatement
    - reference: DoWhileStatement
    - reference: ContinueStatement
    - reference: BreakStatement
    - reference: TryStatement
    - reference: ReturnStatement
    - reference: EmitStatement
    - reference: RevertStatement
    - reference: DeleteStatement
    - reference: AssemblyStatement
- name: SimpleStatement
  choice:
    - reference: TupleDeconstructionStatement
    - reference: VariableDeclarationStatement
    - reference: ExpressionStatement
- name: IfStatement
  sequence:
    - terminal: if
    - delimitedBy:
        open: (
        reference: Expression
        close: )
    - reference: Statement
    - optional:
        sequence:
          - terminal: else
          - reference: Statement
- name: ForStatement
  sequence:
    - terminal: for
    - delimitedBy:
        open: (
        sequence:
          - choice:
              - reference: SimpleStatement
              - terminal: ;
          - choice:
              - reference: ExpressionStatement
              - terminal: ;
          - optional:
              reference: Expression
        close: )
    - reference: Statement
- name: WhileStatement
  sequence:
    - terminal: while
    - delimitedBy:
        open: (
        reference: Expression
        close: )
    - reference: Statement
- name: DoWhileStatement
  sequence:
    - terminal: do
    - reference: Statement
    - terminal: while
    - delimitedBy:
        open: (
        reference: Expression
        close: )
    - terminal: ;
- name: ContinueStatement
  sequence:
    - terminal: continue
    - terminal: ;
- name: BreakStatement
  sequence:
    - terminal: break
    - terminal: ;
- name: TryStatement
  sequence:
    - terminal: try
    - reference: Expression
    - optional:
        sequence:
          - terminal: returns
          - reference: ParameterList
    - reference: Block
    - oneOrMore:
        reference: CatchClause
- name: CatchClause
  sequence:
    - terminal: catch
    - optional:
        sequence:
          - optional:
              reference: Identifier
          - reference: ParameterList
    - reference: Block
- name: ReturnStatement
  sequence:
    - terminal: return
    - optional:
        reference: Expression
    - terminal: ;
- name: EmitStatement
  sequence:
    - terminal: emit
    - reference: IdentifierPath
    - reference: ArgumentList
    - terminal: ;
- name: RevertStatement
  sequence:
    - terminal: revert
    - optional:
        reference: IdentifierPath
    - reference: ArgumentList
    - terminal: ;
- name: DeleteStatement
  sequence:
    - terminal: delete
    - reference: Identifier
    - terminal: ;
- name: TupleDeconstructionStatement
  sequence:
    - delimitedBy:
        open: (
        zeroOrMore:
          optional:
            sequence:
              - optional:
                  reference: TypeName
              - reference: Identifier
          separator:
            terminal: ","
        close: )
    - terminal: "="
    - reference: Expression
    - terminal: ;
- name: VariableDeclarationStatement
  sequence:
    - reference: TypeName
    - optional:
        reference: DataLocation
    - reference: Identifier
    - optional:
        sequence:
          - terminal: "="
          - reference: Expression
    - terminal: ;
- name: ExpressionStatement
  sequence:
    - reference: Expression
    - terminal: ;
- name: AssemblyStatement
  sequence:
    - terminal: assembly
    - optional:
        terminal: '"evmasm"'
    - optional:
        reference: AssemblyFlags
    - reference: YulBlock
- name: AssemblyFlags
  delimitedBy:
    open: (
    oneOrMore:
      reference: DoubleQuotedAsciiStringLiteral
      separator:
        terminal: ","
    close: )
- name: Identifier
  kind: Token
  difference:
    minuend:
      reference: RawIdentifier
    subtrahend:
      reference: Keyword
- name: Keyword
  kind: Token
  choice:
    - reference: BooleanLiteral
    - reference: FixedBytesType
    - reference: NumberUnit
    - reference: ReservedKeyword
    - reference: SignedIntegerType
    - reference: UnsignedIntegerType
    - terminal: abstract
    - terminal: address
    - terminal: anonymous
    - terminal: as
    - terminal: assembly
    - terminal: bool
    - terminal: break
    - terminal: calldata
    - terminal: catch
    - terminal: constant
    - terminal: constructor
    - terminal: continue
    - terminal: contract
    - terminal: delete
    - terminal: do
    - terminal: else
    - terminal: emit
    - terminal: enum
    - terminal: event
    - terminal: external
    - terminal: fallback
    - terminal: "false"
    - terminal: fixed
    - terminal: for
    - terminal: function
    - terminal: hex
    - terminal: if
    - terminal: immutable
    - terminal: import
    - terminal: indexed
    - terminal: interface
    - terminal: internal
    - terminal: is
    - terminal: library
    - terminal: mapping
    - terminal: memory
    - terminal: modifier
    - terminal: new
    - terminal: override
    - terminal: payable
    - terminal: pragma
    - terminal: private
    - terminal: public
    - terminal: pure
    - terminal: receive
    - terminal: return
    - terminal: returns
    - terminal: storage
    - terminal: string
    - terminal: struct
    - terminal: "true"
    - terminal: try
    - terminal: type
    - terminal: ufixed
    - terminal: unchecked
    - terminal: using
    - terminal: view
    - terminal: virtual
    - terminal: while
- name: ReservedKeyword
  kind: Token
  choice:
    - terminal: after
    - terminal: alias
    - terminal: apply
    - terminal: auto
    - terminal: byte
    - terminal: case
    - terminal: copyof
    - terminal: default
    - terminal: define
    - terminal: final
    - terminal: implements
    - terminal: in
    - terminal: inline
    - terminal: let
    - terminal: macro
    - terminal: match
    - terminal: mutable
    - terminal: "null"
    - terminal: of
    - terminal: partial
    - terminal: promise
    - terminal: reference
    - terminal: relocatable
    - terminal: sealed
    - terminal: sizeof
    - terminal: static
    - terminal: supports
    - terminal: switch
    - terminal: typedef
    - terminal: typeof
    - terminal: var
- name: PragmaDirective
  sequence:
    - terminal: pragma
    - choice:
        - reference: VersionPragmaSpecifier
        - reference: ABICoderPragmaSpecifier
        - reference: ExperimentalPragmaSpecifier
    - terminal: ;
- name: VersionPragmaSpecifier
  sequence:
    - terminal: solidity
    - oneOrMore:
        sequence:
          - reference: VersionPragmaOperator
          - reference: VersionPragmaValue
- name: VersionPragmaOperator
  kind: Token
  choice:
    - terminal: "^"
    - terminal: "~"
    - terminal: "="
    - terminal: "<"
    - terminal: ">"
    - terminal: "<="
    - terminal: ">="
- name: VersionPragmaValue
  kind: Token
  oneOrMore:
    oneOrMore:
      choice:
        - range: { from: "0", to: "9" }
        - terminal: "x"
        - terminal: "X"
        - terminal: "*"
    separator:
      terminal: "."
- name: ABICoderPragmaSpecifier
  sequence:
    - terminal: abicoder
    - reference: Identifier
- name: ExperimentalPragmaSpecifier
  sequence:
    - terminal: experimental
    - reference: Identifier
- name: RawIdentifier
  kind: Token
  sequence:
    - reference: IdentifierStart
    - zeroOrMore:
        reference: IdentifierPart
- name: IdentifierStart
  kind: Token
  choice:
    - terminal: _
    - terminal: $
    - range:
        from: a
        to: z
    - range:
        from: A
        to: Z
- name: IdentifierPart
  kind: Token
  choice:
    - reference: IdentifierStart
    - range:
        from: "0"
        to: "9"
- name: SignedIntegerType
  kind: Token
  sequence:
    - terminal: int
    - optional:
        choice:
          - terminal: "8"
          - terminal: "16"
          - terminal: "24"
          - terminal: "32"
          - terminal: "40"
          - terminal: "48"
          - terminal: "56"
          - terminal: "64"
          - terminal: "72"
          - terminal: "80"
          - terminal: "88"
          - terminal: "96"
          - terminal: "104"
          - terminal: "112"
          - terminal: "120"
          - terminal: "128"
          - terminal: "136"
          - terminal: "144"
          - terminal: "152"
          - terminal: "160"
          - terminal: "168"
          - terminal: "176"
          - terminal: "184"
          - terminal: "192"
          - terminal: "200"
          - terminal: "208"
          - terminal: "216"
          - terminal: "224"
          - terminal: "232"
          - terminal: "240"
          - terminal: "248"
          - terminal: "256"
      config:
        # Makes the likely errors clearer?
        lookahead: { not: { range: { from: "0", to: "9" } } }
- name: UnsignedIntegerType
  kind: Token
  sequence:
    - terminal: u
    - reference: SignedIntegerType
- name: FixedBytesType
  kind: Token
  sequence:
    - terminal: bytes
    - optional:
        choice:
          - terminal: "1"
          - terminal: "2"
          - terminal: "3"
          - terminal: "4"
          - terminal: "5"
          - terminal: "6"
          - terminal: "7"
          - terminal: "8"
          - terminal: "9"
          - terminal: "10"
          - terminal: "11"
          - terminal: "12"
          - terminal: "13"
          - terminal: "14"
          - terminal: "15"
          - terminal: "16"
          - terminal: "17"
          - terminal: "18"
          - terminal: "19"
          - terminal: "20"
          - terminal: "21"
          - terminal: "22"
          - terminal: "23"
          - terminal: "24"
          - terminal: "25"
          - terminal: "26"
          - terminal: "27"
          - terminal: "28"
          - terminal: "29"
          - terminal: "30"
          - terminal: "31"
          - terminal: "32"
      config:
        # Makes the likely errors clearer?
        lookahead: { not: { range: { from: "0", to: "9" } } }
- name: SignedFixedType
  kind: Token
  sequence:
    - terminal: fixed
    - optional:
        sequence:
          - oneOrMore:
              range: { from: "0", to: "9" }
          - terminal: x
          - oneOrMore:
              range: { from: "0", to: "9" }
- name: UnsignedFixedType
  kind: Token
  sequence:
    - terminal: u
    - reference: SignedFixedType
- name: BooleanLiteral
  kind: Token
  choice:
    - terminal: "true"
    - terminal: "false"
- name: DecimalNumber
  kind: Token
  sequence:
    - choice:
        - reference: DecimalInteger
        - reference: DecimalFloat
    - optional:
        reference: DecimalExponent
- name: DecimalInteger
  kind: Token
  oneOrMore:
    range:
      from: "0"
      to: "9"
    separator:
      optional:
        terminal: _
- name: DecimalFloat
  kind: Token
  sequence:
    - optional:
        reference: DecimalInteger
    - terminal: "."
    - reference: DecimalInteger
- name: DecimalExponent
  kind: Token
  sequence:
    - choice:
        - terminal: e
        - terminal: E
    - optional:
        terminal: "-"
    - reference: DecimalInteger
- name: HexNumber
  kind: Token
  sequence:
    - terminal: 0x
    - oneOrMore:
        reference: HexCharacter
        separator:
          optional:
            terminal: _
- name: NumberUnit
  kind: Token
  choice:
    - terminal: days
    - terminal: ether
    - terminal: finney
    - terminal: gwei
    - terminal: hours
    - terminal: minutes
    - terminal: seconds
    - terminal: szabo
    - terminal: weeks
    - terminal: wei
    - terminal: years
- name: HexStringLiteral
  kind: Token
  sequence:
    - terminal: hex
    - choice:
        - delimitedBy:
            open: '"'
            optional:
              reference: PossiblySeparatedPairsOfHexDigits
            close: '"'
        - delimitedBy:
            open: "'"
            optional:
              reference: PossiblySeparatedPairsOfHexDigits
            close: "'"
- name: PossiblySeparatedPairsOfHexDigits
  kind: Token
  oneOrMore:
    repeat:
      min: 2
      max: 2
      reference: HexCharacter
    separator:
      optional:
        terminal: _
- name: HexCharacter
  kind: Token
  choice:
    - range:
        from: "0"
        to: "9"
    - range:
        from: a
        to: f
    - range:
        from: A
        to: F
- name: AsciiStringLiteral
  kind: Token
  choice:
    - reference: SingleQuotedAsciiStringLiteral
    - reference: DoubleQuotedAsciiStringLiteral
- name: SingleQuotedAsciiStringLiteral
  kind: Token
  delimitedBy:
    open: "'"
    zeroOrMore:
      config: { name: Run }
      choice:
        - oneOrMore:
            config: { name: Char }
            difference:
              minuend:
                range:
                  from: " "
                  to: "~"
              subtrahend:
                choice:
                  - terminal: "'"
                  - terminal: "\\"
        - reference: EscapeSequence
    close: "'"
- name: DoubleQuotedAsciiStringLiteral
  kind: Token
  delimitedBy:
    open: '"'
    zeroOrMore:
      config: { name: Run }
      choice:
        - oneOrMore:
            config: { name: Char }
            difference:
              minuend:
                range:
                  from: " "
                  to: "~"
              subtrahend:
                choice:
                  - terminal: '"'
                  - terminal: "\\"
        - reference: EscapeSequence
    close: '"'
- name: UnicodeStringLiteral
  kind: Token
  choice:
    - reference: SingleQuotedUnicodeStringLiteral
    - reference: DoubleQuotedUnicodeStringLiteral
- name: SingleQuotedUnicodeStringLiteral
  kind: Token
  delimitedBy:
    open: "unicode'"
    zeroOrMore:
      config: { name: Run }
      choice:
        - oneOrMore:
            config: { name: Char }
            not:
              choice:
                - terminal: "'"
                - terminal: "\\"
                - terminal: "\n"
                - terminal: "\r"
        - reference: EscapeSequence
    close: "'"
- name: DoubleQuotedUnicodeStringLiteral
  kind: Token
  delimitedBy:
    open: 'unicode"'
    zeroOrMore:
      config: { name: Run }
      choice:
        - oneOrMore:
            config: { name: Char }
            not:
              choice:
                - terminal: '"'
                - terminal: "\\"
                - terminal: "\n"
                - terminal: "\r"
        - reference: EscapeSequence
    close: '"'
- name: EscapeSequence
  kind: Token
  sequence:
    - terminal: "\\"
    - choice:
        - reference: AsciiEscape
        - reference: HexByteEscape
        - reference: UnicodeEscape
- name: AsciiEscape
  kind: Token
  choice:
    - terminal: n
    - terminal: r
    - terminal: t
    - terminal: "'"
    - terminal: '"'
    - terminal: "\\"
    - terminal: "\n"
    - terminal: "\r"
- name: HexByteEscape
  kind: Token
  sequence:
    - terminal: x
    - repeat:
        min: 2
        max: 2
        reference: HexCharacter
- name: UnicodeEscape
  kind: Token
  sequence:
    - terminal: u
    - repeat:
        min: 4
        max: 4
        reference: HexCharacter
- name: YulBlock
  delimitedBy:
    open: "{"
    zeroOrMore:
      reference: YulStatement
    close: "}"
- name: YulStatement
  choice:
    - reference: YulBlock
    - reference: YulVariableDeclaration
    - reference: YulFunctionDefinition
    - reference: YulAssignmentStatement
    - reference: YulFunctionCall
    - reference: YulIfStatement
    - reference: YulForStatement
    - reference: YulSwitchStatement
    - reference: YulLeaveStatement
    - reference: YulBreakStatement
    - reference: YulContinueStatement
- name: YulVariableDeclaration
  sequence:
    - terminal: let
    - oneOrMore:
        reference: YulIdentifierPath
        separator:
          terminal: ","
    - optional:
        sequence:
          - terminal: ":="
          - reference: YulExpression
- name: YulFunctionDefinition
  sequence:
    - terminal: function
    - reference: YulIdentifier
    - delimitedBy:
        open: (
        zeroOrMore:
          reference: YulIdentifier
          separator:
            terminal: ","
        close: )
    - optional:
        sequence:
          - terminal: "->"
          - oneOrMore:
              reference: YulIdentifier
              separator:
                terminal: ","
    - reference: YulBlock
- name: YulAssignmentStatement
  sequence:
    - oneOrMore:
        reference: YulIdentifierPath
        separator:
          terminal: ","
    - terminal: ":="
    - reference: YulExpression
- name: YulFunctionCall
  sequence:
    - reference: YulIdentifier
    - delimitedBy:
        open: (
        zeroOrMore:
          reference: YulExpression
          separator:
            terminal: ","
        close: )
- name: YulIfStatement
  sequence:
    - terminal: if
    - reference: YulExpression
    - reference: YulBlock
- name: YulLeaveStatement
  terminal: leave
- name: YulBreakStatement
  terminal: break
- name: YulContinueStatement
  terminal: continue
- name: YulForStatement
  sequence:
    - terminal: for
    - reference: YulBlock
    - reference: YulExpression
    - reference: YulBlock
    - reference: YulBlock
- name: YulSwitchStatement
  sequence:
    - terminal: switch
    - reference: YulExpression
    - oneOrMore:
        sequence:
          - choice:
              - sequence:
                  - terminal: case
                  - reference: YulLiteral
              - terminal: default
          - reference: YulBlock
- name: YulExpression
  choice:
    - reference: YulIdentifierPath
    - reference: YulFunctionCall
    - reference: YulLiteral
- name: YulIdentifierPath
  oneOrMore:
    reference: YulIdentifier
    separator:
      terminal: "."
- name: YulLiteral
  choice:
    - reference: YulDecimalNumberLiteral
    - reference: YulHexLiteral
    - reference: AsciiStringLiteral
    - reference: BooleanLiteral
    - reference: HexStringLiteral
- name: YulIdentifier
  kind: Token
  difference:
    minuend:
      reference: RawIdentifier
    subtrahend:
      reference: YulKeyword
- name: YulKeyword
  kind: Token
  choice:
    - reference: BooleanLiteral
    - terminal: break
    - terminal: case
    - terminal: continue
    - terminal: default
    - terminal: for
    - terminal: function
    - terminal: hex
    - terminal: if
    - terminal: leave
    - terminal: let
    - terminal: switch
- name: YulDecimalNumberLiteral
  kind: Token
  choice:
    - terminal: "0"
    - sequence:
        - range:
            from: "1"
            to: "9"
        - zeroOrMore:
            range:
              from: "0"
              to: "9"
- name: YulHexLiteral
  kind: Token
  sequence:
    - terminal: "0x"
    - oneOrMore:
        reference: HexCharacter
