// This file is generated automatically by infrastructure scripts. Please don't edit by hand.

interface cst {
    /// Represents different kinds of nonterminal nodes in the syntax tree.
    /// These are nodes that can have child nodes and represent higher-level language constructs.
    enum nonterminal-kind {
                /// This kind represents a `AdditionExpression` node, with the following structure:
                /// (* Left-associative binary operator *)
                /// AdditionExpression = (* left_operand: *) Expression
                ///                      (* operator: *) PLUS
                ///                      (* right_operand: *) Expression;
                %addition-expression,
                /// This kind represents a `Expression` node, with the following structure:
                /// Expression = (* variant: *) AdditionExpression
                ///            | (* variant: *) NegationExpression
                ///            | (* variant: *) MemberAccessExpression
                ///            | (* variant: *) STRING_LITERAL
                ///            | (* variant: *) IDENTIFIER;
                %expression,
                /// This kind represents a `Literal` node, with the following structure:
                /// Literal = (* variant: *) STRING_LITERAL;
                %literal,
                /// This kind represents a `MemberAccessExpression` node, with the following structure:
                /// (* Postfix unary operator *)
                /// MemberAccessExpression = (* operand: *) Expression
                ///                          (* period: *) PERIOD
                ///                          (* member: *) IDENTIFIER;
                %member-access-expression,
                /// This kind represents a `NegationExpression` node, with the following structure:
                /// (* Prefix unary operator *)
                /// NegationExpression = (* operator: *) BANG
                ///                      (* operand: *) Expression;
                %negation-expression,
                /// This kind represents a `SeparatedIdentifiers` node, with the following structure:
                /// (* Introduced in 1.0.0 *)
                /// SeparatedIdentifiers = (* item: *) IDENTIFIER ((* separator: *) PERIOD (* item: *) IDENTIFIER)*;
                %separated-identifiers,
                /// This kind represents a `SourceUnit` node, with the following structure:
                /// SourceUnit = (* members: *) SourceUnitMembers;
                %source-unit,
                /// This kind represents a `SourceUnitMember` node, with the following structure:
                /// SourceUnitMember = (* variant: *) Tree
                ///                  | (* variant: *) Expression
                ///                  | (* variant: *) SeparatedIdentifiers
                ///                  | (* variant: *) Literal;
                %source-unit-member,
                /// This kind represents a `SourceUnitMembers` node, with the following structure:
                /// SourceUnitMembers = (* item: *) SourceUnitMember+;
                %source-unit-members,
                /// This kind represents a `Tree` node, with the following structure:
                /// Tree = (* keyword: *) TREE_KEYWORD
                ///        (* name: *) IDENTIFIER?
                ///        (* node: *) TreeNode
                ///        (* semicolon: *) SEMICOLON;
                %tree,
                /// This kind represents a `TreeNode` node, with the following structure:
                /// TreeNode = (* open_bracket: *) OPEN_BRACKET
                ///            (* members: *) TreeNodeChildren
                ///            (* close_bracket: *) CLOSE_BRACKET;
                %tree-node,
                /// This kind represents a `TreeNodeChild` node, with the following structure:
                /// TreeNodeChild = (* variant: *) TreeNode
                ///               | (* variant: *) DELIMITED_IDENTIFIER;
                %tree-node-child,
                /// This kind represents a `TreeNodeChildren` node, with the following structure:
                /// TreeNodeChildren = (* item: *) TreeNodeChild+;
                %tree-node-children,
    }

    /// Represents different kinds of terminal nodes in the syntax tree.
    /// These are leaf nodes that represent actual tokens in the source code.
    enum terminal-kind {
        /// This terminal is created when the parser encounters an unexpected part of the input,
        /// and it cannot recognize it as any valid syntax in this position in the grammar.
        unrecognized,
        /// This terminal is created when the parser is expecting a certain terminal, but it cannot find it.
        /// Adding the missing input in this position may allow the parser to produce a valid tree there.
        missing,
                /// This kind represents a `Bang` node, with the following structure:
                /// BANG = "!";
                %bang,
                /// This kind represents a `CloseBracket` node, with the following structure:
                /// CLOSE_BRACKET = "]";
                %close-bracket,
                /// This kind represents a `DelimitedIdentifier` node, with the following structure:
                /// DELIMITED_IDENTIFIER = «DELIMITED_IDENTIFIER_START» «DELIMITED_IDENTIFIER_PART»*;
                %delimited-identifier,
                /// This kind represents a `EndOfLine` node, with the following structure:
                /// END_OF_LINE = "\r"? "\n";
                %end-of-line,
                /// This kind represents a `Identifier` node, with the following structure:
                /// IDENTIFIER = «RAW_IDENTIFIER»;
                %identifier,
                /// This kind represents a `MultiLineComment` node, with the following structure:
                /// MULTI_LINE_COMMENT = "/*" (!"*" | "*")* "*/";
                %multi-line-comment,
                /// This kind represents a `OpenBracket` node, with the following structure:
                /// OPEN_BRACKET = "[";
                %open-bracket,
                /// This kind represents a `Period` node, with the following structure:
                /// PERIOD = ".";
                %period,
                /// This kind represents a `Plus` node, with the following structure:
                /// PLUS = "+";
                %plus,
                /// This kind represents a `Semicolon` node, with the following structure:
                /// SEMICOLON = ";";
                %semicolon,
                /// This kind represents a `SingleLineComment` node, with the following structure:
                /// SINGLE_LINE_COMMENT = "//" (!("\r" "\n"))*;
                %single-line-comment,
                /// This kind represents a `StringLiteral` node, with the following structure:
                /// STRING_LITERAL = '"' («ESCAPE_SEQUENCE» | !('"' "\\" "\r" "\n"))* '"';
                %string-literal,
                /// This kind represents a `TreeKeyword` node, with the following structure:
                /// TREE_KEYWORD = "tree";
                %tree-keyword,
                /// This kind represents a `Whitespace` node, with the following structure:
                /// WHITESPACE = (" " | "\t")+;
                %whitespace,
    }

    //// Useful extension methods for working with terminals and terminal kinds.
    resource terminal-kind-extensions {
        /// Returns true if the terminal is a trivia token. i.e. whitespace, comments, etc... 
        is-trivia: static func(kind: terminal-kind) -> bool;
        /// Returns true if the terminal is a valid token in the language grammar.
        is-valid: static func(kind: terminal-kind) -> bool;
    }

    /// Represents the different types of relationships between nodes in the syntax tree.
    enum edge-label {
            %item,
            %variant,
            %separator,
            %operand,
            %left-operand,
            %right-operand,
            %leading-trivia,
            %trailing-trivia,
                %close-bracket,
                %keyword,
                %member,
                %members,
                %name,
                %node,
                %open-bracket,
                %operator,
                %period,
                %semicolon,
    }

    /// The super type of all nodes in a tree.
    variant node {
        /// A nonterminal node that may contain other children nodes.
        nonterminal(nonterminal-node),
        /// A terminal node that represents a recognized part of the source string.
        terminal(terminal-node)
    }

    /// Represents a non-terminal node in the syntax tree.
    /// These nodes can have child nodes and represent language constructs.
    resource nonterminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this nonterminal node.
        kind: func() -> nonterminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges connected to this node.
        children: func() -> list<edge>;
        /// Converts the node and its children back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;

        /// Creates a cursor positioned at the given text offset within this node.
        create-cursor: func(text-offset: text-index) -> cursor;
    }

    /// Represents a terminal node in the syntax tree.
    /// These are leaf nodes that represent actual tokens from the source code.
    resource terminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this terminal node.
        kind: func() -> terminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges connected to this node.
        children: func() -> list<edge>;
        /// Converts the node back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;
    }

    /// Represents a connection between nodes in the syntax tree.
    record edge {
        /// Optional label describing the relationship between nodes.
        label: option<edge-label>,
        /// The target node of this edge.
        node: node,
    }

    /// Provides navigation and traversal capabilities over the syntax tree.
    resource cursor {
        /// Resets the cursor to its initial position.
        reset: func();
        /// Marks the cursor as completed.
        complete: func();
        /// Returns whether the cursor has completed its traversal.
        is-completed: func() -> bool;

        /// Creates a copy of this cursor at its current position with the same ancestors.
        /// The new cursor can be moved independently without affecting the original cursor.
        clone: func() -> cursor;
        /// Creates a copy of this cursor at its current position, but without any ancestors.
        /// This is useful for limiting the scope of a search or query to the sub-tree only, without backtracking to parent nodes.
        /// The new cursor can be moved independently without affecting the original cursor.
        spawn: func() -> cursor;

        /// Returns the current node under the cursor.
        node: func() -> node;
        /// Returns the label of the edge from the parent to the current node, if any.
        label: func() -> option<edge-label>;

        /// Returns the current text offset of the cursor.
        text-offset: func() -> text-index;
        /// Returns the text range covered by the current node.
        text-range: func() -> text-range;

        /// Returns the current depth in the tree (i.e. number of ancestors).
        depth: func() -> u32;

        /// Returns the list of ancestor nodes up to the root.
        ancestors: func() -> list<nonterminal-node>;

        /// Moves to the next node in pre-order traversal.
        go-to-next: func() -> bool;
        /// Moves to the next node that isn't a descendant of the current node.
        go-to-next-non-descendent: func() -> bool;
        /// Moves to the previous node in pre-order traversal.
        go-to-previous: func() -> bool;

        /// Moves up to the parent node.
        go-to-parent: func() -> bool;

        /// Moves to the first child of the current node.
        go-to-first-child: func() -> bool;
        /// Moves to the last child of the current node.
        go-to-last-child: func() -> bool;
        /// Moves to the nth child of the current node.
        go-to-nth-child: func(child-number: u32) -> bool;

        /// Moves to the next sibling node.
        go-to-next-sibling: func() -> bool;
        /// Moves to the previous sibling node.
        go-to-previous-sibling: func() -> bool;

        /// Moves to the next terminal node.
        go-to-next-terminal: func() -> bool;
        /// Moves to the next terminal node of a specific kind.
        go-to-next-terminal-with-kind: func(kind: terminal-kind) -> bool;
        /// Moves to the next terminal node matching any of the given kinds.
        go-to-next-terminal-with-kinds: func(kinds: list<terminal-kind>) -> bool;

        /// Nonterminal navigation methods
        /// Moves to the next nonterminal node.
        go-to-next-nonterminal: func() -> bool;
        /// Moves to the next nonterminal node of a specific kind.
        go-to-next-nonterminal-with-kind: func(kind: nonterminal-kind) -> bool;
        /// Moves to the next nonterminal node matching any of the given kinds.
        go-to-next-nonterminal-with-kinds: func(kinds: list<nonterminal-kind>) -> bool;

        /// Executes the given queries and returns an iterator over the matches.
        query: func(queries: list<borrow<query>>) -> query-match-iterator;
    }

    /// Represents a tree query for pattern matching in the syntax tree.
    resource query {
        /// Parses a query string into a query object.
        /// Throws an error if the query syntax is invalid.
        parse: static func(text: string) -> result<query, query-error>;
    }

    /// Represents an error that occurred while parsing a query.
    record query-error {
        /// The error message describing what went wrong.
        message: string,
        /// The line number where the error occurred.
        line: u32,
        /// The column number where the error occurred.
        column: u32,
    }

    /// Represents a match found by executing a query.
    record query-match {
        /// The index of the query that produced this match.
        query-number: u32,
        /// List of captured nodes and their names from the query.
        captures: list<tuple<string, list<cursor>>>,
    }

    /// Iterator over query matches in the syntax tree.
    resource query-match-iterator {
        /// Returns the next match or None if there are no more matches.
        next: func() -> option<query-match>;
    }

    /// Represents a position in the source text, with indices for different unicode encodings of the source.
    record text-index {
        /// Byte offset in UTF-8 encoding.
        utf8: u32,
        /// Character offset in UTF-16 encoding.
        utf16: u32,
        /// Line number (0-based).
        line: u32,
        /// Column number (0-based).
        column: u32,
    }

    /// Represents a range in the source text.
    record text-range {
        /// Starting (inclusive) position of the range.
        start: text-index,
        /// Ending (exclusive) position of the range.
        end: text-index,
    }
}
