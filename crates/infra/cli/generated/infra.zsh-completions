# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

#compdef infra

autoload -U is-at-least

_infra() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
":: :_infra_commands" \
"*::: :->infra_cli" \
&& ret=0
    case $state in
    (infra_cli)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:infra-command-$line[1]:"
        case $line[1] in
            (setup)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::commands:((workspace\:"Configure binaries used by editors for local development.."
cargo\:"Install Cargo dependencies"
npm\:"Install NPM dependencies"
pipenv\:"Install Pipenv dependencies"))' \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::commands:((cargo\:"Run '\''cargo check'\'' for all crates, features, and targets"
npm\:"Check NPM packages for any outdated codegen steps"
mkdocs\:"Check mkdocs documentation for any build issues or broken links"))' \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::commands:((cargo\:"Run '\''cargo test'\'' for all crates, features, and targets"
npm\:"Run '\''test'\'' scripts in each NPM package in the repository"))' \
&& ret=0
;;
(lint)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::commands:((cargo-fmt\:"Format all Rust source files"
cspell\:"Check for spelling issues in Markdown files"
prettier\:"Format all non-Rust source files"
markdown-link-check\:"Check for broken links in Markdown files"
markdown-lint\:"Check for violations in Markdown files"
shellcheck\:"Check for violations in Bash files"
tsc\:"Check for type errors in TypeScript files"
yamllint\:"Check for violations issues in Yaml files"))' \
&& ret=0
;;
(ci)
_arguments "${_arguments_options[@]}" \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':command:((slang_solidity\:"Runs the public '\''slang_solidity'\'' crate shipped to Cargo users"
solidity_testing_sanctuary\:"Runs the Solidity parser against source files from the Sanctuary repositories"))' \
'*::args:' \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'*::commands:((mkdocs\:"Build and serve documentation locally, watching for changes"))' \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
':command:((changesets\:"Consume pending changesets, update changelogs and package versions, then send a PR"
npm\:"Publish source packages to \[npmjs.com\]"
cargo\:"Publish source crates to \[crates.io\]"
github-release\:"Publish a new release in the GitHub repository"
lock-files\:"Publish updated lock files to a PR for review"))' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
":: :_infra__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:infra-help-command-$line[1]:"
        case $line[1] in
            (setup)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(check)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(test)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(lint)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(ci)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(run)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(watch)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(publish)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_infra_commands] )) ||
_infra_commands() {
    local commands; commands=(
'setup:Setup toolchains and dependencies' \
'check:Run codegen checks, and makes sure source files are up to date' \
'test:Run unit tests' \
'lint:Run linters for formatting, spelling, broken links, and other issues' \
'ci:Perform a full CI run locally, by running '\''setup'\'', '\''check'\'', '\''test'\'', and '\''lint'\'' (in that order)' \
'run:Run a local binary within this repository, forwarding any additional arguments along' \
'watch:Build and serve documentation locally, watching for changes' \
'publish:Publish different artifacts from this repository' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'infra commands' commands "$@"
}
(( $+functions[_infra__check_commands] )) ||
_infra__check_commands() {
    local commands; commands=()
    _describe -t commands 'infra check commands' commands "$@"
}
(( $+functions[_infra__help__check_commands] )) ||
_infra__help__check_commands() {
    local commands; commands=()
    _describe -t commands 'infra help check commands' commands "$@"
}
(( $+functions[_infra__ci_commands] )) ||
_infra__ci_commands() {
    local commands; commands=()
    _describe -t commands 'infra ci commands' commands "$@"
}
(( $+functions[_infra__help__ci_commands] )) ||
_infra__help__ci_commands() {
    local commands; commands=()
    _describe -t commands 'infra help ci commands' commands "$@"
}
(( $+functions[_infra__help_commands] )) ||
_infra__help_commands() {
    local commands; commands=(
'setup:Setup toolchains and dependencies' \
'check:Run codegen checks, and makes sure source files are up to date' \
'test:Run unit tests' \
'lint:Run linters for formatting, spelling, broken links, and other issues' \
'ci:Perform a full CI run locally, by running '\''setup'\'', '\''check'\'', '\''test'\'', and '\''lint'\'' (in that order)' \
'run:Run a local binary within this repository, forwarding any additional arguments along' \
'watch:Build and serve documentation locally, watching for changes' \
'publish:Publish different artifacts from this repository' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'infra help commands' commands "$@"
}
(( $+functions[_infra__help__help_commands] )) ||
_infra__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'infra help help commands' commands "$@"
}
(( $+functions[_infra__help__lint_commands] )) ||
_infra__help__lint_commands() {
    local commands; commands=()
    _describe -t commands 'infra help lint commands' commands "$@"
}
(( $+functions[_infra__lint_commands] )) ||
_infra__lint_commands() {
    local commands; commands=()
    _describe -t commands 'infra lint commands' commands "$@"
}
(( $+functions[_infra__help__publish_commands] )) ||
_infra__help__publish_commands() {
    local commands; commands=()
    _describe -t commands 'infra help publish commands' commands "$@"
}
(( $+functions[_infra__publish_commands] )) ||
_infra__publish_commands() {
    local commands; commands=()
    _describe -t commands 'infra publish commands' commands "$@"
}
(( $+functions[_infra__help__run_commands] )) ||
_infra__help__run_commands() {
    local commands; commands=()
    _describe -t commands 'infra help run commands' commands "$@"
}
(( $+functions[_infra__run_commands] )) ||
_infra__run_commands() {
    local commands; commands=()
    _describe -t commands 'infra run commands' commands "$@"
}
(( $+functions[_infra__help__setup_commands] )) ||
_infra__help__setup_commands() {
    local commands; commands=()
    _describe -t commands 'infra help setup commands' commands "$@"
}
(( $+functions[_infra__setup_commands] )) ||
_infra__setup_commands() {
    local commands; commands=()
    _describe -t commands 'infra setup commands' commands "$@"
}
(( $+functions[_infra__help__test_commands] )) ||
_infra__help__test_commands() {
    local commands; commands=()
    _describe -t commands 'infra help test commands' commands "$@"
}
(( $+functions[_infra__test_commands] )) ||
_infra__test_commands() {
    local commands; commands=()
    _describe -t commands 'infra test commands' commands "$@"
}
(( $+functions[_infra__help__watch_commands] )) ||
_infra__help__watch_commands() {
    local commands; commands=()
    _describe -t commands 'infra help watch commands' commands "$@"
}
(( $+functions[_infra__watch_commands] )) ||
_infra__watch_commands() {
    local commands; commands=()
    _describe -t commands 'infra watch commands' commands "$@"
}

if [ "$funcstack[1]" = "_infra" ]; then
    _infra "$@"
else
    compdef _infra infra
fi
