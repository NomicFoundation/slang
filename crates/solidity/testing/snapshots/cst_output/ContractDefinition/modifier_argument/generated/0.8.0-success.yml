# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

Source: >
  1  │ //SPDX-License-Identifier: MIT                                                                     │ 0..30
  2  │ contract TYREAI {                                                                                  │ 31..48
  3  │   function freeMint(uint256 _mintAmount) public mintCompliance(_mintAmount) {                      │ 49..126
  4  │     if (!isFreeMint()) revert FreeMintOver();                                                      │ 127..172
  5  │     if (freeWallets[msg.sender] + _mintAmount > freeMaxMintPerWallet) revert ExceedsWalletLimit(); │ 173..271
  6  │                                                                                                    │ 272..272
  7  │     unchecked {                                                                                    │ 273..288
  8  │       freeWallets[msg.sender] += _mintAmount;                                                      │ 289..334
  9  │     }                                                                                              │ 335..340
  10 │     _safeMint(msg.sender, _mintAmount);                                                            │ 341..380
  11 │   }                                                                                                │ 381..384
  12 │ }                                                                                                  │ 385..386

Errors: []

Tree:
  - ContractDefinition (Rule): # 0..387 "//SPDX-License-Identifier: MIT\ncontract TYREAI {\n ..."
      - LeadingTrivia (Rule): # 0..31 "//SPDX-License-Identifier: MIT\n"
          - SingleLineComment (Trivia): "//SPDX-License-Identifier: MIT" # 0..30
      - ContractKeyword (Token): "contract" # 31..39
      - Identifier (Token): "TYREAI" # 40..46
      - OpenBrace (Token): "{" # 47..48
      - ContractMembersList (Rule): # 49..385 "  function freeMint(uint256 _mintAmount) public mi..."
          - FunctionDefinition (Rule): # 49..385 "  function freeMint(uint256 _mintAmount) public mi..."
              - FunctionKeyword (Token): "function" # 51..59
              - Identifier (Token): "freeMint" # 60..68
              - ParametersDeclaration (Rule): # 68..89 "(uint256 _mintAmount)"
                  - OpenParen (Token): "(" # 68..69
                  - ParametersList (Rule): # 69..88 "uint256 _mintAmount"
                      - Parameter (Rule): # 69..88 "uint256 _mintAmount"
                          - TypeName (Rule): # 69..76 "uint256"
                              - UnsignedIntegerType (Token): "uint256" # 69..76
                          - Identifier (Token): "_mintAmount" # 77..88
                  - CloseParen (Token): ")" # 88..89
              - FunctionAttributesList (Rule): # 89..124 " public mintCompliance(_mintAmount)"
                  - PublicKeyword (Token): "public" # 90..96
                  - ModifierInvocation (Rule): # 96..124 " mintCompliance(_mintAmount)"
                      - IdentifierPath (Rule): # 96..111 " mintCompliance"
                          - Identifier (Token): "mintCompliance" # 97..111
                      - ArgumentsDeclaration (Rule): # 111..124 "(_mintAmount)"
                          - OpenParen (Token): "(" # 111..112
                          - PositionalArgumentsList (Rule): # 112..123 "_mintAmount"
                              - Expression (Rule): # 112..123 "_mintAmount"
                                  - Identifier (Token): "_mintAmount" # 112..123
                          - CloseParen (Token): ")" # 123..124
              - Block (Rule): # 124..385 " {\n    if (!isFreeMint()) revert FreeMintOver();\n ..."
                  - OpenBrace (Token): "{" # 125..126
                  - StatementsList (Rule): # 127..381 "    if (!isFreeMint()) revert FreeMintOver();\n    ..."
                      - Statement (Rule): # 127..173 "    if (!isFreeMint()) revert FreeMintOver();\n"
                          - IfStatement (Rule): # 127..173 "    if (!isFreeMint()) revert FreeMintOver();\n"
                              - IfKeyword (Token): "if" # 131..133
                              - OpenParen (Token): "(" # 134..135
                              - Expression (Rule): # 135..148 "!isFreeMint()"
                                  - UnaryPrefixExpression (Rule): # 135..148 "!isFreeMint()"
                                      - Bang (Token): "!" # 135..136
                                      - Expression (Rule): # 136..148 "isFreeMint()"
                                          - FunctionCallExpression (Rule): # 136..148 "isFreeMint()"
                                              - Expression (Rule): # 136..146 "isFreeMint"
                                                  - Identifier (Token): "isFreeMint" # 136..146
                                              - ArgumentsDeclaration (Rule): # 146..148 "()"
                                                  - OpenParen (Token): "(" # 146..147
                                                  - CloseParen (Token): ")" # 147..148
                              - CloseParen (Token): ")" # 148..149
                              - Statement (Rule): # 149..173 " revert FreeMintOver();\n"
                                  - RevertStatement (Rule): # 149..173 " revert FreeMintOver();\n"
                                      - RevertKeyword (Token): "revert" # 150..156
                                      - IdentifierPath (Rule): # 156..169 " FreeMintOver"
                                          - Identifier (Token): "FreeMintOver" # 157..169
                                      - ArgumentsDeclaration (Rule): # 169..171 "()"
                                          - OpenParen (Token): "(" # 169..170
                                          - CloseParen (Token): ")" # 170..171
                                      - Semicolon (Token): ";" # 171..172
                      - Statement (Rule): # 173..272 "    if (freeWallets[msg.sender] + _mintAmount > fr..."
                          - IfStatement (Rule): # 173..272 "    if (freeWallets[msg.sender] + _mintAmount > fr..."
                              - IfKeyword (Token): "if" # 177..179
                              - OpenParen (Token): "(" # 180..181
                              - Expression (Rule): # 181..241 "freeWallets[msg.sender] + _mintAmount > freeMaxMin..."
                                  - BinaryExpression (Rule): # 181..241 "freeWallets[msg.sender] + _mintAmount > freeMaxMin..."
                                      - Expression (Rule): # 181..218 "freeWallets[msg.sender] + _mintAmount"
                                          - BinaryExpression (Rule): # 181..218 "freeWallets[msg.sender] + _mintAmount"
                                              - Expression (Rule): # 181..204 "freeWallets[msg.sender]"
                                                  - IndexAccessExpression (Rule): # 181..204 "freeWallets[msg.sender]"
                                                      - Expression (Rule): # 181..192 "freeWallets"
                                                          - Identifier (Token): "freeWallets" # 181..192
                                                      - OpenBracket (Token): "[" # 192..193
                                                      - Expression (Rule): # 193..203 "msg.sender"
                                                          - MemberAccessExpression (Rule): # 193..203 "msg.sender"
                                                              - Expression (Rule): # 193..196 "msg"
                                                                  - Identifier (Token): "msg" # 193..196
                                                              - Period (Token): "." # 196..197
                                                              - Identifier (Token): "sender" # 197..203
                                                      - CloseBracket (Token): "]" # 203..204
                                              - Plus (Token): "+" # 205..206
                                              - Expression (Rule): # 206..218 " _mintAmount"
                                                  - Identifier (Token): "_mintAmount" # 207..218
                                      - GreaterThan (Token): ">" # 219..220
                                      - Expression (Rule): # 220..241 " freeMaxMintPerWallet"
                                          - Identifier (Token): "freeMaxMintPerWallet" # 221..241
                              - CloseParen (Token): ")" # 241..242
                              - Statement (Rule): # 242..272 " revert ExceedsWalletLimit();\n"
                                  - RevertStatement (Rule): # 242..272 " revert ExceedsWalletLimit();\n"
                                      - RevertKeyword (Token): "revert" # 243..249
                                      - IdentifierPath (Rule): # 249..268 " ExceedsWalletLimit"
                                          - Identifier (Token): "ExceedsWalletLimit" # 250..268
                                      - ArgumentsDeclaration (Rule): # 268..270 "()"
                                          - OpenParen (Token): "(" # 268..269
                                          - CloseParen (Token): ")" # 269..270
                                      - Semicolon (Token): ";" # 270..271
                      - Statement (Rule): # 272..341 "\n    unchecked {\n      freeWallets[msg.sender] += ..."
                          - UncheckedBlock (Rule): # 272..341 "\n    unchecked {\n      freeWallets[msg.sender] += ..."
                              - UncheckedKeyword (Token): "unchecked" # 277..286
                              - Block (Rule): # 286..341 " {\n      freeWallets[msg.sender] += _mintAmount;\n ..."
                                  - OpenBrace (Token): "{" # 287..288
                                  - StatementsList (Rule): # 289..335 "      freeWallets[msg.sender] += _mintAmount;\n"
                                      - Statement (Rule): # 289..335 "      freeWallets[msg.sender] += _mintAmount;\n"
                                          - ExpressionStatement (Rule): # 289..335 "      freeWallets[msg.sender] += _mintAmount;\n"
                                              - Expression (Rule): # 289..333 "      freeWallets[msg.sender] += _mintAmount"
                                                  - BinaryExpression (Rule): # 289..333 "      freeWallets[msg.sender] += _mintAmount"
                                                      - Expression (Rule): # 289..318 "      freeWallets[msg.sender]"
                                                          - IndexAccessExpression (Rule): # 289..318 "      freeWallets[msg.sender]"
                                                              - Expression (Rule): # 289..306 "      freeWallets"
                                                                  - Identifier (Token): "freeWallets" # 295..306
                                                              - OpenBracket (Token): "[" # 306..307
                                                              - Expression (Rule): # 307..317 "msg.sender"
                                                                  - MemberAccessExpression (Rule): # 307..317 "msg.sender"
                                                                      - Expression (Rule): # 307..310 "msg"
                                                                          - Identifier (Token): "msg" # 307..310
                                                                      - Period (Token): "." # 310..311
                                                                      - Identifier (Token): "sender" # 311..317
                                                              - CloseBracket (Token): "]" # 317..318
                                                      - PlusEqual (Token): "+=" # 319..321
                                                      - Expression (Rule): # 321..333 " _mintAmount"
                                                          - Identifier (Token): "_mintAmount" # 322..333
                                              - Semicolon (Token): ";" # 333..334
                                  - CloseBrace (Token): "}" # 339..340
                      - Statement (Rule): # 341..381 "    _safeMint(msg.sender, _mintAmount);\n"
                          - ExpressionStatement (Rule): # 341..381 "    _safeMint(msg.sender, _mintAmount);\n"
                              - Expression (Rule): # 341..379 "    _safeMint(msg.sender, _mintAmount)"
                                  - FunctionCallExpression (Rule): # 341..379 "    _safeMint(msg.sender, _mintAmount)"
                                      - Expression (Rule): # 341..354 "    _safeMint"
                                          - Identifier (Token): "_safeMint" # 345..354
                                      - ArgumentsDeclaration (Rule): # 354..379 "(msg.sender, _mintAmount)"
                                          - OpenParen (Token): "(" # 354..355
                                          - PositionalArgumentsList (Rule): # 355..378 "msg.sender, _mintAmount"
                                              - Expression (Rule): # 355..365 "msg.sender"
                                                  - MemberAccessExpression (Rule): # 355..365 "msg.sender"
                                                      - Expression (Rule): # 355..358 "msg"
                                                          - Identifier (Token): "msg" # 355..358
                                                      - Period (Token): "." # 358..359
                                                      - Identifier (Token): "sender" # 359..365
                                              - Comma (Token): "," # 365..366
                                              - Expression (Rule): # 366..378 " _mintAmount"
                                                  - Identifier (Token): "_mintAmount" # 367..378
                                          - CloseParen (Token): ")" # 378..379
                              - Semicolon (Token): ";" # 379..380
                  - CloseBrace (Token): "}" # 383..384
      - CloseBrace (Token): "}" # 385..386
