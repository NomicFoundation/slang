# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

Source: >
  1  │ contract Contract {                                                              │ 0..19
  2  │ 	function _transfer(address while) private {                                     │ 20..64
  3  │ 		if(while == pair && !_isExcludedFromFee[to]){                                  │ 65..112
  4  │ 			uint256 a = 1;                                                                │ 113..130
  5  │ 		}                                                                              │ 131..134
  6  │ 	}                                                                               │ 135..137
  7  │                                                                                  │ 138..138
  8  │ 	function abc() {                                                                │ 139..156
  9  │ 		uint256 x = 0;                                                                 │ 157..173
  10 │ 		unchecked { invalid sequence }                                                 │ 174..206
  11 │ 	}                                                                               │ 207..209
  12 │ }                                                                                │ 210..211

Errors: # 3 total
  - >
    Error: Expected CloseParen or Comma.
       ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:2:29]
       │
     2 │     function _transfer(address while) private {
       │                                ──┬──  
       │                                  ╰──── Error occurred here.
    ───╯
  - >
    Error: Expected AddressKeyword or AsciiStringLiteral or BoolKeyword or ByteKeyword or BytesKeyword or DecimalLiteral or FalseKeyword or FixedKeyword or HexLiteral or HexStringLiteral or Identifier or IntKeyword or NewKeyword or OpenBracket or OpenParen or PayableKeyword or StringKeyword or TrueKeyword or UfixedKeyword or UintKeyword.
       ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:3:6]
       │
     3 │        if(while == pair && !_isExcludedFromFee[to]){
       │           ────────────────────┬───────────────────  
       │                               ╰───────────────────── Error occurred here.
    ───╯
  - >
    Error: Expected AddressKeyword or AsciiStringLiteral or AssemblyKeyword or BoolKeyword or BreakKeyword or ByteKeyword or BytesKeyword or CloseBrace or ContinueKeyword or DecimalLiteral or DeleteKeyword or DoKeyword or EmitKeyword or FalseKeyword or FixedKeyword or ForKeyword or FunctionKeyword or HexLiteral or HexStringLiteral or Identifier or IfKeyword or IntKeyword or MappingKeyword or NewKeyword or OpenBrace or OpenBracket or OpenParen or PayableKeyword or ReturnKeyword or StringKeyword or TrueKeyword or UfixedKeyword or UintKeyword or WhileKeyword.
        ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:10:3]
        │
     10 │ ╭─▶        unchecked { invalid sequence }
     11 │ ├─▶     }
        │ │           
        │ ╰─────────── Error occurred here.
    ────╯

Tree:
  - ContractDefinition: # 0..212 "contract Contract {\n\tfunction _transfer(address wh..."
      - ContractKeyword: "contract" # 0..8
      - Identifier: "Contract" # 9..17
      - OpenBrace: "{" # 18..19
      - (inner:) ContractMembers: # 20..210 "\tfunction _transfer(address while) private {\n\t\tif(..."
          - (inner:) ContractMember: # 20..138 "\tfunction _transfer(address while) private {\n\t\tif(..."
              - (inner:) FunctionDefinition: # 20..138 "\tfunction _transfer(address while) private {\n\t\tif(..."
                  - FunctionKeyword: "function" # 21..29
                  - (inner:) FunctionName: # 29..39 " _transfer"
                      - Identifier: "_transfer" # 30..39
                  - (inner:) ParametersDeclaration: # 39..54 "(address while)"
                      - OpenParen: "(" # 39..40
                      - (inner:) Parameters: # 40..47 "address"
                          - (inner:) Parameter: # 40..47 "address"
                              - (inner:) TypeName: # 40..47 "address"
                                  - (inner:) ElementaryType: # 40..47 "address"
                                      - (inner:) AddressType: # 40..47 "address"
                                          - AddressKeyword: "address" # 40..47
                      - SKIPPED: "while" # 48..53
                      - CloseParen: ")" # 53..54
                  - (inner:) FunctionAttributes: # 54..62 " private"
                      - (inner:) FunctionAttribute: # 54..62 " private"
                          - PrivateKeyword: "private" # 55..62
                  - (inner:) FunctionBody: # 62..138 " {\n\t\tif(while == pair && !_isExcludedFromFee[to]){..."
                      - (inner:) Block: # 62..138 " {\n\t\tif(while == pair && !_isExcludedFromFee[to]){..."
                          - OpenBrace: "{" # 63..64
                          - (inner:) Statements: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                              - (inner:) Statement: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                                  - (inner:) IfStatement: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                                      - IfKeyword: "if" # 67..69
                                      - OpenParen: "(" # 69..70
                                      - SKIPPED: "while == pair && !_isExcludedFromFee[to]" # 70..110
                                      - CloseParen: ")" # 110..111
                                      - (inner:) Statement: # 111..135 "{\n\t\t\tuint256 a = 1;\n\t\t}\n"
                                          - (inner:) Block: # 111..135 "{\n\t\t\tuint256 a = 1;\n\t\t}\n"
                                              - OpenBrace: "{" # 111..112
                                              - (inner:) Statements: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                  - (inner:) Statement: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                      - (inner:) VariableDeclarationStatement: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                          - (inner:) VariableDeclarationType: # 113..123 "\t\t\tuint256"
                                                              - (inner:) TypeName: # 113..123 "\t\t\tuint256"
                                                                  - (inner:) ElementaryType: # 113..123 "\t\t\tuint256"
                                                                      - UintKeyword: "uint256" # 116..123
                                                          - Identifier: "a" # 124..125
                                                          - (inner:) VariableDeclarationValue: # 125..129 " = 1"
                                                              - Equal: "=" # 126..127
                                                              - (inner:) Expression: # 127..129 " 1"
                                                                  - (inner:) DecimalNumberExpression: # 127..129 " 1"
                                                                      - DecimalLiteral: "1" # 128..129
                                                          - Semicolon: ";" # 129..130
                                              - CloseBrace: "}" # 133..134
                          - CloseBrace: "}" # 136..137
          - (inner:) ContractMember: # 138..210 "\n\tfunction abc() {\n\t\tuint256 x = 0;\n\t\tunchecked { ..."
              - (inner:) FunctionDefinition: # 138..210 "\n\tfunction abc() {\n\t\tuint256 x = 0;\n\t\tunchecked { ..."
                  - FunctionKeyword: "function" # 140..148
                  - (inner:) FunctionName: # 148..152 " abc"
                      - Identifier: "abc" # 149..152
                  - (inner:) ParametersDeclaration: # 152..154 "()"
                      - OpenParen: "(" # 152..153
                      - CloseParen: ")" # 153..154
                  - (inner:) FunctionBody: # 154..210 " {\n\t\tuint256 x = 0;\n\t\tunchecked { invalid sequence..."
                      - (inner:) Block: # 154..210 " {\n\t\tuint256 x = 0;\n\t\tunchecked { invalid sequence..."
                          - OpenBrace: "{" # 155..156
                          - (inner:) Statements: # 157..174 "\t\tuint256 x = 0;\n"
                              - (inner:) Statement: # 157..174 "\t\tuint256 x = 0;\n"
                                  - (inner:) VariableDeclarationStatement: # 157..174 "\t\tuint256 x = 0;\n"
                                      - (inner:) VariableDeclarationType: # 157..166 "\t\tuint256"
                                          - (inner:) TypeName: # 157..166 "\t\tuint256"
                                              - (inner:) ElementaryType: # 157..166 "\t\tuint256"
                                                  - UintKeyword: "uint256" # 159..166
                                      - Identifier: "x" # 167..168
                                      - (inner:) VariableDeclarationValue: # 168..172 " = 0"
                                          - Equal: "=" # 169..170
                                          - (inner:) Expression: # 170..172 " 0"
                                              - (inner:) DecimalNumberExpression: # 170..172 " 0"
                                                  - DecimalLiteral: "0" # 171..172
                                      - Semicolon: ";" # 172..173
                          - SKIPPED: "unchecked { invalid sequence }\n\t" # 176..208
                          - CloseBrace: "}" # 208..209
      - CloseBrace: "}" # 210..211
