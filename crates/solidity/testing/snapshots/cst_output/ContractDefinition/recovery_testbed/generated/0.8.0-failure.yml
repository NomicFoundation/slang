# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

Source: >
  1  │ contract Contract {                                                              │ 0..19
  2  │ 	function _transfer(address while) private {                                     │ 20..64
  3  │ 		if(while == pair && !_isExcludedFromFee[to]){                                  │ 65..112
  4  │ 			uint256 a = 1;                                                                │ 113..130
  5  │ 		}                                                                              │ 131..134
  6  │ 	}                                                                               │ 135..137
  7  │                                                                                  │ 138..138
  8  │ 	function abc() {                                                                │ 139..156
  9  │ 		uint256 x = 0;                                                                 │ 157..173
  10 │ 		unchecked { invalid sequence }                                                 │ 174..206
  11 │ 	}                                                                               │ 207..209
  12 │ }                                                                                │ 210..211

Errors: # 3 total
  - >
    Error: Expected CloseParen or Comma.
       ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:2:29]
       │
     2 │     function _transfer(address while) private {
       │                                ──┬──  
       │                                  ╰──── Error occurred here.
    ───╯
  - >
    Error: Expected AddressKeyword or AsciiStringLiteral or BoolKeyword or BytesKeyword or DecimalLiteral or FalseKeyword or FixedKeyword or HexLiteral or HexStringLiteral or Identifier or IntKeyword or NewKeyword or OpenBracket or OpenParen or PayableKeyword or StringKeyword or TrueKeyword or TypeKeyword or UfixedKeyword or UintKeyword or UnicodeStringLiteral.
       ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:3:6]
       │
     3 │        if(while == pair && !_isExcludedFromFee[to]){
       │           ────────────────────┬───────────────────  
       │                               ╰───────────────────── Error occurred here.
    ───╯
  - >
    Error: Expected Equal or Semicolon.
        ╭─[crates/solidity/testing/snapshots/cst_output/ContractDefinition/recovery_testbed/input.sol:10:32]
        │
     10 │        unchecked { invalid sequence }
        │                                     │ 
        │                                     ╰─ Error occurred here.
    ────╯

Tree:
  - (TODO:) ContractDefinition: # 0..212 "contract Contract {\n\tfunction _transfer(address wh..."
      - (dummy:) ContractKeyword: "contract" # 0..8
      - (dummy:) Identifier: "Contract" # 9..17
      - (dummy:) OpenBrace: "{" # 18..19
      - (inner:) ContractMembers: # 20..210 "\tfunction _transfer(address while) private {\n\t\tif(..."
          - (inner:) ContractMember: # 20..138 "\tfunction _transfer(address while) private {\n\t\tif(..."
              - (inner:) FunctionDefinition: # 20..138 "\tfunction _transfer(address while) private {\n\t\tif(..."
                  - (dummy:) FunctionKeyword: "function" # 21..29
                  - (inner:) FunctionName: # 29..39 " _transfer"
                      - (dummy:) Identifier: "_transfer" # 30..39
                  - (inner:) ParametersDeclaration: # 39..54 "(address while)"
                      - (dummy:) OpenParen: "(" # 39..40
                      - (inner:) Parameters: # 40..47 "address"
                          - (inner:) Parameter: # 40..47 "address"
                              - (inner:) TypeName: # 40..47 "address"
                                  - (inner:) ElementaryType: # 40..47 "address"
                                      - (inner:) AddressType: # 40..47 "address"
                                          - (dummy:) AddressKeyword: "address" # 40..47
                      - (skipped:) SKIPPED: "while" # 48..53
                      - (dummy:) CloseParen: ")" # 53..54
                  - (inner:) FunctionAttributes: # 54..62 " private"
                      - (inner:) FunctionAttribute: # 54..62 " private"
                          - (dummy:) PrivateKeyword: "private" # 55..62
                  - (inner:) FunctionBody: # 62..138 " {\n\t\tif(while == pair && !_isExcludedFromFee[to]){..."
                      - (inner:) Block: # 62..138 " {\n\t\tif(while == pair && !_isExcludedFromFee[to]){..."
                          - (dummy:) OpenBrace: "{" # 63..64
                          - (inner:) Statements: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                              - (inner:) Statement: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                                  - (inner:) IfStatement: # 65..135 "\t\tif(while == pair && !_isExcludedFromFee[to]){\n\t\t..."
                                      - (dummy:) IfKeyword: "if" # 67..69
                                      - (dummy:) OpenParen: "(" # 69..70
                                      - (skipped:) SKIPPED: "while == pair && !_isExcludedFromFee[to]" # 70..110
                                      - (dummy:) CloseParen: ")" # 110..111
                                      - (inner:) Statement: # 111..135 "{\n\t\t\tuint256 a = 1;\n\t\t}\n"
                                          - (inner:) Block: # 111..135 "{\n\t\t\tuint256 a = 1;\n\t\t}\n"
                                              - (dummy:) OpenBrace: "{" # 111..112
                                              - (inner:) Statements: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                  - (inner:) Statement: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                      - (inner:) VariableDeclarationStatement: # 113..131 "\t\t\tuint256 a = 1;\n"
                                                          - (inner:) VariableDeclarationType: # 113..123 "\t\t\tuint256"
                                                              - (inner:) TypeName: # 113..123 "\t\t\tuint256"
                                                                  - (inner:) ElementaryType: # 113..123 "\t\t\tuint256"
                                                                      - (dummy:) UintKeyword: "uint256" # 116..123
                                                          - (dummy:) Identifier: "a" # 124..125
                                                          - (inner:) VariableDeclarationValue: # 125..129 " = 1"
                                                              - (dummy:) Equal: "=" # 126..127
                                                              - (inner:) Expression: # 127..129 " 1"
                                                                  - (inner:) DecimalNumberExpression: # 127..129 " 1"
                                                                      - (dummy:) DecimalLiteral: "1" # 128..129
                                                          - (dummy:) Semicolon: ";" # 129..130
                                              - (dummy:) CloseBrace: "}" # 133..134
                          - (dummy:) CloseBrace: "}" # 136..137
          - (inner:) ContractMember: # 138..210 "\n\tfunction abc() {\n\t\tuint256 x = 0;\n\t\tunchecked { ..."
              - (inner:) FunctionDefinition: # 138..210 "\n\tfunction abc() {\n\t\tuint256 x = 0;\n\t\tunchecked { ..."
                  - (dummy:) FunctionKeyword: "function" # 140..148
                  - (inner:) FunctionName: # 148..152 " abc"
                      - (dummy:) Identifier: "abc" # 149..152
                  - (inner:) ParametersDeclaration: # 152..154 "()"
                      - (dummy:) OpenParen: "(" # 152..153
                      - (dummy:) CloseParen: ")" # 153..154
                  - (inner:) FunctionBody: # 154..210 " {\n\t\tuint256 x = 0;\n\t\tunchecked { invalid sequence..."
                      - (inner:) Block: # 154..210 " {\n\t\tuint256 x = 0;\n\t\tunchecked { invalid sequence..."
                          - (dummy:) OpenBrace: "{" # 155..156
                          - (inner:) Statements: # 157..207 "\t\tuint256 x = 0;\n\t\tunchecked { invalid sequence }\n"
                              - (inner:) Statement: # 157..174 "\t\tuint256 x = 0;\n"
                                  - (inner:) VariableDeclarationStatement: # 157..174 "\t\tuint256 x = 0;\n"
                                      - (inner:) VariableDeclarationType: # 157..166 "\t\tuint256"
                                          - (inner:) TypeName: # 157..166 "\t\tuint256"
                                              - (inner:) ElementaryType: # 157..166 "\t\tuint256"
                                                  - (dummy:) UintKeyword: "uint256" # 159..166
                                      - (dummy:) Identifier: "x" # 167..168
                                      - (inner:) VariableDeclarationValue: # 168..172 " = 0"
                                          - (dummy:) Equal: "=" # 169..170
                                          - (inner:) Expression: # 170..172 " 0"
                                              - (inner:) DecimalNumberExpression: # 170..172 " 0"
                                                  - (dummy:) DecimalLiteral: "0" # 171..172
                                      - (dummy:) Semicolon: ";" # 172..173
                              - (inner:) Statement: # 174..207 "\t\tunchecked { invalid sequence }\n"
                                  - (inner:) UncheckedBlock: # 174..207 "\t\tunchecked { invalid sequence }\n"
                                      - (dummy:) UncheckedKeyword: "unchecked" # 176..185
                                      - (inner:) Block: # 185..207 " { invalid sequence }\n"
                                          - (dummy:) OpenBrace: "{" # 186..187
                                          - (inner:) Statements: # 187..205 " invalid sequence "
                                              - (inner:) Statement: # 187..205 " invalid sequence "
                                                  - (inner:) VariableDeclarationStatement: # 187..205 " invalid sequence "
                                                      - (inner:) VariableDeclarationType: # 187..195 " invalid"
                                                          - (inner:) TypeName: # 187..195 " invalid"
                                                              - (inner:) IdentifierPath: # 187..195 " invalid"
                                                                  - (dummy:) Identifier: "invalid" # 188..195
                                                      - (dummy:) Identifier: "sequence" # 196..204
                                          - (skipped:) SKIPPED: "" # 205..205
                                          - (dummy:) CloseBrace: "}" # 205..206
                          - (dummy:) CloseBrace: "}" # 208..209
      - (dummy:) CloseBrace: "}" # 210..211
