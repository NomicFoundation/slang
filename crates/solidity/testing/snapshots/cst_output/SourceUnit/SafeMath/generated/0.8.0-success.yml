# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

Source: >
  1  │ library SafeMath {                                                               │ 0..18
  2  │   function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {  │ 19..98
  3  │     unchecked {                                                                  │ 99..114
  4  │       uint256 c = a + b;                                                         │ 115..139
  5  │       if (c < a) return (false, 0);                                              │ 140..175
  6  │       return (true, c);                                                          │ 176..199
  7  │     }                                                                            │ 200..205
  8  │   }                                                                              │ 206..209
  9  │ }                                                                                │ 210..211

Errors: []

Tree:
  - SourceUnit (Rule): # 0..212 "library SafeMath {\n  function tryAdd(uint256 a, ui..."
      - SourceUnitMembers (Rule): # 0..212 "library SafeMath {\n  function tryAdd(uint256 a, ui..."
          - SourceUnitMember (Rule): # 0..212 "library SafeMath {\n  function tryAdd(uint256 a, ui..."
              - LibraryDefinition (Rule): # 0..212 "library SafeMath {\n  function tryAdd(uint256 a, ui..."
                  - LibraryKeyword (Token): "library" # 0..7
                  - Identifier (Token): "SafeMath" # 8..16
                  - OpenBrace (Token): "{" # 17..18
                  - LibraryMembers (Rule): # 19..210 "  function tryAdd(uint256 a, uint256 b) internal p..."
                      - ContractMember (Rule): # 19..210 "  function tryAdd(uint256 a, uint256 b) internal p..."
                          - FunctionDefinition (Rule): # 19..210 "  function tryAdd(uint256 a, uint256 b) internal p..."
                              - FunctionKeyword (Token): "function" # 21..29
                              - FunctionName (Rule): # 29..36 " tryAdd"
                                  - Identifier (Token): "tryAdd" # 30..36
                              - ParametersDeclaration (Rule): # 36..58 "(uint256 a, uint256 b)"
                                  - OpenParen (Token): "(" # 36..37
                                  - Parameters (Rule): # 37..57 "uint256 a, uint256 b"
                                      - Parameter (Rule): # 37..46 "uint256 a"
                                          - TypeName (Rule): # 37..44 "uint256"
                                              - ElementaryType (Rule): # 37..44 "uint256"
                                                  - UintKeyword (Token): "uint256" # 37..44
                                          - Identifier (Token): "a" # 45..46
                                      - Comma (Token): "," # 46..47
                                      - Parameter (Rule): # 47..57 " uint256 b"
                                          - TypeName (Rule): # 47..55 " uint256"
                                              - ElementaryType (Rule): # 47..55 " uint256"
                                                  - UintKeyword (Token): "uint256" # 48..55
                                          - Identifier (Token): "b" # 56..57
                                  - CloseParen (Token): ")" # 57..58
                              - FunctionAttributes (Rule): # 58..72 " internal pure"
                                  - FunctionAttribute (Rule): # 58..67 " internal"
                                      - InternalKeyword (Token): "internal" # 59..67
                                  - FunctionAttribute (Rule): # 67..72 " pure"
                                      - PureKeyword (Token): "pure" # 68..72
                              - ReturnsDeclaration (Rule): # 72..96 " returns (bool, uint256)"
                                  - ReturnsKeyword (Token): "returns" # 73..80
                                  - ParametersDeclaration (Rule): # 80..96 " (bool, uint256)"
                                      - OpenParen (Token): "(" # 81..82
                                      - Parameters (Rule): # 82..95 "bool, uint256"
                                          - Parameter (Rule): # 82..86 "bool"
                                              - TypeName (Rule): # 82..86 "bool"
                                                  - ElementaryType (Rule): # 82..86 "bool"
                                                      - BoolKeyword (Token): "bool" # 82..86
                                          - Comma (Token): "," # 86..87
                                          - Parameter (Rule): # 87..95 " uint256"
                                              - TypeName (Rule): # 87..95 " uint256"
                                                  - ElementaryType (Rule): # 87..95 " uint256"
                                                      - UintKeyword (Token): "uint256" # 88..95
                                      - CloseParen (Token): ")" # 95..96
                              - FunctionBody (Rule): # 96..210 " {\n    unchecked {\n      uint256 c = a + b;\n      ..."
                                  - Block (Rule): # 96..210 " {\n    unchecked {\n      uint256 c = a + b;\n      ..."
                                      - OpenBrace (Token): "{" # 97..98
                                      - Statements (Rule): # 99..206 "    unchecked {\n      uint256 c = a + b;\n      if ..."
                                          - Statement (Rule): # 99..206 "    unchecked {\n      uint256 c = a + b;\n      if ..."
                                              - UncheckedBlock (Rule): # 99..206 "    unchecked {\n      uint256 c = a + b;\n      if ..."
                                                  - UncheckedKeyword (Token): "unchecked" # 103..112
                                                  - Block (Rule): # 112..206 " {\n      uint256 c = a + b;\n      if (c < a) retur..."
                                                      - OpenBrace (Token): "{" # 113..114
                                                      - Statements (Rule): # 115..200 "      uint256 c = a + b;\n      if (c < a) return (..."
                                                          - Statement (Rule): # 115..140 "      uint256 c = a + b;\n"
                                                              - VariableDeclarationStatement (Rule): # 115..140 "      uint256 c = a + b;\n"
                                                                  - VariableDeclarationType (Rule): # 115..128 "      uint256"
                                                                      - TypeName (Rule): # 115..128 "      uint256"
                                                                          - ElementaryType (Rule): # 115..128 "      uint256"
                                                                              - UintKeyword (Token): "uint256" # 121..128
                                                                  - Identifier (Token): "c" # 129..130
                                                                  - VariableDeclarationValue (Rule): # 130..138 " = a + b"
                                                                      - Equal (Token): "=" # 131..132
                                                                      - Expression (Rule): # 132..138 " a + b"
                                                                          - AdditiveExpression (Rule): # 132..138 " a + b"
                                                                              - Expression (Rule): # 132..134 " a"
                                                                                  - Identifier (Token): "a" # 133..134
                                                                              - Plus (Token): "+" # 135..136
                                                                              - Expression (Rule): # 136..138 " b"
                                                                                  - Identifier (Token): "b" # 137..138
                                                                  - Semicolon (Token): ";" # 138..139
                                                          - Statement (Rule): # 140..176 "      if (c < a) return (false, 0);\n"
                                                              - IfStatement (Rule): # 140..176 "      if (c < a) return (false, 0);\n"
                                                                  - IfKeyword (Token): "if" # 146..148
                                                                  - OpenParen (Token): "(" # 149..150
                                                                  - Expression (Rule): # 150..155 "c < a"
                                                                      - ComparisonExpression (Rule): # 150..155 "c < a"
                                                                          - Expression (Rule): # 150..151 "c"
                                                                              - Identifier (Token): "c" # 150..151
                                                                          - LessThan (Token): "<" # 152..153
                                                                          - Expression (Rule): # 153..155 " a"
                                                                              - Identifier (Token): "a" # 154..155
                                                                  - CloseParen (Token): ")" # 155..156
                                                                  - Statement (Rule): # 156..176 " return (false, 0);\n"
                                                                      - ReturnStatement (Rule): # 156..176 " return (false, 0);\n"
                                                                          - ReturnKeyword (Token): "return" # 157..163
                                                                          - Expression (Rule): # 163..174 " (false, 0)"
                                                                              - TupleExpression (Rule): # 163..174 " (false, 0)"
                                                                                  - OpenParen (Token): "(" # 164..165
                                                                                  - TupleValues (Rule): # 165..173 "false, 0"
                                                                                      - TupleValue (Rule): # 165..170 "false"
                                                                                          - Expression (Rule): # 165..170 "false"
                                                                                              - FalseKeyword (Token): "false" # 165..170
                                                                                      - Comma (Token): "," # 170..171
                                                                                      - TupleValue (Rule): # 171..173 " 0"
                                                                                          - Expression (Rule): # 171..173 " 0"
                                                                                              - DecimalNumberExpression (Rule): # 171..173 " 0"
                                                                                                  - DecimalLiteral (Token): "0" # 172..173
                                                                                  - CloseParen (Token): ")" # 173..174
                                                                          - Semicolon (Token): ";" # 174..175
                                                          - Statement (Rule): # 176..200 "      return (true, c);\n"
                                                              - ReturnStatement (Rule): # 176..200 "      return (true, c);\n"
                                                                  - ReturnKeyword (Token): "return" # 182..188
                                                                  - Expression (Rule): # 188..198 " (true, c)"
                                                                      - TupleExpression (Rule): # 188..198 " (true, c)"
                                                                          - OpenParen (Token): "(" # 189..190
                                                                          - TupleValues (Rule): # 190..197 "true, c"
                                                                              - TupleValue (Rule): # 190..194 "true"
                                                                                  - Expression (Rule): # 190..194 "true"
                                                                                      - TrueKeyword (Token): "true" # 190..194
                                                                              - Comma (Token): "," # 194..195
                                                                              - TupleValue (Rule): # 195..197 " c"
                                                                                  - Expression (Rule): # 195..197 " c"
                                                                                      - Identifier (Token): "c" # 196..197
                                                                          - CloseParen (Token): ")" # 197..198
                                                                  - Semicolon (Token): ";" # 198..199
                                                      - CloseBrace (Token): "}" # 204..205
                                      - CloseBrace (Token): "}" # 208..209
                  - CloseBrace (Token): "}" # 210..211
