(* This file is generated automatically by infrastructure scripts. Please don't edit by hand. *)

(*
 * 1. File Structure:
 *)

(* 1.1. License Specifiers: *)

(* No items *)

(* 1.2. Source Unit: *)

SourceUnit = SourceUnitMembers?;

SourceUnitMembers = SourceUnitMember+;

SourceUnitMember = PragmaDirective
                 | ImportDirective
                 | ContractDefinition
                 | InterfaceDefinition
                 | LibraryDefinition
                 | StructDefinition (* Introduced in 0.6.0 *)
                 | EnumDefinition (* Introduced in 0.6.0 *)
                 | FunctionDefinition (* Introduced in 0.7.1 *)
                 | ConstantDefinition (* Introduced in 0.7.4 *)
                 | ErrorDefinition (* Introduced in 0.8.4 *)
                 | UserDefinedValueTypeDefinition (* Introduced in 0.8.8 *)
                 | UsingDirective (* Introduced in 0.8.13 *)
                 | EventDefinition; (* Introduced in 0.8.22 *)

(* 1.3. Pragma Directives: *)

PragmaDirective = PRAGMA_KEYWORD
                  Pragma
                  SEMICOLON;

Pragma = ABICoderPragma
       | ExperimentalPragma
       | VersionPragma;

ABICoderPragma = ABICODER_KEYWORD
                 IDENTIFIER;

ExperimentalPragma = EXPERIMENTAL_KEYWORD
                     ExperimentalFeature;

ExperimentalFeature = IDENTIFIER
                    | ASCII_STRING_LITERAL;

VersionPragma = SOLIDITY_KEYWORD
                VersionPragmaExpressions;

VersionPragmaExpressions = VersionPragmaExpression+;

VersionPragmaExpression = VersionPragmaOrExpression
                        | VersionPragmaRangeExpression
                        | VersionPragmaPrefixExpression
                        | VersionPragmaSpecifier;

VersionPragmaSpecifier = VERSION_PRAGMA_VALUE (PERIOD VERSION_PRAGMA_VALUE)*;

VERSION_PRAGMA_VALUE = (("0"â€¦"9") | "x" | "X" | "*")+;

SOLIDITY_KEYWORD = "solidity";

EXPERIMENTAL_KEYWORD = "experimental";

ABICODER_KEYWORD = "abicoder";

(* 1.4. Import Directives: *)

ImportDirective = IMPORT_KEYWORD
                  ImportClause
                  SEMICOLON;

ImportClause = PathImport
             | NamedImport
             | ImportDeconstruction;

PathImport = ASCII_STRING_LITERAL
             ImportAlias?;

NamedImport = ASTERISK
              ImportAlias
              FROM_KEYWORD
              ASCII_STRING_LITERAL;

ImportDeconstruction = OPEN_BRACE
                       ImportDeconstructionSymbols
                       CLOSE_BRACE
                       FROM_KEYWORD
                       ASCII_STRING_LITERAL;

ImportDeconstructionSymbols = ImportDeconstructionSymbol (COMMA ImportDeconstructionSymbol)*;

ImportDeconstructionSymbol = IDENTIFIER
                             ImportAlias?;

ImportAlias = AS_KEYWORD
              IDENTIFIER;

(* 1.5. Using Directives: *)

UsingDirective = USING_KEYWORD
                 UsingClause
                 FOR_KEYWORD
                 UsingTarget
                 GLOBAL_KEYWORD? (* Introduced in 0.8.13 *)
                 SEMICOLON;

UsingClause = IdentifierPath
            | UsingDeconstruction; (* Introduced in 0.8.13 *)

(* Introduced in 0.8.13 *)
UsingDeconstruction = OPEN_BRACE
                      UsingDeconstructionSymbols
                      CLOSE_BRACE;

(* Introduced in 0.8.13 *)
UsingDeconstructionSymbols = UsingDeconstructionSymbol (COMMA UsingDeconstructionSymbol)*;

(* Introduced in 0.8.13 *)
UsingDeconstructionSymbol = IdentifierPath
                            UsingAlias?; (* Introduced in 0.8.19 *)

(* Introduced in 0.8.19 *)
UsingAlias = AS_KEYWORD
             UsingOperator;

(* Introduced in 0.8.19 *)
UsingOperator = AMPERSAND
              | ASTERISK
              | BANG_EQUAL
              | BAR
              | CARET
              | EQUAL_EQUAL
              | GREATER_THAN
              | GREATER_THAN_EQUAL
              | LESS_THAN
              | LESS_THAN_EQUAL
              | MINUS
              | PERCENT
              | PLUS
              | SLASH
              | TILDE;

UsingTarget = TypeName
            | ASTERISK;

(* 1.6. Trivia: *)

WHITESPACE = (" " | "\t")+;

END_OF_LINE = "\r"? "\n";

SINGLE_LINE_COMMENT = "//" (!("\r" "\n"))*;

MULTI_LINE_COMMENT = "/*" (!"*" | "*")* "*/";

SINGLE_LINE_NAT_SPEC_COMMENT = "///" (!("\r" "\n"))*;

MULTI_LINE_NAT_SPEC_COMMENT = "/**" (!"*" | "*")* "*/";

(* 1.7. Nat Spec Format: *)

(* No items *)

(* 1.8. Keywords: *)

(* Introduced in 0.6.0 *)
ABSTRACT_KEYWORD = "abstract";

ADDRESS_KEYWORD = "address";

AFTER_KEYWORD = "after";

(* Reserved in 0.5.0 *)
ALIAS_KEYWORD = "alias";

ANONYMOUS_KEYWORD = "anonymous";

(* Reserved in 0.5.0 *)
APPLY_KEYWORD = "apply";

AS_KEYWORD = "as";

ASSEMBLY_KEYWORD = "assembly";

(* Reserved in 0.5.0 *)
AUTO_KEYWORD = "auto";

BOOL_KEYWORD = "bool";

BREAK_KEYWORD = "break";

(* Deprecated in 0.8.0 *)
BYTE_KEYWORD = "byte";

BYTES_KEYWORD = "bytes" ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32")?;

(* Introduced in 0.5.0 *)
(* Reserved in 0.5.0 *)
CALL_DATA_KEYWORD = "calldata";

CASE_KEYWORD = "case";

(* Introduced in 0.6.0 *)
CATCH_KEYWORD = "catch";

CONSTANT_KEYWORD = "constant";

(* Introduced in 0.4.22 *)
(* Reserved in 0.5.0 *)
CONSTRUCTOR_KEYWORD = "constructor";

CONTINUE_KEYWORD = "continue";

CONTRACT_KEYWORD = "contract";

(* Reserved in 0.5.0 *)
COPY_OF_KEYWORD = "copyof";

DAYS_KEYWORD = "days";

DEFAULT_KEYWORD = "default";

(* Reserved in 0.5.0 *)
DEFINE_KEYWORD = "define";

DELETE_KEYWORD = "delete";

DO_KEYWORD = "do";

ELSE_KEYWORD = "else";

(* Introduced in 0.4.21 *)
(* Reserved in 0.5.0 *)
EMIT_KEYWORD = "emit";

ENUM_KEYWORD = "enum";

(* Introduced in 0.8.4 *)
(* Never reserved *)
ERROR_KEYWORD = "error";

ETHER_KEYWORD = "ether";

EVENT_KEYWORD = "event";

EXTERNAL_KEYWORD = "external";

(* Reserved in 0.6.0 *)
FALLBACK_KEYWORD = "fallback";

FALSE_KEYWORD = "false";

FINAL_KEYWORD = "final";

(* Deprecated in 0.7.0 *)
(* Reserved until 0.7.0 *)
FINNEY_KEYWORD = "finney";

FIXED_KEYWORD = "fixed";

FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");

FIXED_KEYWORD = "fixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");

(* Reserved in 0.4.14 *)
FIXED_KEYWORD = "fixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");

(* Reserved in 0.4.14 *)
FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");

FOR_KEYWORD = "for";

(* Never reserved *)
FROM_KEYWORD = "from";

FUNCTION_KEYWORD = "function";

(* Introduced in 0.8.13 *)
(* Never reserved *)
GLOBAL_KEYWORD = "global";

(* Introduced in 0.6.11 *)
(* Reserved in 0.7.0 *)
GWEI_KEYWORD = "gwei";

HEX_KEYWORD = "hex";

HOURS_KEYWORD = "hours";

IF_KEYWORD = "if";

(* Introduced in 0.6.5 *)
(* Reserved in 0.5.0 *)
IMMUTABLE_KEYWORD = "immutable";

(* Reserved in 0.5.0 *)
IMPLEMENTS_KEYWORD = "implements";

IMPORT_KEYWORD = "import";

INDEXED_KEYWORD = "indexed";

IN_KEYWORD = "in";

INLINE_KEYWORD = "inline";

INTERFACE_KEYWORD = "interface";

INTERNAL_KEYWORD = "internal";

INT_KEYWORD = "int" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;

IS_KEYWORD = "is";

LET_KEYWORD = "let";

LIBRARY_KEYWORD = "library";

(* Reserved in 0.5.0 *)
MACRO_KEYWORD = "macro";

MAPPING_KEYWORD = "mapping";

MATCH_KEYWORD = "match";

MEMORY_KEYWORD = "memory";

MINUTES_KEYWORD = "minutes";

MODIFIER_KEYWORD = "modifier";

(* Reserved in 0.5.0 *)
MUTABLE_KEYWORD = "mutable";

NEW_KEYWORD = "new";

NULL_KEYWORD = "null";

OF_KEYWORD = "of";

(* Reserved in 0.5.0 *)
OVERRIDE_KEYWORD = "override";

(* Reserved in 0.5.0 *)
PARTIAL_KEYWORD = "partial";

PAYABLE_KEYWORD = "payable";

PRAGMA_KEYWORD = "pragma";

PRIVATE_KEYWORD = "private";

(* Reserved in 0.5.0 *)
PROMISE_KEYWORD = "promise";

PUBLIC_KEYWORD = "public";

PURE_KEYWORD = "pure";

(* Reserved in 0.6.0 *)
RECEIVE_KEYWORD = "receive";

(* Reserved in 0.5.0 *)
REFERENCE_KEYWORD = "reference";

RELOCATABLE_KEYWORD = "relocatable";

RETURN_KEYWORD = "return";

RETURNS_KEYWORD = "returns";

(* Introduced in 0.8.4 *)
(* Never reserved *)
REVERT_KEYWORD = "revert";

(* Reserved in 0.5.0 *)
SEALED_KEYWORD = "sealed";

SECONDS_KEYWORD = "seconds";

(* Reserved in 0.5.0 *)
SIZE_OF_KEYWORD = "sizeof";

STATIC_KEYWORD = "static";

STORAGE_KEYWORD = "storage";

STRING_KEYWORD = "string";

STRUCT_KEYWORD = "struct";

(* Reserved in 0.5.0 *)
SUPPORTS_KEYWORD = "supports";

SWITCH_KEYWORD = "switch";

(* Deprecated in 0.7.0 *)
(* Reserved until 0.7.0 *)
SZABO_KEYWORD = "szabo";

(* Deprecated in 0.5.0 *)
THROW_KEYWORD = "throw";

TRUE_KEYWORD = "true";

(* Introduced in 0.6.0 *)
TRY_KEYWORD = "try";

(* Reserved in 0.5.0 *)
TYPE_DEF_KEYWORD = "typedef";

(* Introduced in 0.5.3 *)
TYPE_KEYWORD = "type";

TYPE_OF_KEYWORD = "typeof";

UFIXED_KEYWORD = "ufixed";

UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");

UFIXED_KEYWORD = "ufixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");

(* Reserved in 0.4.14 *)
UFIXED_KEYWORD = "ufixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");

(* Reserved in 0.4.14 *)
UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");

UINT_KEYWORD = "uint" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;

(* Introduced in 0.8.0 *)
(* Reserved in 0.5.0 *)
UNCHECKED_KEYWORD = "unchecked";

USING_KEYWORD = "using";

(* Deprecated in 0.5.0 *)
VAR_KEYWORD = "var";

VIEW_KEYWORD = "view";

(* Introduced in 0.6.0 *)
(* Reserved in 0.6.0 *)
VIRTUAL_KEYWORD = "virtual";

WEEKS_KEYWORD = "weeks";

WEI_KEYWORD = "wei";

WHILE_KEYWORD = "while";

(* Deprecated in 0.5.0 *)
YEARS_KEYWORD = "years";

(* 1.9. Punctuation: *)

OPEN_PAREN = "(";

CLOSE_PAREN = ")";

OPEN_BRACKET = "[";

CLOSE_BRACKET = "]";

OPEN_BRACE = "{";

CLOSE_BRACE = "}";

COMMA = ",";

PERIOD = ".";

QUESTION_MARK = "?";

SEMICOLON = ";";

COLON = ":";

COLON_EQUAL = ":=";

EQUAL = "=";

EQUAL_EQUAL = "==";

EQUAL_GREATER_THAN = "=>";

ASTERISK = "*";

ASTERISK_EQUAL = "*=";

ASTERISK_ASTERISK = "**";

BAR = "|";

BAR_EQUAL = "|=";

BAR_BAR = "||";

AMPERSAND = "&";

AMPERSAND_EQUAL = "&=";

AMPERSAND_AMPERSAND = "&&";

LESS_THAN = "<";

LESS_THAN_EQUAL = "<=";

LESS_THAN_LESS_THAN = "<<";

LESS_THAN_LESS_THAN_EQUAL = "<<=";

GREATER_THAN = ">";

GREATER_THAN_EQUAL = ">=";

GREATER_THAN_GREATER_THAN = ">>";

GREATER_THAN_GREATER_THAN_EQUAL = ">>=";

GREATER_THAN_GREATER_THAN_GREATER_THAN = ">>>";

GREATER_THAN_GREATER_THAN_GREATER_THAN_EQUAL = ">>>=";

PLUS = "+";

PLUS_EQUAL = "+=";

PLUS_PLUS = "++";

MINUS = "-";

MINUS_EQUAL = "-=";

MINUS_MINUS = "--";

MINUS_GREATER_THAN = "->";

SLASH = "/";

SLASH_EQUAL = "/=";

PERCENT = "%";

PERCENT_EQUAL = "%=";

BANG = "!";

BANG_EQUAL = "!=";

CARET = "^";

CARET_EQUAL = "^=";

TILDE = "~";

(*
 * 2. Definitions:
 *)

(* 2.1. Contracts: *)

ContractDefinition = ABSTRACT_KEYWORD? (* Introduced in 0.6.0 *)
                     CONTRACT_KEYWORD
                     IDENTIFIER
                     InheritanceSpecifier?
                     OPEN_BRACE
                     ContractMembers?
                     CLOSE_BRACE;

InheritanceSpecifier = IS_KEYWORD
                       InheritanceTypes;

InheritanceTypes = InheritanceType (COMMA InheritanceType)*;

InheritanceType = IdentifierPath
                  ArgumentsDeclaration?;

ContractMembers = ContractMember+;

ContractMember = UsingDirective
               | FunctionDefinition
               | ConstructorDefinition (* Introduced in 0.4.22 *)
               | ReceiveFunctionDefinition (* Introduced in 0.6.0 *)
               | FallbackFunctionDefinition (* Introduced in 0.6.0 *)
               | UnnamedFunctionDefinition (* Deprecated in 0.6.0 *)
               | ModifierDefinition
               | StructDefinition
               | EnumDefinition
               | EventDefinition
               | StateVariableDefinition
               | ErrorDefinition (* Introduced in 0.8.4 *)
               | UserDefinedValueTypeDefinition; (* Introduced in 0.8.8 *)

(* 2.2. Interfaces: *)

InterfaceDefinition = INTERFACE_KEYWORD
                      IDENTIFIER
                      InheritanceSpecifier?
                      OPEN_BRACE
                      InterfaceMembers?
                      CLOSE_BRACE;

InterfaceMembers = ContractMember+;

(* 2.3. Libraries: *)

LibraryDefinition = LIBRARY_KEYWORD
                    IDENTIFIER
                    OPEN_BRACE
                    LibraryMembers?
                    CLOSE_BRACE;

LibraryMembers = ContractMember+;

(* 2.4. Structs: *)

StructDefinition = STRUCT_KEYWORD
                   IDENTIFIER
                   OPEN_BRACE
                   StructMembers?
                   CLOSE_BRACE;

StructMembers = StructMember+;

StructMember = TypeName
               IDENTIFIER
               SEMICOLON;

(* 2.5. Enums: *)

EnumDefinition = ENUM_KEYWORD
                 IDENTIFIER
                 OPEN_BRACE
                 EnumMembers?
                 CLOSE_BRACE;

EnumMembers = IDENTIFIER (COMMA IDENTIFIER)*;

(* 2.6. Constants: *)

(* Introduced in 0.7.4 *)
ConstantDefinition = TypeName
                     CONSTANT_KEYWORD
                     IDENTIFIER
                     EQUAL
                     Expression
                     SEMICOLON;

(* 2.7. State Variables: *)

StateVariableDefinition = TypeName
                          StateVariableAttributes?
                          IDENTIFIER
                          StateVariableDefinitionValue?
                          SEMICOLON;

StateVariableDefinitionValue = EQUAL
                               Expression;

StateVariableAttributes = StateVariableAttribute+;

StateVariableAttribute = OverrideSpecifier
                       | CONSTANT_KEYWORD
                       | INTERNAL_KEYWORD
                       | PRIVATE_KEYWORD
                       | PUBLIC_KEYWORD
                       | IMMUTABLE_KEYWORD; (* Introduced in 0.6.5 *)

(* 2.8. Functions: *)

FunctionDefinition = FUNCTION_KEYWORD
                     FunctionName
                     ParametersDeclaration
                     FunctionAttributes?
                     ReturnsDeclaration?
                     FunctionBody;

FunctionName = IDENTIFIER
             | FALLBACK_KEYWORD
             | RECEIVE_KEYWORD;

ParametersDeclaration = OPEN_PAREN
                        Parameters?
                        CLOSE_PAREN;

Parameters = Parameter (COMMA Parameter)*;

Parameter = TypeName
            StorageLocation?
            IDENTIFIER?;

FunctionAttributes = FunctionAttribute+;

FunctionAttribute = ModifierInvocation
                  | OverrideSpecifier
                  | CONSTANT_KEYWORD (* Deprecated in 0.5.0 *)
                  | EXTERNAL_KEYWORD
                  | INTERNAL_KEYWORD
                  | PAYABLE_KEYWORD
                  | PRIVATE_KEYWORD
                  | PUBLIC_KEYWORD
                  | PURE_KEYWORD
                  | VIEW_KEYWORD
                  | VIRTUAL_KEYWORD; (* Introduced in 0.6.0 *)

OverrideSpecifier = OVERRIDE_KEYWORD
                    OverridePathsDeclaration?;

OverridePathsDeclaration = OPEN_PAREN
                           OverridePaths
                           CLOSE_PAREN;

OverridePaths = IdentifierPath (COMMA IdentifierPath)*;

ReturnsDeclaration = RETURNS_KEYWORD
                     ParametersDeclaration;

FunctionBody = Block
             | SEMICOLON;

(* Introduced in 0.4.22 *)
ConstructorDefinition = CONSTRUCTOR_KEYWORD
                        ParametersDeclaration
                        ConstructorAttributes?
                        Block;

(* Introduced in 0.4.22 *)
ConstructorAttributes = ConstructorAttribute+;

(* Introduced in 0.4.22 *)
ConstructorAttribute = ModifierInvocation
                     | INTERNAL_KEYWORD
                     | PAYABLE_KEYWORD
                     | PUBLIC_KEYWORD;

(* Deprecated in 0.6.0 *)
UnnamedFunctionDefinition = FUNCTION_KEYWORD
                            ParametersDeclaration
                            UnnamedFunctionAttributes?
                            FunctionBody;

(* Deprecated in 0.6.0 *)
UnnamedFunctionAttributes = UnnamedFunctionAttribute+;

(* Deprecated in 0.6.0 *)
UnnamedFunctionAttribute = ModifierInvocation
                         | OverrideSpecifier
                         | EXTERNAL_KEYWORD
                         | PAYABLE_KEYWORD
                         | PURE_KEYWORD
                         | VIEW_KEYWORD;

(* Introduced in 0.6.0 *)
FallbackFunctionDefinition = FALLBACK_KEYWORD
                             ParametersDeclaration
                             FallbackFunctionAttributes?
                             ReturnsDeclaration?
                             FunctionBody;

(* Introduced in 0.6.0 *)
FallbackFunctionAttributes = FallbackFunctionAttribute+;

(* Introduced in 0.6.0 *)
FallbackFunctionAttribute = ModifierInvocation
                          | OverrideSpecifier
                          | EXTERNAL_KEYWORD
                          | PAYABLE_KEYWORD
                          | PURE_KEYWORD
                          | VIEW_KEYWORD
                          | VIRTUAL_KEYWORD;

(* Introduced in 0.6.0 *)
ReceiveFunctionDefinition = RECEIVE_KEYWORD
                            ParametersDeclaration
                            ReceiveFunctionAttributes?
                            FunctionBody;

(* Introduced in 0.6.0 *)
ReceiveFunctionAttributes = ReceiveFunctionAttribute+;

(* Introduced in 0.6.0 *)
ReceiveFunctionAttribute = ModifierInvocation
                         | OverrideSpecifier
                         | EXTERNAL_KEYWORD
                         | PAYABLE_KEYWORD
                         | VIRTUAL_KEYWORD;

(* 2.9. Modifiers: *)

ModifierDefinition = MODIFIER_KEYWORD
                     IDENTIFIER
                     ParametersDeclaration?
                     ModifierAttributes?
                     FunctionBody;

ModifierAttributes = ModifierAttribute+;

ModifierAttribute = OverrideSpecifier
                  | VIRTUAL_KEYWORD; (* Introduced in 0.6.0 *)

ModifierInvocation = IdentifierPath
                     ArgumentsDeclaration?;

(* 2.10. Events: *)

EventDefinition = EVENT_KEYWORD
                  IDENTIFIER
                  EventParametersDeclaration
                  ANONYMOUS_KEYWORD?
                  SEMICOLON;

EventParametersDeclaration = OPEN_PAREN
                             EventParameters?
                             CLOSE_PAREN;

EventParameters = EventParameter (COMMA EventParameter)*;

EventParameter = TypeName
                 INDEXED_KEYWORD?
                 IDENTIFIER?;

(* 2.11. User Defined Value Types: *)

(* Introduced in 0.8.8 *)
UserDefinedValueTypeDefinition = TYPE_KEYWORD
                                 IDENTIFIER
                                 IS_KEYWORD
                                 ElementaryType
                                 SEMICOLON;

(* 2.12. Errors: *)

(* Introduced in 0.8.4 *)
ErrorDefinition = ERROR_KEYWORD
                  IDENTIFIER
                  ErrorParametersDeclaration
                  SEMICOLON;

(* Introduced in 0.8.4 *)
ErrorParametersDeclaration = OPEN_PAREN
                             ErrorParameters?
                             CLOSE_PAREN;

(* Introduced in 0.8.4 *)
ErrorParameters = ErrorParameter (COMMA ErrorParameter)*;

(* Introduced in 0.8.4 *)
ErrorParameter = TypeName
                 IDENTIFIER?;

(*
 * 3. Types:
 *)

(* 3.1. Advanced Types: *)

TypeName = ArrayTypeName
         | FunctionType
         | MappingType
         | ElementaryType
         | IdentifierPath;

FunctionType = FUNCTION_KEYWORD
               ParametersDeclaration
               FunctionTypeAttributes?
               ReturnsDeclaration?;

FunctionTypeAttributes = FunctionTypeAttribute+;

FunctionTypeAttribute = INTERNAL_KEYWORD
                      | EXTERNAL_KEYWORD
                      | PRIVATE_KEYWORD
                      | PUBLIC_KEYWORD
                      | PURE_KEYWORD
                      | VIEW_KEYWORD
                      | PAYABLE_KEYWORD;

MappingType = MAPPING_KEYWORD
              OPEN_PAREN
              MappingKey
              EQUAL_GREATER_THAN
              MappingValue
              CLOSE_PAREN;

MappingKey = MappingKeyType
             IDENTIFIER?; (* Introduced in 0.8.18 *)

MappingKeyType = ElementaryType
               | IdentifierPath;

MappingValue = TypeName
               IDENTIFIER?; (* Introduced in 0.8.18 *)

(* 3.2. Elementary Types: *)

ElementaryType = BOOL_KEYWORD
               | BYTE_KEYWORD (* Deprecated in 0.8.0 *)
               | STRING_KEYWORD
               | AddressType
               | PAYABLE_KEYWORD
               | BYTES_KEYWORD
               | INT_KEYWORD
               | UINT_KEYWORD
               | FIXED_KEYWORD
               | UFIXED_KEYWORD;

AddressType = ADDRESS_KEYWORD
              PAYABLE_KEYWORD?;

(*
 * 4. Statements:
 *)

(* 4.1. Blocks: *)

Block = OPEN_BRACE
        Statements?
        CLOSE_BRACE;

Statements = Statement+;

Statement = ExpressionStatement
          | VariableDeclarationStatement
          | TupleDeconstructionStatement
          | IfStatement
          | ForStatement
          | WhileStatement
          | DoWhileStatement
          | ContinueStatement
          | BreakStatement
          | DeleteStatement
          | ReturnStatement
          | ThrowStatement (* Deprecated in 0.5.0 *)
          | EmitStatement (* Introduced in 0.4.21 *)
          | TryStatement (* Introduced in 0.6.0 *)
          | RevertStatement (* Introduced in 0.8.4 *)
          | AssemblyStatement
          | Block
          | UncheckedBlock; (* Introduced in 0.8.0 *)

(* Introduced in 0.8.0 *)
UncheckedBlock = UNCHECKED_KEYWORD
                 Block;

ExpressionStatement = Expression
                      SEMICOLON;

AssemblyStatement = ASSEMBLY_KEYWORD
                    ASCII_STRING_LITERAL?
                    AssemblyFlagsDeclaration?
                    YulBlock;

AssemblyFlagsDeclaration = OPEN_PAREN
                           AssemblyFlags
                           CLOSE_PAREN;

AssemblyFlags = ASCII_STRING_LITERAL (COMMA ASCII_STRING_LITERAL)*;

(* 4.2. Declaration Statements: *)

TupleDeconstructionStatement = OPEN_PAREN
                               TupleDeconstructionElements
                               CLOSE_PAREN
                               EQUAL
                               Expression
                               SEMICOLON;

TupleDeconstructionElements = TupleDeconstructionElement (COMMA TupleDeconstructionElement)*;

TupleDeconstructionElement = TupleMember?;

TupleMember = TypedTupleMember
            | UntypedTupleMember;

TypedTupleMember = TypeName
                   StorageLocation?
                   IDENTIFIER;

UntypedTupleMember = StorageLocation?
                     IDENTIFIER;

VariableDeclarationStatement = VariableDeclarationType
                               StorageLocation?
                               IDENTIFIER
                               VariableDeclarationValue?
                               SEMICOLON;

VariableDeclarationType = TypeName
                        | VAR_KEYWORD; (* Deprecated in 0.5.0 *)

VariableDeclarationValue = EQUAL
                           Expression;

StorageLocation = MEMORY_KEYWORD
                | STORAGE_KEYWORD
                | CALL_DATA_KEYWORD; (* Introduced in 0.5.0 *)

(* 4.3. Control Statements: *)

IfStatement = IF_KEYWORD
              OPEN_PAREN
              Expression
              CLOSE_PAREN
              Statement
              ElseBranch?;

ElseBranch = ELSE_KEYWORD
             Statement;

ForStatement = FOR_KEYWORD
               OPEN_PAREN
               ForStatementInitialization
               ForStatementCondition
               Expression?
               CLOSE_PAREN
               Statement;

ForStatementInitialization = ExpressionStatement
                           | VariableDeclarationStatement
                           | TupleDeconstructionStatement
                           | SEMICOLON;

ForStatementCondition = ExpressionStatement
                      | SEMICOLON;

WhileStatement = WHILE_KEYWORD
                 OPEN_PAREN
                 Expression
                 CLOSE_PAREN
                 Statement;

DoWhileStatement = DO_KEYWORD
                   Statement
                   WHILE_KEYWORD
                   OPEN_PAREN
                   Expression
                   CLOSE_PAREN
                   SEMICOLON;

ContinueStatement = CONTINUE_KEYWORD
                    SEMICOLON;

BreakStatement = BREAK_KEYWORD
                 SEMICOLON;

ReturnStatement = RETURN_KEYWORD
                  Expression?
                  SEMICOLON;

(* Introduced in 0.4.21 *)
EmitStatement = EMIT_KEYWORD
                IdentifierPath
                ArgumentsDeclaration
                SEMICOLON;

DeleteStatement = DELETE_KEYWORD
                  Expression
                  SEMICOLON;

(* 4.4. Error Handling: *)

(* Introduced in 0.6.0 *)
TryStatement = TRY_KEYWORD
               Expression
               ReturnsDeclaration?
               Block
               CatchClauses;

(* Introduced in 0.6.0 *)
CatchClauses = CatchClause+;

(* Introduced in 0.6.0 *)
CatchClause = CATCH_KEYWORD
              CatchClauseError?
              Block;

(* Introduced in 0.6.0 *)
CatchClauseError = IDENTIFIER?
                   ParametersDeclaration;

(* Introduced in 0.8.4 *)
RevertStatement = REVERT_KEYWORD
                  IdentifierPath?
                  ArgumentsDeclaration
                  SEMICOLON;

(* Deprecated in 0.5.0 *)
ThrowStatement = THROW_KEYWORD
                 SEMICOLON;

(*
 * 5. Expressions:
 *)

(* 5.1. Base Expressions: *)

Expression = AssignmentExpression
           | ConditionalExpression
           | OrExpression
           | AndExpression
           | EqualityExpression
           | ComparisonExpression
           | BitwiseOrExpression
           | BitwiseXorExpression
           | BitwiseAndExpression
           | ShiftExpression
           | AdditiveExpression
           | MultiplicativeExpression
           | ExponentiationExpression
           | PostfixExpression
           | PrefixExpression
           | FunctionCallExpression
           | MemberAccessExpression
           | IndexAccessExpression
           | NewExpression
           | TupleExpression
           | TypeExpression (* Introduced in 0.5.3 *)
           | ArrayExpression
           | HexNumberExpression
           | DecimalNumberExpression
           | StringExpression
           | ElementaryType
           | TRUE_KEYWORD
           | FALSE_KEYWORD
           | IDENTIFIER;

MemberAccess = IDENTIFIER
             | ADDRESS_KEYWORD;

IndexAccessEnd = COLON
                 Expression?;

(* 5.2. Function Calls: *)

(* Introduced in 0.6.2 *)
FunctionCallOptions = NamedArgumentGroups (* Introduced in 0.6.2 and deprecated in 0.8.0. *)
                    | NamedArgumentGroup; (* Introduced in 0.8.0 *)

ArgumentsDeclaration = PositionalArgumentsDeclaration
                     | NamedArgumentsDeclaration;

PositionalArgumentsDeclaration = OPEN_PAREN
                                 PositionalArguments?
                                 CLOSE_PAREN;

PositionalArguments = Expression (COMMA Expression)*;

NamedArgumentsDeclaration = OPEN_PAREN
                            NamedArgumentGroup?
                            CLOSE_PAREN;

(* Introduced in 0.6.2 and deprecated in 0.8.0. *)
NamedArgumentGroups = NamedArgumentGroup+;

NamedArgumentGroup = OPEN_BRACE
                     NamedArguments?
                     CLOSE_BRACE;

NamedArguments = NamedArgument (COMMA NamedArgument)*;

NamedArgument = IDENTIFIER
                COLON
                Expression;

(* 5.3. Primary Expressions: *)

(* Introduced in 0.5.3 *)
TypeExpression = TYPE_KEYWORD
                 OPEN_PAREN
                 TypeName
                 CLOSE_PAREN;

NewExpression = NEW_KEYWORD
                TypeName;

TupleExpression = OPEN_PAREN
                  TupleValues
                  CLOSE_PAREN;

TupleValues = TupleValue (COMMA TupleValue)*;

TupleValue = Expression?;

ArrayExpression = OPEN_BRACKET
                  ArrayValues
                  CLOSE_BRACKET;

ArrayValues = Expression (COMMA Expression)*;

(* 5.4. Numbers: *)

HexNumberExpression = HEX_LITERAL
                      NumberUnit?; (* Deprecated in 0.5.0 *)

DecimalNumberExpression = DECIMAL_LITERAL
                          NumberUnit?;

HEX_LITERAL = "0x" Â«HEX_CHARACTERÂ»+ ("_" Â«HEX_CHARACTERÂ»+)*;

(* Deprecated in 0.5.0 *)
HEX_LITERAL = "0X" Â«HEX_CHARACTERÂ»+ ("_" Â«HEX_CHARACTERÂ»+)*;

DECIMAL_LITERAL = Â«DECIMAL_DIGITSÂ» Â«DECIMAL_EXPONENTÂ»?;

(* Deprecated in 0.5.0 *)
DECIMAL_LITERAL = Â«DECIMAL_DIGITSÂ» "." Â«DECIMAL_EXPONENTÂ»?;

DECIMAL_LITERAL = "." Â«DECIMAL_DIGITSÂ» Â«DECIMAL_EXPONENTÂ»?;

DECIMAL_LITERAL = Â«DECIMAL_DIGITSÂ» "." Â«DECIMAL_DIGITSÂ» Â«DECIMAL_EXPONENTÂ»?;

Â«DECIMAL_DIGITSÂ» = ("0"â€¦"9")+ ("_" ("0"â€¦"9")+)*;

Â«DECIMAL_EXPONENTÂ» = ("e" | "E") "-"? Â«DECIMAL_DIGITSÂ»;

NumberUnit = WEI_KEYWORD
           | GWEI_KEYWORD (* Introduced in 0.6.11 *)
           | SZABO_KEYWORD (* Deprecated in 0.7.0 *)
           | FINNEY_KEYWORD (* Deprecated in 0.7.0 *)
           | ETHER_KEYWORD
           | SECONDS_KEYWORD
           | MINUTES_KEYWORD
           | HOURS_KEYWORD
           | DAYS_KEYWORD
           | WEEKS_KEYWORD
           | YEARS_KEYWORD; (* Deprecated in 0.5.0 *)

(* 5.5. Strings: *)

StringExpression = HexStringLiterals
                 | AsciiStringLiterals
                 | UnicodeStringLiterals; (* Introduced in 0.7.0 *)

HexStringLiterals = HEX_STRING_LITERAL+;

HEX_STRING_LITERAL = Â«SINGLE_QUOTED_HEX_STRING_LITERALÂ»;

HEX_STRING_LITERAL = Â«DOUBLE_QUOTED_HEX_STRING_LITERALÂ»;

Â«SINGLE_QUOTED_HEX_STRING_LITERALÂ» = "hex'" Â«HEX_STRING_CONTENTSÂ»? "'";

Â«DOUBLE_QUOTED_HEX_STRING_LITERALÂ» = 'hex"' Â«HEX_STRING_CONTENTSÂ»? '"';

Â«HEX_STRING_CONTENTSÂ» = Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ» ("_"? Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ»)*;

Â«HEX_CHARACTERÂ» = ("0"â€¦"9") | ("a"â€¦"f") | ("A"â€¦"F");

AsciiStringLiterals = ASCII_STRING_LITERAL+;

ASCII_STRING_LITERAL = Â«SINGLE_QUOTED_ASCII_STRING_LITERALÂ»;

ASCII_STRING_LITERAL = Â«DOUBLE_QUOTED_ASCII_STRING_LITERALÂ»;

Â«SINGLE_QUOTED_ASCII_STRING_LITERALÂ» = "'" (Â«ESCAPE_SEQUENCEÂ» | (" "â€¦"&") | ("("â€¦"[") | ("]"â€¦"~"))* "'";

Â«DOUBLE_QUOTED_ASCII_STRING_LITERALÂ» = '"' (Â«ESCAPE_SEQUENCEÂ» | (" "â€¦"!") | ("#"â€¦"[") | ("]"â€¦"~"))* '"';

(* Introduced in 0.7.0 *)
UnicodeStringLiterals = UNICODE_STRING_LITERAL+;

(* Introduced in 0.7.0 *)
UNICODE_STRING_LITERAL = Â«SINGLE_QUOTED_UNICODE_STRING_LITERALÂ»;

(* Introduced in 0.7.0 *)
UNICODE_STRING_LITERAL = Â«DOUBLE_QUOTED_UNICODE_STRING_LITERALÂ»;

(* Introduced in 0.7.0 *)
Â«SINGLE_QUOTED_UNICODE_STRING_LITERALÂ» = "unicode'" (Â«ESCAPE_SEQUENCEÂ» | !("'" "\\" "\r" "\n"))* "'";

(* Introduced in 0.7.0 *)
Â«DOUBLE_QUOTED_UNICODE_STRING_LITERALÂ» = 'unicode"' (Â«ESCAPE_SEQUENCEÂ» | !('"' "\\" "\r" "\n"))* '"';

Â«ESCAPE_SEQUENCEÂ» = "\\" (Â«ASCII_ESCAPEÂ» | Â«HEX_BYTE_ESCAPEÂ» | Â«UNICODE_ESCAPEÂ»);

Â«ASCII_ESCAPEÂ» = "n" | "r" | "t" | "'" | '"' | "\\" | "\n" | "\r";

Â«HEX_BYTE_ESCAPEÂ» = "x" Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ»;

Â«UNICODE_ESCAPEÂ» = "u" Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ» Â«HEX_CHARACTERÂ»;

(* 5.6. Identifiers: *)

IdentifierPath = IDENTIFIER (PERIOD IDENTIFIER)*;

IDENTIFIER = Â«RAW_IDENTIFIERÂ»;

Â«RAW_IDENTIFIERÂ» = Â«IDENTIFIER_STARTÂ» Â«IDENTIFIER_PARTÂ»*;

Â«IDENTIFIER_STARTÂ» = "_" | "$" | ("a"â€¦"z") | ("A"â€¦"Z");

Â«IDENTIFIER_PARTÂ» = Â«IDENTIFIER_STARTÂ» | ("0"â€¦"9");

(*
 * 6. Yul:
 *)

(* 6.1. Yul Statements: *)

YulBlock = OPEN_BRACE
           YulStatements?
           CLOSE_BRACE;

YulStatements = YulStatement+;

YulStatement = YulBlock
             | YulFunctionDefinition
             | YulVariableDeclarationStatement
             | YulAssignmentStatement
             | YulIfStatement
             | YulForStatement
             | YulSwitchStatement
             | YulLeaveStatement (* Introduced in 0.6.0 *)
             | YulBreakStatement
             | YulContinueStatement
             | YulExpression;

YulFunctionDefinition = YUL_FUNCTION_KEYWORD
                        YUL_IDENTIFIER
                        YulParametersDeclaration
                        YulReturnsDeclaration?
                        YulBlock;

YulParametersDeclaration = OPEN_PAREN
                           YulParameters?
                           CLOSE_PAREN;

YulParameters = YUL_IDENTIFIER (COMMA YUL_IDENTIFIER)*;

YulReturnsDeclaration = MINUS_GREATER_THAN
                        YulReturnVariables;

YulReturnVariables = YUL_IDENTIFIER (COMMA YUL_IDENTIFIER)*;

YulVariableDeclarationStatement = YUL_LET_KEYWORD
                                  YulIdentifierPaths
                                  YulVariableDeclarationValue?;

YulVariableDeclarationValue = COLON_EQUAL
                              YulExpression;

YulAssignmentStatement = YulIdentifierPaths
                         COLON_EQUAL
                         YulExpression;

YulIfStatement = YUL_IF_KEYWORD
                 YulExpression
                 YulBlock;

(* Introduced in 0.6.0 *)
YulLeaveStatement = YUL_LEAVE_KEYWORD;

YulBreakStatement = YUL_BREAK_KEYWORD;

YulContinueStatement = YUL_CONTINUE_KEYWORD;

YulForStatement = YUL_FOR_KEYWORD
                  YulBlock
                  YulExpression
                  YulBlock
                  YulBlock;

YulSwitchStatement = YUL_SWITCH_KEYWORD
                     YulExpression
                     YulSwitchCases;

YulSwitchCases = YulSwitchCase+;

YulSwitchCase = YulDefaultCase
              | YulValueCase;

YulDefaultCase = YUL_DEFAULT_KEYWORD
                 YulBlock;

YulValueCase = YUL_CASE_KEYWORD
               YulLiteral
               YulBlock;

(* 6.2. Yul Expressions: *)

YulExpression = YulFunctionCallExpression
              | YulLiteral
              | YulBuiltInFunction
              | YulIdentifierPath;

YulArguments = YulExpression (COMMA YulExpression)*;

YulIdentifierPaths = YulIdentifierPath (COMMA YulIdentifierPath)*;

YulIdentifierPath = YUL_IDENTIFIER (PERIOD YUL_IDENTIFIER)*;

YUL_IDENTIFIER = Â«RAW_IDENTIFIERÂ»;

YulBuiltInFunction = YUL_ADD_KEYWORD
                   | YUL_ADD_MOD_KEYWORD
                   | YUL_ADDRESS_KEYWORD
                   | YUL_AND_KEYWORD
                   | YUL_BALANCE_KEYWORD
                   | YUL_BLOCK_HASH_KEYWORD
                   | YUL_BYTE_KEYWORD
                   | YUL_CALL_CODE_KEYWORD
                   | YUL_CALL_DATA_COPY_KEYWORD
                   | YUL_CALL_DATA_LOAD_KEYWORD
                   | YUL_CALL_DATA_SIZE_KEYWORD
                   | YUL_CALLER_KEYWORD
                   | YUL_CALL_KEYWORD
                   | YUL_CALL_VALUE_KEYWORD
                   | YUL_COIN_BASE_KEYWORD
                   | YUL_CREATE_KEYWORD
                   | YUL_DELEGATE_CALL_KEYWORD
                   | YUL_DIV_KEYWORD
                   | YUL_EQ_KEYWORD
                   | YUL_EXP_KEYWORD
                   | YUL_EXT_CODE_COPY_KEYWORD
                   | YUL_EXT_CODE_SIZE_KEYWORD
                   | YUL_GAS_KEYWORD
                   | YUL_GAS_LIMIT_KEYWORD
                   | YUL_GAS_PRICE_KEYWORD
                   | YUL_GT_KEYWORD
                   | YUL_INVALID_KEYWORD
                   | YUL_IS_ZERO_KEYWORD
                   | YUL_LOG_0_KEYWORD
                   | YUL_LOG_1_KEYWORD
                   | YUL_LOG_2_KEYWORD
                   | YUL_LOG_3_KEYWORD
                   | YUL_LOG_4_KEYWORD
                   | YUL_LT_KEYWORD
                   | YUL_M_LOAD_KEYWORD
                   | YUL_MOD_KEYWORD
                   | YUL_M_SIZE_KEYWORD
                   | YUL_M_STORE_8_KEYWORD
                   | YUL_M_STORE_KEYWORD
                   | YUL_MUL_KEYWORD
                   | YUL_MUL_MOD_KEYWORD
                   | YUL_NOT_KEYWORD
                   | YUL_NUMBER_KEYWORD
                   | YUL_ORIGIN_KEYWORD
                   | YUL_OR_KEYWORD
                   | YUL_POP_KEYWORD
                   | YUL_RETURN_KEYWORD
                   | YUL_REVERT_KEYWORD
                   | YUL_S_DIV_KEYWORD
                   | YUL_SELF_DESTRUCT_KEYWORD
                   | YUL_SGT_KEYWORD
                   | YUL_SIGN_EXTEND_KEYWORD
                   | YUL_S_LOAD_KEYWORD
                   | YUL_SLT_KEYWORD
                   | YUL_S_MOD_KEYWORD
                   | YUL_S_STORE_KEYWORD
                   | YUL_STOP_KEYWORD
                   | YUL_SUB_KEYWORD
                   | YUL_TIMESTAMP_KEYWORD
                   | YUL_XOR_KEYWORD
                   | YUL_KECCAK_256_KEYWORD (* Introduced in 0.4.12 *)
                   | YUL_SHA_3_KEYWORD (* Deprecated in 0.5.0 *)
                   | YUL_SUICIDE_KEYWORD (* Deprecated in 0.5.0 *)
                   | YUL_RETURN_DATA_COPY_KEYWORD (* Introduced in 0.4.12 *)
                   | YUL_RETURN_DATA_SIZE_KEYWORD (* Introduced in 0.4.12 *)
                   | YUL_STATIC_CALL_KEYWORD (* Introduced in 0.4.12 *)
                   | YUL_CREATE_2_KEYWORD (* Introduced in 0.4.12 *)
                   | YUL_EXT_CODE_HASH_KEYWORD (* Introduced in 0.5.0 *)
                   | YUL_SAR_KEYWORD
                   | YUL_SHL_KEYWORD
                   | YUL_SHR_KEYWORD
                   | YUL_CHAIN_ID_KEYWORD
                   | YUL_SELF_BALANCE_KEYWORD
                   | YUL_BASE_FEE_KEYWORD (* Introduced in 0.8.7 *)
                   | YUL_DIFFICULTY_KEYWORD (* Deprecated in 0.8.18 *)
                   | YUL_PREV_RANDAO_KEYWORD; (* Introduced in 0.8.18 *)

YulLiteral = YUL_TRUE_KEYWORD
           | YUL_FALSE_KEYWORD
           | YUL_DECIMAL_LITERAL
           | YUL_HEX_LITERAL
           | HEX_STRING_LITERAL
           | ASCII_STRING_LITERAL;

YUL_DECIMAL_LITERAL = "0" | (("1"â€¦"9") ("0"â€¦"9")*);

YUL_HEX_LITERAL = "0x" Â«HEX_CHARACTERÂ»+;

(* 6.3. Yul Keywords: *)

(* Reserved until 0.7.1 *)
YUL_ABSTRACT_KEYWORD = "abstract";

YUL_ADD_KEYWORD = "add";

YUL_ADD_MOD_KEYWORD = "addmod";

YUL_ADDRESS_KEYWORD = "address";

(* Reserved until 0.7.1 *)
YUL_AFTER_KEYWORD = "after";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_ALIAS_KEYWORD = "alias";

YUL_AND_KEYWORD = "and";

(* Reserved until 0.7.1 *)
YUL_ANONYMOUS_KEYWORD = "anonymous";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_APPLY_KEYWORD = "apply";

(* Reserved until 0.7.1 *)
YUL_AS_KEYWORD = "as";

(* Reserved until 0.7.1 *)
YUL_ASSEMBLY_KEYWORD = "assembly";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_AUTO_KEYWORD = "auto";

YUL_BALANCE_KEYWORD = "balance";

(* Introduced in 0.8.7 *)
(* Reserved in 0.8.7 *)
YUL_BASE_FEE_KEYWORD = "basefee";

YUL_BLOCK_HASH_KEYWORD = "blockhash";

(* Reserved until 0.5.10 *)
YUL_BOOL_KEYWORD = "bool";

YUL_BREAK_KEYWORD = "break";

YUL_BYTE_KEYWORD = "byte";

(* Reserved until 0.7.1 *)
YUL_BYTES_KEYWORD = "bytes" ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32")?;

YUL_CALL_CODE_KEYWORD = "callcode";

YUL_CALL_DATA_COPY_KEYWORD = "calldatacopy";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_CALL_DATA_KEYWORD = "calldata";

YUL_CALL_DATA_LOAD_KEYWORD = "calldataload";

YUL_CALL_DATA_SIZE_KEYWORD = "calldatasize";

YUL_CALLER_KEYWORD = "caller";

YUL_CALL_KEYWORD = "call";

YUL_CALL_VALUE_KEYWORD = "callvalue";

YUL_CASE_KEYWORD = "case";

(* Reserved until 0.7.1 *)
YUL_CATCH_KEYWORD = "catch";

(* Reserved in 0.5.12 *)
YUL_CHAIN_ID_KEYWORD = "chainid";

YUL_COIN_BASE_KEYWORD = "coinbase";

(* Reserved until 0.7.1 *)
YUL_CONSTANT_KEYWORD = "constant";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_CONSTRUCTOR_KEYWORD = "constructor";

YUL_CONTINUE_KEYWORD = "continue";

(* Reserved until 0.7.1 *)
YUL_CONTRACT_KEYWORD = "contract";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_COPY_OF_KEYWORD = "copyof";

YUL_CREATE_KEYWORD = "create";

(* Introduced in 0.4.12 *)
(* Reserved in 0.4.12 *)
YUL_CREATE_2_KEYWORD = "create2";

(* Reserved until 0.7.1 *)
YUL_DAYS_KEYWORD = "days";

YUL_DEFAULT_KEYWORD = "default";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_DEFINE_KEYWORD = "define";

YUL_DELEGATE_CALL_KEYWORD = "delegatecall";

(* Reserved until 0.7.1 *)
YUL_DELETE_KEYWORD = "delete";

(* Deprecated in 0.8.18 *)
YUL_DIFFICULTY_KEYWORD = "difficulty";

YUL_DIV_KEYWORD = "div";

(* Reserved until 0.7.1 *)
YUL_DO_KEYWORD = "do";

(* Reserved until 0.7.1 *)
YUL_ELSE_KEYWORD = "else";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_EMIT_KEYWORD = "emit";

(* Reserved until 0.7.1 *)
YUL_ENUM_KEYWORD = "enum";

YUL_EQ_KEYWORD = "eq";

(* Reserved until 0.7.1 *)
YUL_ETHER_KEYWORD = "ether";

(* Reserved until 0.7.1 *)
YUL_EVENT_KEYWORD = "event";

YUL_EXP_KEYWORD = "exp";

YUL_EXT_CODE_COPY_KEYWORD = "extcodecopy";

(* Introduced in 0.5.0 *)
(* Reserved in 0.5.0 *)
YUL_EXT_CODE_HASH_KEYWORD = "extcodehash";

YUL_EXT_CODE_SIZE_KEYWORD = "extcodesize";

(* Reserved until 0.7.1 *)
YUL_EXTERNAL_KEYWORD = "external";

(* Reserved from 0.6.0 until 0.7.1 *)
YUL_FALLBACK_KEYWORD = "fallback";

YUL_FALSE_KEYWORD = "false";

(* Reserved until 0.7.1 *)
YUL_FINAL_KEYWORD = "final";

(* Reserved until 0.7.0 *)
YUL_FINNEY_KEYWORD = "finney";

(* Reserved until 0.7.1 *)
YUL_FIXED_KEYWORD = "fixed";

(* Reserved until 0.7.1 *)
YUL_FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");

(* Reserved until 0.7.1 *)
YUL_FIXED_KEYWORD = "fixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");

(* Reserved from 0.4.14 until 0.7.1 *)
YUL_FIXED_KEYWORD = "fixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");

(* Reserved from 0.4.14 until 0.7.1 *)
YUL_FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");

YUL_FOR_KEYWORD = "for";

YUL_FUNCTION_KEYWORD = "function";

YUL_GAS_KEYWORD = "gas";

YUL_GAS_LIMIT_KEYWORD = "gaslimit";

YUL_GAS_PRICE_KEYWORD = "gasprice";

YUL_GT_KEYWORD = "gt";

(* Reserved from 0.7.0 until 0.7.1 *)
YUL_GWEI_KEYWORD = "gwei";

YUL_HEX_KEYWORD = "hex";

(* Reserved until 0.7.1 *)
YUL_HOURS_KEYWORD = "hours";

YUL_IF_KEYWORD = "if";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_IMMUTABLE_KEYWORD = "immutable";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_IMPLEMENTS_KEYWORD = "implements";

(* Reserved until 0.7.1 *)
YUL_IMPORT_KEYWORD = "import";

(* Reserved until 0.7.1 *)
YUL_INDEXED_KEYWORD = "indexed";

(* Reserved until 0.6.8 *)
YUL_IN_KEYWORD = "in";

(* Reserved until 0.7.1 *)
YUL_INLINE_KEYWORD = "inline";

(* Reserved until 0.7.1 *)
YUL_INTERFACE_KEYWORD = "interface";

(* Reserved until 0.7.1 *)
YUL_INTERNAL_KEYWORD = "internal";

(* Reserved until 0.7.1 *)
YUL_INT_KEYWORD = "int" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;

YUL_INVALID_KEYWORD = "invalid";

(* Reserved until 0.7.1 *)
YUL_IS_KEYWORD = "is";

YUL_IS_ZERO_KEYWORD = "iszero";

(* Introduced in 0.4.12 *)
(* Reserved in 0.4.12 *)
YUL_KECCAK_256_KEYWORD = "keccak256";

(* Introduced in 0.6.0 *)
(* Reserved in 0.7.1 *)
YUL_LEAVE_KEYWORD = "leave";

YUL_LET_KEYWORD = "let";

(* Reserved until 0.7.1 *)
YUL_LIBRARY_KEYWORD = "library";

YUL_LOG_0_KEYWORD = "log0";

YUL_LOG_1_KEYWORD = "log1";

YUL_LOG_2_KEYWORD = "log2";

YUL_LOG_3_KEYWORD = "log3";

YUL_LOG_4_KEYWORD = "log4";

YUL_LT_KEYWORD = "lt";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_MACRO_KEYWORD = "macro";

(* Reserved until 0.7.1 *)
YUL_MAPPING_KEYWORD = "mapping";

(* Reserved until 0.7.1 *)
YUL_MATCH_KEYWORD = "match";

(* Reserved until 0.7.1 *)
YUL_MEMORY_KEYWORD = "memory";

(* Reserved until 0.7.1 *)
YUL_MINUTES_KEYWORD = "minutes";

YUL_M_LOAD_KEYWORD = "mload";

YUL_MOD_KEYWORD = "mod";

(* Reserved until 0.7.1 *)
YUL_MODIFIER_KEYWORD = "modifier";

YUL_M_SIZE_KEYWORD = "msize";

YUL_M_STORE_KEYWORD = "mstore";

YUL_M_STORE_8_KEYWORD = "mstore8";

YUL_MUL_KEYWORD = "mul";

YUL_MUL_MOD_KEYWORD = "mulmod";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_MUTABLE_KEYWORD = "mutable";

(* Reserved until 0.7.1 *)
YUL_NEW_KEYWORD = "new";

YUL_NOT_KEYWORD = "not";

(* Reserved until 0.7.1 *)
YUL_NULL_KEYWORD = "null";

YUL_NUMBER_KEYWORD = "number";

(* Reserved until 0.7.1 *)
YUL_OF_KEYWORD = "of";

YUL_OR_KEYWORD = "or";

YUL_ORIGIN_KEYWORD = "origin";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_OVERRIDE_KEYWORD = "override";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_PARTIAL_KEYWORD = "partial";

(* Reserved until 0.7.1 *)
YUL_PAYABLE_KEYWORD = "payable";

YUL_POP_KEYWORD = "pop";

(* Reserved until 0.7.1 *)
YUL_PRAGMA_KEYWORD = "pragma";

(* Introduced in 0.8.18 *)
(* Reserved in 0.8.18 *)
YUL_PREV_RANDAO_KEYWORD = "prevrandao";

(* Reserved until 0.7.1 *)
YUL_PRIVATE_KEYWORD = "private";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_PROMISE_KEYWORD = "promise";

(* Reserved until 0.7.1 *)
YUL_PUBLIC_KEYWORD = "public";

(* Reserved until 0.7.1 *)
YUL_PURE_KEYWORD = "pure";

(* Reserved from 0.6.0 until 0.7.1 *)
YUL_RECEIVE_KEYWORD = "receive";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_REFERENCE_KEYWORD = "reference";

(* Reserved until 0.7.1 *)
YUL_RELOCATABLE_KEYWORD = "relocatable";

(* Introduced in 0.4.12 *)
(* Reserved in 0.4.12 *)
YUL_RETURN_DATA_COPY_KEYWORD = "returndatacopy";

(* Introduced in 0.4.12 *)
(* Reserved in 0.4.12 *)
YUL_RETURN_DATA_SIZE_KEYWORD = "returndatasize";

YUL_RETURN_KEYWORD = "return";

(* Reserved until 0.7.1 *)
YUL_RETURNS_KEYWORD = "returns";

YUL_REVERT_KEYWORD = "revert";

(* Reserved in 0.4.21 *)
YUL_SAR_KEYWORD = "sar";

YUL_S_DIV_KEYWORD = "sdiv";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_SEALED_KEYWORD = "sealed";

(* Reserved until 0.7.1 *)
YUL_SECONDS_KEYWORD = "seconds";

(* Reserved in 0.5.12 *)
YUL_SELF_BALANCE_KEYWORD = "selfbalance";

YUL_SELF_DESTRUCT_KEYWORD = "selfdestruct";

YUL_SGT_KEYWORD = "sgt";

(* Deprecated in 0.5.0 *)
(* Reserved until 0.5.0 *)
YUL_SHA_3_KEYWORD = "sha3";

(* Reserved in 0.4.21 *)
YUL_SHL_KEYWORD = "shl";

(* Reserved in 0.4.21 *)
YUL_SHR_KEYWORD = "shr";

YUL_SIGN_EXTEND_KEYWORD = "signextend";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_SIZE_OF_KEYWORD = "sizeof";

YUL_S_LOAD_KEYWORD = "sload";

YUL_SLT_KEYWORD = "slt";

YUL_S_MOD_KEYWORD = "smod";

YUL_S_STORE_KEYWORD = "sstore";

(* Introduced in 0.4.12 *)
(* Reserved in 0.4.12 *)
YUL_STATIC_CALL_KEYWORD = "staticcall";

(* Reserved until 0.7.1 *)
YUL_STATIC_KEYWORD = "static";

YUL_STOP_KEYWORD = "stop";

(* Reserved until 0.7.1 *)
YUL_STORAGE_KEYWORD = "storage";

(* Reserved until 0.7.1 *)
YUL_STRING_KEYWORD = "string";

(* Reserved until 0.7.1 *)
YUL_STRUCT_KEYWORD = "struct";

YUL_SUB_KEYWORD = "sub";

(* Deprecated in 0.5.0 *)
(* Reserved until 0.5.0 *)
YUL_SUICIDE_KEYWORD = "suicide";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_SUPPORTS_KEYWORD = "supports";

YUL_SWITCH_KEYWORD = "switch";

(* Reserved until 0.7.0 *)
YUL_SZABO_KEYWORD = "szabo";

YUL_TIMESTAMP_KEYWORD = "timestamp";

(* Reserved until 0.7.1 *)
YUL_THROW_KEYWORD = "throw";

YUL_TRUE_KEYWORD = "true";

(* Reserved until 0.7.1 *)
YUL_TRY_KEYWORD = "try";

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_TYPE_DEF_KEYWORD = "typedef";

(* Reserved until 0.7.1 *)
YUL_TYPE_KEYWORD = "type";

(* Reserved until 0.7.1 *)
YUL_TYPE_OF_KEYWORD = "typeof";

(* Reserved until 0.7.1 *)
YUL_UFIXED_KEYWORD = "ufixed";

(* Reserved until 0.7.1 *)
YUL_UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");

(* Reserved until 0.7.1 *)
YUL_UFIXED_KEYWORD = "ufixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");

(* Reserved from 0.4.14 until 0.7.1 *)
YUL_UFIXED_KEYWORD = "ufixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");

(* Reserved from 0.4.14 until 0.7.1 *)
YUL_UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");

(* Reserved until 0.7.1 *)
YUL_UINT_KEYWORD = "uint" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;

(* Reserved from 0.5.0 until 0.7.1 *)
YUL_UNCHECKED_KEYWORD = "unchecked";

(* Reserved until 0.7.1 *)
YUL_USING_KEYWORD = "using";

(* Reserved until 0.6.5 *)
YUL_VAR_KEYWORD = "var";

(* Reserved until 0.7.1 *)
YUL_VIEW_KEYWORD = "view";

(* Reserved from 0.6.0 until 0.7.1 *)
YUL_VIRTUAL_KEYWORD = "virtual";

(* Reserved until 0.7.1 *)
YUL_WEEKS_KEYWORD = "weeks";

(* Reserved until 0.7.1 *)
YUL_WEI_KEYWORD = "wei";

(* Reserved until 0.7.1 *)
YUL_WHILE_KEYWORD = "while";

(* Reserved until 0.7.1 *)
YUL_YEARS_KEYWORD = "years";

YUL_XOR_KEYWORD = "xor";

