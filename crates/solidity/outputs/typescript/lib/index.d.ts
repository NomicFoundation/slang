/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum NodeType {
  Rule = 0,
  Token = 1,
}
export const enum TokenKind {
  AbicoderKeyword = 0,
  AbstractKeyword = 1,
  AddressKeyword = 2,
  Ampersand = 3,
  AmpersandAmpersand = 4,
  AmpersandEqual = 5,
  AnonymousKeyword = 6,
  AsKeyword = 7,
  AsciiEscape = 8,
  AsciiStringLiteral = 9,
  AssemblyKeyword = 10,
  Bang = 11,
  BangEqual = 12,
  Bar = 13,
  BarBar = 14,
  BarEqual = 15,
  BoolKeyword = 16,
  BreakKeyword = 17,
  CalldataKeyword = 18,
  Caret = 19,
  CaretEqual = 20,
  CaseKeyword = 21,
  CatchKeyword = 22,
  CloseBrace = 23,
  CloseBracket = 24,
  CloseParen = 25,
  Colon = 26,
  ColonEqual = 27,
  Comma = 28,
  ConstantKeyword = 29,
  ConstructorKeyword = 30,
  ContinueKeyword = 31,
  ContractKeyword = 32,
  DaysKeyword = 33,
  DecimalExponent = 34,
  DecimalLiteral = 35,
  DecimalNumber = 36,
  DefaultKeyword = 37,
  DeleteKeyword = 38,
  DoKeyword = 39,
  DoubleQuotedAsciiStringLiteral = 40,
  DoubleQuotedUnicodeStringLiteral = 41,
  ElseKeyword = 42,
  EmitKeyword = 43,
  EndOfLine = 44,
  EnumKeyword = 45,
  Equal = 46,
  EqualEqual = 47,
  EqualGreaterThan = 48,
  ErrorKeyword = 49,
  EscapeSequence = 50,
  EtherKeyword = 51,
  EventKeyword = 52,
  Evmasm = 53,
  ExperimentalKeyword = 54,
  ExternalKeyword = 55,
  FallbackKeyword = 56,
  FalseKeyword = 57,
  FinneyKeyword = 58,
  FixedBytesType = 59,
  ForKeyword = 60,
  FromKeyword = 61,
  FunctionKeyword = 62,
  GlobalKeyword = 63,
  GreaterThan = 64,
  GreaterThanEqual = 65,
  GreaterThanGreaterThan = 66,
  GreaterThanGreaterThanEqual = 67,
  GreaterThanGreaterThanGreaterThan = 68,
  GreaterThanGreaterThanGreaterThanEqual = 69,
  GweiKeyword = 70,
  HexByteEscape = 71,
  HexCharacter = 72,
  HexLiteral = 73,
  HexStringLiteral = 74,
  HoursKeyword = 75,
  Identifier = 76,
  IdentifierPart = 77,
  IdentifierStart = 78,
  IfKeyword = 79,
  ImmutableKeyword = 80,
  ImportKeyword = 81,
  IndexedKeyword = 82,
  InterfaceKeyword = 83,
  InternalKeyword = 84,
  IsKeyword = 85,
  Keyword = 86,
  LeaveKeyword = 87,
  LessThan = 88,
  LessThanEqual = 89,
  LessThanLessThan = 90,
  LessThanLessThanEqual = 91,
  LetKeyword = 92,
  LibraryKeyword = 93,
  MappingKeyword = 94,
  MemoryKeyword = 95,
  Minus = 96,
  MinusEqual = 97,
  MinusGreaterThan = 98,
  MinusMinus = 99,
  MinutesKeyword = 100,
  ModifierKeyword = 101,
  MultilineComment = 102,
  NewKeyword = 103,
  OpenBrace = 104,
  OpenBracket = 105,
  OpenParen = 106,
  OverrideKeyword = 107,
  PayableKeyword = 108,
  Percent = 109,
  PercentEqual = 110,
  Period = 111,
  Plus = 112,
  PlusEqual = 113,
  PlusPlus = 114,
  PossiblySeparatedPairsOfHexDigits = 115,
  PragmaKeyword = 116,
  PrivateKeyword = 117,
  PublicKeyword = 118,
  PureKeyword = 119,
  QuestionMark = 120,
  RawIdentifier = 121,
  ReceiveKeyword = 122,
  ReservedKeyword = 123,
  ReturnKeyword = 124,
  ReturnsKeyword = 125,
  RevertKeyword = 126,
  SecondsKeyword = 127,
  Semicolon = 128,
  SignedFixedType = 129,
  SignedIntegerType = 130,
  SingleLineComment = 131,
  SingleQuotedAsciiStringLiteral = 132,
  SingleQuotedUnicodeStringLiteral = 133,
  Slash = 134,
  SlashEqual = 135,
  SolidityKeyword = 136,
  Star = 137,
  StarEqual = 138,
  StarStar = 139,
  StorageKeyword = 140,
  StringKeyword = 141,
  StructKeyword = 142,
  SwitchKeyword = 143,
  SzaboKeyword = 144,
  Tilde = 145,
  TrueKeyword = 146,
  TryKeyword = 147,
  TypeKeyword = 148,
  UncheckedKeyword = 149,
  UnicodeEscape = 150,
  UnicodeStringLiteral = 151,
  UnsignedFixedType = 152,
  UnsignedIntegerType = 153,
  UsingKeyword = 154,
  VersionPragmaValue = 155,
  ViewKeyword = 156,
  VirtualKeyword = 157,
  WeeksKeyword = 158,
  WeiKeyword = 159,
  WhileKeyword = 160,
  Whitespace = 161,
  YearsKeyword = 162,
  YulDecimalLiteral = 163,
  YulHexLiteral = 164,
  YulIdentifier = 165,
  YulKeyword = 166,
  YulReservedKeyword = 167,
}
export const enum RuleKind {
  ABICoderPragma = 0,
  AddSubExpression = 1,
  AddressType = 2,
  AndExpression = 3,
  ArgumentList = 4,
  Arguments = 5,
  ArrayLiteral = 6,
  AssemblyFlags = 7,
  AssemblyStatement = 8,
  AssignmentExpression = 9,
  BitAndExpression = 10,
  BitOrExpression = 11,
  BitXOrExpression = 12,
  Block = 13,
  BooleanLiteral = 14,
  BreakStatement = 15,
  CatchClause = 16,
  ConditionalExpression = 17,
  ConstantDefinition = 18,
  ConstructorAttribute = 19,
  ConstructorDefinition = 20,
  ContinueStatement = 21,
  ContractBodyElement = 22,
  ContractDefinition = 23,
  DataLocation = 24,
  Definition = 25,
  DeleteStatement = 26,
  Directive = 27,
  DoWhileStatement = 28,
  ElementaryType = 29,
  EmitStatement = 30,
  EndOfFileTrivia = 31,
  EnumDefinition = 32,
  EqualityComparisonExpression = 33,
  ErrorDefinition = 34,
  ErrorParameter = 35,
  EventDefinition = 36,
  EventParameter = 37,
  ExperimentalPragma = 38,
  ExponentiationExpression = 39,
  Expression = 40,
  ExpressionStatement = 41,
  FallbackFunctionAttribute = 42,
  FallbackFunctionDefinition = 43,
  ForStatement = 44,
  FunctionAttribute = 45,
  FunctionCallExpression = 46,
  FunctionDefinition = 47,
  FunctionType = 48,
  IdentifierPath = 49,
  IfStatement = 50,
  ImportDirective = 51,
  ImportPath = 52,
  IndexAccessExpression = 53,
  InheritanceSpecifier = 54,
  InheritanceSpecifierList = 55,
  InterfaceDefinition = 56,
  LeadingTrivia = 57,
  LibraryDefinition = 58,
  MappingKeyType = 59,
  MappingType = 60,
  MappingValueType = 61,
  MemberAccessExpression = 62,
  ModifierAttribute = 63,
  ModifierDefinition = 64,
  ModifierInvocation = 65,
  MulDivModExpression = 66,
  NamedArgument = 67,
  NamedArgumentList = 68,
  NewExpression = 69,
  NumberUnit = 70,
  NumericLiteral = 71,
  OrExpression = 72,
  OrderComparisonExpression = 73,
  OverrideSpecifier = 74,
  ParameterDeclaration = 75,
  ParameterList = 76,
  PayableType = 77,
  PositionalArgumentList = 78,
  PragmaDirective = 79,
  PrimaryExpression = 80,
  ReceiveFunctionAttribute = 81,
  ReceiveFunctionDefinition = 82,
  Results = 83,
  ReturnStatement = 84,
  RevertStatement = 85,
  SelectedImport = 86,
  SelectingImportDirective = 87,
  ShiftExpression = 88,
  SimpleImportDirective = 89,
  SimpleStatement = 90,
  SourceUnit = 91,
  StarImportDirective = 92,
  StateVariableAttribute = 93,
  StateVariableDeclaration = 94,
  Statement = 95,
  StringExpression = 96,
  StructDefinition = 97,
  StructMember = 98,
  TrailingTrivia = 99,
  TryStatement = 100,
  TupleDeconstructionStatement = 101,
  TupleExpression = 102,
  TypeExpression = 103,
  TypeName = 104,
  UnaryPostfixExpression = 105,
  UnaryPrefixExpression = 106,
  UncheckedBlock = 107,
  UnnamedFunctionDefinition = 108,
  UserDefinedValueTypeDefinition = 109,
  UsingDirective = 110,
  VariableDeclarationStatement = 111,
  VersionPragma = 112,
  VersionPragmaOperator = 113,
  VersionPragmaSpecifier = 114,
  WhileStatement = 115,
  YulAssignmentStatement = 116,
  YulBlock = 117,
  YulBreakStatement = 118,
  YulContinueStatement = 119,
  YulExpression = 120,
  YulForStatement = 121,
  YulFunctionCall = 122,
  YulFunctionDefinition = 123,
  YulIdentifierPath = 124,
  YulIfStatement = 125,
  YulLeaveStatement = 126,
  YulLiteral = 127,
  YulStatement = 128,
  YulSwitchStatement = 129,
  YulVariableDeclaration = 130,
  _DELIMITEDBY = 131,
  _OPTIONAL = 132,
  _REPEATED = 133,
  _SEPARATEDBY = 134,
  _SEQUENCE = 135,
  _TERMINATEDBY = 136,
}
export const enum ProductionKind {
  ABICoderPragma = 0,
  AbicoderKeyword = 1,
  AbstractKeyword = 2,
  AddressKeyword = 3,
  AddressType = 4,
  Ampersand = 5,
  AmpersandAmpersand = 6,
  AmpersandEqual = 7,
  AnonymousKeyword = 8,
  ArgumentList = 9,
  ArrayLiteral = 10,
  AsKeyword = 11,
  AsciiEscape = 12,
  AsciiStringLiteral = 13,
  AssemblyFlags = 14,
  AssemblyKeyword = 15,
  AssemblyStatement = 16,
  Bang = 17,
  BangEqual = 18,
  Bar = 19,
  BarBar = 20,
  BarEqual = 21,
  Block = 22,
  BoolKeyword = 23,
  BooleanLiteral = 24,
  BreakKeyword = 25,
  BreakStatement = 26,
  CalldataKeyword = 27,
  Caret = 28,
  CaretEqual = 29,
  CaseKeyword = 30,
  CatchClause = 31,
  CatchKeyword = 32,
  CloseBrace = 33,
  CloseBracket = 34,
  CloseParen = 35,
  Colon = 36,
  ColonEqual = 37,
  Comma = 38,
  ConstantDefinition = 39,
  ConstantKeyword = 40,
  ConstructorAttribute = 41,
  ConstructorDefinition = 42,
  ConstructorKeyword = 43,
  ContinueKeyword = 44,
  ContinueStatement = 45,
  ContractBodyElement = 46,
  ContractDefinition = 47,
  ContractKeyword = 48,
  DataLocation = 49,
  DaysKeyword = 50,
  DecimalExponent = 51,
  DecimalLiteral = 52,
  DecimalNumber = 53,
  DefaultKeyword = 54,
  Definition = 55,
  DeleteKeyword = 56,
  DeleteStatement = 57,
  Directive = 58,
  DoKeyword = 59,
  DoWhileStatement = 60,
  DoubleQuotedAsciiStringLiteral = 61,
  DoubleQuotedUnicodeStringLiteral = 62,
  ElementaryType = 63,
  ElseKeyword = 64,
  EmitKeyword = 65,
  EmitStatement = 66,
  EndOfFileTrivia = 67,
  EndOfLine = 68,
  EnumDefinition = 69,
  EnumKeyword = 70,
  Equal = 71,
  EqualEqual = 72,
  EqualGreaterThan = 73,
  ErrorDefinition = 74,
  ErrorKeyword = 75,
  ErrorParameter = 76,
  EscapeSequence = 77,
  EtherKeyword = 78,
  EventDefinition = 79,
  EventKeyword = 80,
  EventParameter = 81,
  Evmasm = 82,
  ExperimentalKeyword = 83,
  ExperimentalPragma = 84,
  Expression = 85,
  ExpressionStatement = 86,
  ExternalKeyword = 87,
  FallbackFunctionAttribute = 88,
  FallbackFunctionDefinition = 89,
  FallbackKeyword = 90,
  FalseKeyword = 91,
  FinneyKeyword = 92,
  FixedBytesType = 93,
  ForKeyword = 94,
  ForStatement = 95,
  FromKeyword = 96,
  FunctionAttribute = 97,
  FunctionDefinition = 98,
  FunctionKeyword = 99,
  FunctionType = 100,
  GlobalKeyword = 101,
  GreaterThan = 102,
  GreaterThanEqual = 103,
  GreaterThanGreaterThan = 104,
  GreaterThanGreaterThanEqual = 105,
  GreaterThanGreaterThanGreaterThan = 106,
  GreaterThanGreaterThanGreaterThanEqual = 107,
  GweiKeyword = 108,
  HexByteEscape = 109,
  HexCharacter = 110,
  HexLiteral = 111,
  HexStringLiteral = 112,
  HoursKeyword = 113,
  Identifier = 114,
  IdentifierPart = 115,
  IdentifierPath = 116,
  IdentifierStart = 117,
  IfKeyword = 118,
  IfStatement = 119,
  ImmutableKeyword = 120,
  ImportDirective = 121,
  ImportKeyword = 122,
  ImportPath = 123,
  IndexedKeyword = 124,
  InheritanceSpecifier = 125,
  InheritanceSpecifierList = 126,
  InterfaceDefinition = 127,
  InterfaceKeyword = 128,
  InternalKeyword = 129,
  IsKeyword = 130,
  Keyword = 131,
  LeadingTrivia = 132,
  LeaveKeyword = 133,
  LessThan = 134,
  LessThanEqual = 135,
  LessThanLessThan = 136,
  LessThanLessThanEqual = 137,
  LetKeyword = 138,
  LibraryDefinition = 139,
  LibraryKeyword = 140,
  MappingKeyType = 141,
  MappingKeyword = 142,
  MappingType = 143,
  MappingValueType = 144,
  MemoryKeyword = 145,
  Minus = 146,
  MinusEqual = 147,
  MinusGreaterThan = 148,
  MinusMinus = 149,
  MinutesKeyword = 150,
  ModifierAttribute = 151,
  ModifierDefinition = 152,
  ModifierInvocation = 153,
  ModifierKeyword = 154,
  MultilineComment = 155,
  NamedArgument = 156,
  NamedArgumentList = 157,
  NewExpression = 158,
  NewKeyword = 159,
  NumberUnit = 160,
  NumericLiteral = 161,
  OpenBrace = 162,
  OpenBracket = 163,
  OpenParen = 164,
  OverrideKeyword = 165,
  OverrideSpecifier = 166,
  ParameterDeclaration = 167,
  ParameterList = 168,
  PayableKeyword = 169,
  PayableType = 170,
  Percent = 171,
  PercentEqual = 172,
  Period = 173,
  Plus = 174,
  PlusEqual = 175,
  PlusPlus = 176,
  PositionalArgumentList = 177,
  PossiblySeparatedPairsOfHexDigits = 178,
  PragmaDirective = 179,
  PragmaKeyword = 180,
  PrimaryExpression = 181,
  PrivateKeyword = 182,
  PublicKeyword = 183,
  PureKeyword = 184,
  QuestionMark = 185,
  RawIdentifier = 186,
  ReceiveFunctionAttribute = 187,
  ReceiveFunctionDefinition = 188,
  ReceiveKeyword = 189,
  ReservedKeyword = 190,
  ReturnKeyword = 191,
  ReturnStatement = 192,
  ReturnsKeyword = 193,
  RevertKeyword = 194,
  RevertStatement = 195,
  SecondsKeyword = 196,
  SelectedImport = 197,
  SelectingImportDirective = 198,
  Semicolon = 199,
  SignedFixedType = 200,
  SignedIntegerType = 201,
  SimpleImportDirective = 202,
  SimpleStatement = 203,
  SingleLineComment = 204,
  SingleQuotedAsciiStringLiteral = 205,
  SingleQuotedUnicodeStringLiteral = 206,
  Slash = 207,
  SlashEqual = 208,
  SolidityKeyword = 209,
  SourceUnit = 210,
  Star = 211,
  StarEqual = 212,
  StarImportDirective = 213,
  StarStar = 214,
  StateVariableAttribute = 215,
  StateVariableDeclaration = 216,
  Statement = 217,
  StorageKeyword = 218,
  StringExpression = 219,
  StringKeyword = 220,
  StructDefinition = 221,
  StructKeyword = 222,
  StructMember = 223,
  SwitchKeyword = 224,
  SzaboKeyword = 225,
  Tilde = 226,
  TrailingTrivia = 227,
  TrueKeyword = 228,
  TryKeyword = 229,
  TryStatement = 230,
  TupleDeconstructionStatement = 231,
  TupleExpression = 232,
  TypeExpression = 233,
  TypeKeyword = 234,
  TypeName = 235,
  UncheckedBlock = 236,
  UncheckedKeyword = 237,
  UnicodeEscape = 238,
  UnicodeStringLiteral = 239,
  UnnamedFunctionDefinition = 240,
  UnsignedFixedType = 241,
  UnsignedIntegerType = 242,
  UserDefinedValueTypeDefinition = 243,
  UsingDirective = 244,
  UsingKeyword = 245,
  VariableDeclarationStatement = 246,
  VersionPragma = 247,
  VersionPragmaOperator = 248,
  VersionPragmaSpecifier = 249,
  VersionPragmaValue = 250,
  ViewKeyword = 251,
  VirtualKeyword = 252,
  WeeksKeyword = 253,
  WeiKeyword = 254,
  WhileKeyword = 255,
  WhileStatement = 256,
  Whitespace = 257,
  YearsKeyword = 258,
  YulAssignmentStatement = 259,
  YulBlock = 260,
  YulBreakStatement = 261,
  YulContinueStatement = 262,
  YulDecimalLiteral = 263,
  YulExpression = 264,
  YulForStatement = 265,
  YulFunctionCall = 266,
  YulFunctionDefinition = 267,
  YulHexLiteral = 268,
  YulIdentifier = 269,
  YulIdentifierPath = 270,
  YulIfStatement = 271,
  YulKeyword = 272,
  YulLeaveStatement = 273,
  YulLiteral = 274,
  YulReservedKeyword = 275,
  YulStatement = 276,
  YulSwitchStatement = 277,
  YulVariableDeclaration = 278,
}
export class RuleNode {
  get type(): NodeType.Rule
  get kind(): RuleKind
  get range(): bigint[]
  get rangeIncludingTrivia(): bigint[]
  children(): (RuleNode | TokenNode)[]
}
export class TokenNode {
  get type(): NodeType.Token
  get kind(): TokenKind
  get range(): bigint[]
  get rangeIncludingTrivia(): bigint[]
  trivia(): (RuleNode | TokenNode)[]
}
export class Language {
  constructor(version: string)
  version(): string
  parse(productionKind: ProductionKind, input: string): ParserOutput
}
export class ParserOutput {
  parseTree(): RuleNode | TokenNode | null
  errorCount(): bigint
  errorsAsStrings(sourceId: string, source: string, withColour: boolean): Array<string>
  isValid(): boolean
}
