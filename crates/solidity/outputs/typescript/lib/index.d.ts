/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export const enum NodeType {
  Rule = 0,
  Token = 1,
  Group = 2
}
export const enum TokenKind {
  Abicoder = 0,
  Abstract = 1,
  Address = 2,
  After = 3,
  Alias = 4,
  Ampersand = 5,
  AmpersandAmpersand = 6,
  AmpersandEqual = 7,
  Anonymous = 8,
  Apply = 9,
  As = 10,
  AsciiEscape = 11,
  AsciiStringLiteral = 12,
  Assembly = 13,
  Auto = 14,
  Backslash = 15,
  Bang = 16,
  BangEqual = 17,
  Bool = 18,
  BooleanLiteral = 19,
  Break = 20,
  Byte = 21,
  ByteCount = 22,
  Bytes = 23,
  Calldata = 24,
  Caret = 25,
  CaretEqual = 26,
  CarriageReturn = 27,
  Case = 28,
  Catch = 29,
  Char = 30,
  Chars = 31,
  CloseBrace = 32,
  CloseBracket = 33,
  CloseParen = 34,
  Colon = 35,
  ColonEqual = 36,
  Comma = 37,
  Constant = 38,
  Constructor = 39,
  Content = 40,
  Continue = 41,
  Contract = 42,
  Copyof = 43,
  Count = 44,
  Days = 45,
  DecimalExponent = 46,
  DecimalFloat = 47,
  DecimalInteger = 48,
  DecimalNumber = 49,
  Default = 50,
  Define = 51,
  Delete = 52,
  DelimitedPossiblySeparatedPairsOfHexDigits = 53,
  Do = 54,
  DoubleQuote = 55,
  DoubleQuoteEvmasmDoubleQuote = 56,
  DoubleQuotedAsciiStringLiteral = 57,
  DoubleQuotedUnicodeStringLiteral = 58,
  Eight = 59,
  EightEight = 60,
  EightZero = 61,
  Else = 62,
  Emit = 63,
  EndOfLine = 64,
  Enum = 65,
  Equal = 66,
  EqualEqual = 67,
  EqualGreater = 68,
  Error = 69,
  EscapeSequence = 70,
  Ether = 71,
  Event = 72,
  Experimental = 73,
  External = 74,
  Fallback = 75,
  False = 76,
  Final = 77,
  Finney = 78,
  Five = 79,
  FiveSix = 80,
  Fixed = 81,
  FixedBytesType = 82,
  For = 83,
  Four = 84,
  FourEight = 85,
  FourZero = 86,
  From = 87,
  Function = 88,
  Global = 89,
  Greater = 90,
  GreaterEqual = 91,
  GreaterGreater = 92,
  GreaterGreaterEqual = 93,
  GreaterGreaterGreater = 94,
  GreaterGreaterGreaterEqual = 95,
  Gwei = 96,
  Hex = 97,
  HexByteEscape = 98,
  HexCharacter = 99,
  HexNumber = 100,
  HexStringLiteral = 101,
  Hours = 102,
  Identifier = 103,
  IdentifierPart = 104,
  IdentifierStart = 105,
  If = 106,
  Immutable = 107,
  Implements = 108,
  Import = 109,
  In = 110,
  Indexed = 111,
  Inline = 112,
  Int = 113,
  Interface = 114,
  Internal = 115,
  Is = 116,
  Keyword = 117,
  LatinSmallLetterN = 118,
  LatinSmallLetterR = 119,
  LatinSmallLetterT = 120,
  LatinSmallLetterU = 121,
  LatinSmallLetterX = 122,
  Leave = 123,
  Less = 124,
  LessEqual = 125,
  LessLess = 126,
  LessLessEqual = 127,
  Let = 128,
  Library = 129,
  Linefeed = 130,
  Macro = 131,
  Mapping = 132,
  Match = 133,
  Memory = 134,
  Minus = 135,
  MinusEqual = 136,
  MinusGreater = 137,
  MinusMinus = 138,
  Minutes = 139,
  Modifier = 140,
  MultilineComment = 141,
  Mutable = 142,
  New = 143,
  Nine = 144,
  NineSix = 145,
  NotSlash = 146,
  NotStar = 147,
  Null = 148,
  NumberUnit = 149,
  Of = 150,
  One = 151,
  OneEight = 152,
  OneEightFour = 153,
  OneFive = 154,
  OneFiveTwo = 155,
  OneFour = 156,
  OneFourFour = 157,
  OneNine = 158,
  OneNineTwo = 159,
  OneOne = 160,
  OneOneTwo = 161,
  OneSeven = 162,
  OneSevenSix = 163,
  OneSix = 164,
  OneSixEight = 165,
  OneSixZero = 166,
  OneThree = 167,
  OneThreeSix = 168,
  OneTwo = 169,
  OneTwoEight = 170,
  OneTwoZero = 171,
  OneZero = 172,
  OneZeroFour = 173,
  OpenBrace = 174,
  OpenBracket = 175,
  OpenParen = 176,
  Override = 177,
  Partial = 178,
  Payable = 179,
  Percent = 180,
  PercentEqual = 181,
  Period = 182,
  Pipe = 183,
  PipeEqual = 184,
  PipePipe = 185,
  Plus = 186,
  PlusEqual = 187,
  PlusPlus = 188,
  PossiblySeparatedPairsOfHexDigits = 189,
  Pragma = 190,
  Private = 191,
  Promise = 192,
  Public = 193,
  Pure = 194,
  Question = 195,
  Quote = 196,
  RawIdentifier = 197,
  Receive = 198,
  Reference = 199,
  Relocatable = 200,
  ReservedKeyword = 201,
  Return = 202,
  Returns = 203,
  Revert = 204,
  Run = 205,
  Runs = 206,
  Sealed = 207,
  Seconds = 208,
  Semicolon = 209,
  Seven = 210,
  SevenTwo = 211,
  SignedFixedType = 212,
  SignedIntegerType = 213,
  SingleLineComment = 214,
  SingleQuotedAsciiStringLiteral = 215,
  SingleQuotedUnicodeStringLiteral = 216,
  Six = 217,
  SixFour = 218,
  Sizeof = 219,
  Slash = 220,
  SlashEqual = 221,
  SlashSlash = 222,
  SlashStar = 223,
  Solidity = 224,
  Star = 225,
  StarEqual = 226,
  StarSlash = 227,
  StarStar = 228,
  Static = 229,
  Storage = 230,
  String = 231,
  Struct = 232,
  Supports = 233,
  Switch = 234,
  Szabo = 235,
  Three = 236,
  ThreeOne = 237,
  ThreeTwo = 238,
  ThreeZero = 239,
  Tilde = 240,
  True = 241,
  Try = 242,
  Two = 243,
  TwoEight = 244,
  TwoFive = 245,
  TwoFiveSix = 246,
  TwoFour = 247,
  TwoFourEight = 248,
  TwoFourZero = 249,
  TwoNine = 250,
  TwoOne = 251,
  TwoOneSix = 252,
  TwoSeven = 253,
  TwoSix = 254,
  TwoThree = 255,
  TwoThreeTwo = 256,
  TwoTwo = 257,
  TwoTwoFour = 258,
  TwoZero = 259,
  TwoZeroEight = 260,
  TwoZeroZero = 261,
  Type = 262,
  Typedef = 263,
  Typeof = 264,
  Unchecked = 265,
  Underscore = 266,
  UnicodeDoubleQuote = 267,
  UnicodeEscape = 268,
  UnicodeQuote = 269,
  UnicodeStringLiteral = 270,
  UnsignedFixedType = 271,
  UnsignedIntegerType = 272,
  Using = 273,
  Var = 274,
  VersionPragmaOperator = 275,
  VersionPragmaValue = 276,
  View = 277,
  Virtual = 278,
  Weeks = 279,
  Wei = 280,
  While = 281,
  Whitespace = 282,
  Years = 283,
  YulDecimalNumberLiteral = 284,
  YulHexLiteral = 285,
  YulIdentifier = 286,
  YulKeyword = 287,
  Zero = 288,
  ZeroX = 289
}
export const enum RuleKind {
  ABICoderPragma = 0,
  Abicoder = 1,
  Abstract = 2,
  AddSubExpression = 3,
  Address = 4,
  AddressType = 5,
  Ampersand = 6,
  AmpersandAmpersand = 7,
  AmpersandEqual = 8,
  AndExpression = 9,
  Anonymous = 10,
  ArgumentList = 11,
  Arguments = 12,
  ArrayLiteral = 13,
  As = 14,
  Assembly = 15,
  AssemblyFlags = 16,
  AssemblyStatement = 17,
  AssignmentExpression = 18,
  Bang = 19,
  BangEqual = 20,
  BitAndExpression = 21,
  BitOrExpression = 22,
  BitXOrExpression = 23,
  Block = 24,
  Bool = 25,
  Break = 26,
  BreakStatement = 27,
  Calldata = 28,
  Caret = 29,
  CaretEqual = 30,
  Case = 31,
  Catch = 32,
  CatchClause = 33,
  CatchClauses = 34,
  Colon = 35,
  ColonEqual = 36,
  ConditionalExpression = 37,
  Constant = 38,
  ConstantDefinition = 39,
  Constructor = 40,
  ConstructorAttribute = 41,
  ConstructorAttributes = 42,
  ConstructorDefinition = 43,
  Continue = 44,
  ContinueStatement = 45,
  Contract = 46,
  ContractBodyElement = 47,
  ContractBodyElements = 48,
  ContractDefinition = 49,
  DataLocation = 50,
  Default = 51,
  Definition = 52,
  Delete = 53,
  DeleteStatement = 54,
  DelimitedArguments = 55,
  DelimitedContractBodyElements = 56,
  DelimitedExpression = 57,
  DelimitedExpressions = 58,
  DelimitedSeparatedErrorParameters = 59,
  DelimitedSeparatedEventParameters = 60,
  DelimitedSeparatedIdentifierPaths = 61,
  DelimitedSeparatedIdentifiers = 62,
  DelimitedSeparatedNamedArguments = 63,
  DelimitedSeparatedSelectedImports = 64,
  DelimitedSeparatedYulExpressions = 65,
  DelimitedStructMembers = 66,
  DelimitedTypeName = 67,
  Directive = 68,
  Do = 69,
  DoWhileStatement = 70,
  DoubleQuoteEvmasmDoubleQuote = 71,
  ElementaryType = 72,
  Else = 73,
  Emit = 74,
  EmitStatement = 75,
  EndOfFileTrivia = 76,
  Enum = 77,
  EnumDefinition = 78,
  Equal = 79,
  EqualEqual = 80,
  EqualGreater = 81,
  EqualityComparisonExpression = 82,
  Error = 83,
  ErrorDefinition = 84,
  ErrorParameter = 85,
  Event = 86,
  EventDefinition = 87,
  EventParameter = 88,
  Experimental = 89,
  ExperimentalPragma = 90,
  ExponentiationExpression = 91,
  Expression = 92,
  ExpressionStatement = 93,
  External = 94,
  Fallback = 95,
  FallbackFunctionAttribute = 96,
  FallbackFunctionAttributes = 97,
  FallbackFunctionDefinition = 98,
  For = 99,
  ForStatement = 100,
  From = 101,
  Function = 102,
  FunctionAttribute = 103,
  FunctionAttributes = 104,
  FunctionCallExpression = 105,
  FunctionDefinition = 106,
  FunctionType = 107,
  Global = 108,
  Greater = 109,
  GreaterEqual = 110,
  GreaterGreater = 111,
  GreaterGreaterEqual = 112,
  GreaterGreaterGreater = 113,
  GreaterGreaterGreaterEqual = 114,
  IdentifierPath = 115,
  If = 116,
  IfStatement = 117,
  Immutable = 118,
  Import = 119,
  ImportDirective = 120,
  ImportPath = 121,
  IndexAccessExpression = 122,
  Indexed = 123,
  InheritanceSpecifier = 124,
  InheritanceSpecifierList = 125,
  Interface = 126,
  InterfaceDefinition = 127,
  Internal = 128,
  Is = 129,
  LeadingTrivia = 130,
  Less = 131,
  LessEqual = 132,
  LessLess = 133,
  LessLessEqual = 134,
  Let = 135,
  Library = 136,
  LibraryDefinition = 137,
  Mapping = 138,
  MappingType = 139,
  MemberAccessExpression = 140,
  Memory = 141,
  Minus = 142,
  MinusEqual = 143,
  MinusGreater = 144,
  MinusMinus = 145,
  Modifier = 146,
  ModifierAttribute = 147,
  ModifierAttributes = 148,
  ModifierDefinition = 149,
  ModifierInvocation = 150,
  MulDivModExpression = 151,
  NamedArgument = 152,
  NamedArgumentList = 153,
  New = 154,
  NewExpression = 155,
  NumericLiteral = 156,
  OrExpression = 157,
  OrderComparisonExpression = 158,
  Override = 159,
  OverrideSpecifier = 160,
  ParameterDeclaration = 161,
  ParameterList = 162,
  ParenthesisExpression = 163,
  Payable = 164,
  PayableExpression = 165,
  Percent = 166,
  PercentEqual = 167,
  Period = 168,
  Pipe = 169,
  PipeEqual = 170,
  PipePipe = 171,
  Plus = 172,
  PlusEqual = 173,
  PlusPlus = 174,
  PositionalArgumentList = 175,
  Pragma = 176,
  PragmaDirective = 177,
  PrimaryExpression = 178,
  Private = 179,
  Public = 180,
  Pure = 181,
  Question = 182,
  Receive = 183,
  ReceiveFunctionAttribute = 184,
  ReceiveFunctionAttributes = 185,
  ReceiveFunctionDefinition = 186,
  Results = 187,
  Return = 188,
  ReturnStatement = 189,
  Returns = 190,
  Revert = 191,
  RevertStatement = 192,
  SelectedImport = 193,
  SelectingImportDirective = 194,
  Semicolon = 195,
  SeparatedDoubleQuotedAsciiStringLiterals = 196,
  SeparatedErrorParameters = 197,
  SeparatedEventParameters = 198,
  SeparatedExpressions = 199,
  SeparatedIdentifierPaths = 200,
  SeparatedIdentifiers = 201,
  SeparatedInheritanceSpecifiers = 202,
  SeparatedNamedArguments = 203,
  SeparatedParameterDeclarations = 204,
  SeparatedSelectedImports = 205,
  SeparatedVersionPragmaValues = 206,
  SeparatedYulExpressions = 207,
  SeparatedYulIdentifierPaths = 208,
  ShiftExpression = 209,
  SimpleImportDirective = 210,
  SimpleStatement = 211,
  Slash = 212,
  SlashEqual = 213,
  Solidity = 214,
  SourceUnit = 215,
  Star = 216,
  StarEqual = 217,
  StarImportDirective = 218,
  StarStar = 219,
  StateVariableAttribute = 220,
  StateVariableAttributes = 221,
  StateVariableDeclaration = 222,
  Statement = 223,
  Storage = 224,
  String = 225,
  Struct = 226,
  StructDefinition = 227,
  StructMember = 228,
  StructMembers = 229,
  Switch = 230,
  Tilde = 231,
  TrailingTrivia = 232,
  Try = 233,
  TryStatement = 234,
  TupleDeconstructionStatement = 235,
  Type = 236,
  TypeExpression = 237,
  TypeName = 238,
  UnaryPrefixExpression = 239,
  UnarySuffixExpression = 240,
  Unchecked = 241,
  UncheckedBlock = 242,
  UserDefinedValueTypeDefinition = 243,
  Using = 244,
  UsingDirective = 245,
  VariableDeclarationStatement = 246,
  VersionPragma = 247,
  VersionPragmaSpecifier = 248,
  VersionPragmaSpecifiers = 249,
  View = 250,
  Virtual = 251,
  While = 252,
  WhileStatement = 253,
  YulAssignmentStatement = 254,
  YulBlock = 255,
  YulBreakStatement = 256,
  YulContinueStatement = 257,
  YulExpression = 258,
  YulForStatement = 259,
  YulFunctionCall = 260,
  YulFunctionDefinition = 261,
  YulIdentifierPath = 262,
  YulIfStatement = 263,
  YulLeaveStatement = 264,
  YulLiteral = 265,
  YulStatement = 266,
  YulStatements = 267,
  YulSwitchStatement = 268,
  YulVariableDeclaration = 269
}
export const enum ProductionKind {
  ABICoderPragma = 0,
  AddSubExpression = 1,
  AddressType = 2,
  AndExpression = 3,
  ArgumentList = 4,
  ArrayLiteral = 5,
  AsciiEscape = 6,
  AsciiStringLiteral = 7,
  AssemblyFlags = 8,
  AssemblyStatement = 9,
  AssignmentExpression = 10,
  BitAndExpression = 11,
  BitOrExpression = 12,
  BitXOrExpression = 13,
  Block = 14,
  BooleanLiteral = 15,
  BreakStatement = 16,
  CatchClause = 17,
  ConditionalExpression = 18,
  ConstantDefinition = 19,
  ConstructorAttribute = 20,
  ConstructorDefinition = 21,
  ContinueStatement = 22,
  ContractBodyElement = 23,
  ContractDefinition = 24,
  DataLocation = 25,
  DecimalExponent = 26,
  DecimalFloat = 27,
  DecimalInteger = 28,
  DecimalNumber = 29,
  Definition = 30,
  DeleteStatement = 31,
  Directive = 32,
  DoWhileStatement = 33,
  DoubleQuotedAsciiStringLiteral = 34,
  DoubleQuotedUnicodeStringLiteral = 35,
  ElementaryType = 36,
  EmitStatement = 37,
  EndOfFileTrivia = 38,
  EndOfLine = 39,
  EnumDefinition = 40,
  EqualityComparisonExpression = 41,
  ErrorDefinition = 42,
  ErrorParameter = 43,
  EscapeSequence = 44,
  EventDefinition = 45,
  EventParameter = 46,
  ExperimentalPragma = 47,
  ExponentiationExpression = 48,
  Expression = 49,
  ExpressionStatement = 50,
  FallbackFunctionAttribute = 51,
  FallbackFunctionDefinition = 52,
  FixedBytesType = 53,
  ForStatement = 54,
  FunctionAttribute = 55,
  FunctionCallExpression = 56,
  FunctionDefinition = 57,
  FunctionType = 58,
  HexByteEscape = 59,
  HexCharacter = 60,
  HexNumber = 61,
  HexStringLiteral = 62,
  Identifier = 63,
  IdentifierPart = 64,
  IdentifierPath = 65,
  IdentifierStart = 66,
  IfStatement = 67,
  ImportDirective = 68,
  ImportPath = 69,
  IndexAccessExpression = 70,
  InheritanceSpecifier = 71,
  InheritanceSpecifierList = 72,
  InterfaceDefinition = 73,
  Keyword = 74,
  LeadingTrivia = 75,
  LibraryDefinition = 76,
  MappingType = 77,
  MemberAccessExpression = 78,
  ModifierAttribute = 79,
  ModifierDefinition = 80,
  ModifierInvocation = 81,
  MulDivModExpression = 82,
  MultilineComment = 83,
  NamedArgument = 84,
  NamedArgumentList = 85,
  NewExpression = 86,
  NumberUnit = 87,
  NumericLiteral = 88,
  OrExpression = 89,
  OrderComparisonExpression = 90,
  OverrideSpecifier = 91,
  ParameterDeclaration = 92,
  ParameterList = 93,
  ParenthesisExpression = 94,
  PayableExpression = 95,
  PositionalArgumentList = 96,
  PossiblySeparatedPairsOfHexDigits = 97,
  PragmaDirective = 98,
  PrimaryExpression = 99,
  RawIdentifier = 100,
  ReceiveFunctionAttribute = 101,
  ReceiveFunctionDefinition = 102,
  ReservedKeyword = 103,
  ReturnStatement = 104,
  RevertStatement = 105,
  SelectedImport = 106,
  SelectingImportDirective = 107,
  ShiftExpression = 108,
  SignedFixedType = 109,
  SignedIntegerType = 110,
  SimpleImportDirective = 111,
  SimpleStatement = 112,
  SingleLineComment = 113,
  SingleQuotedAsciiStringLiteral = 114,
  SingleQuotedUnicodeStringLiteral = 115,
  SourceUnit = 116,
  StarImportDirective = 117,
  StateVariableAttribute = 118,
  StateVariableDeclaration = 119,
  Statement = 120,
  StructDefinition = 121,
  StructMember = 122,
  TrailingTrivia = 123,
  TryStatement = 124,
  TupleDeconstructionStatement = 125,
  TypeExpression = 126,
  TypeName = 127,
  UnaryPrefixExpression = 128,
  UnarySuffixExpression = 129,
  UncheckedBlock = 130,
  UnicodeEscape = 131,
  UnicodeStringLiteral = 132,
  UnsignedFixedType = 133,
  UnsignedIntegerType = 134,
  UserDefinedValueTypeDefinition = 135,
  UsingDirective = 136,
  VariableDeclarationStatement = 137,
  VersionPragma = 138,
  VersionPragmaOperator = 139,
  VersionPragmaSpecifier = 140,
  VersionPragmaValue = 141,
  WhileStatement = 142,
  Whitespace = 143,
  YulAssignmentStatement = 144,
  YulBlock = 145,
  YulBreakStatement = 146,
  YulContinueStatement = 147,
  YulDecimalNumberLiteral = 148,
  YulExpression = 149,
  YulForStatement = 150,
  YulFunctionCall = 151,
  YulFunctionDefinition = 152,
  YulHexLiteral = 153,
  YulIdentifier = 154,
  YulIdentifierPath = 155,
  YulIfStatement = 156,
  YulKeyword = 157,
  YulLeaveStatement = 158,
  YulLiteral = 159,
  YulStatement = 160,
  YulSwitchStatement = 161,
  YulVariableDeclaration = 162
}
export const enum LexNodeType {
  Chars = 0,
  Choice = 1,
  Sequence = 2,
  Named = 3
}
export interface TokenRange {
  start: number
  end: number
}
export class RuleNode {
  get type(): NodeType.Rule
  get kind(): RuleKind
  children(): (RuleNode | TokenNode | GroupNode)[]
}
export class TokenNode {
  get type(): NodeType.Token
  get kind(): TokenKind
  lexNode(): LexCharsNode | LexChoiceNode | LexSequenceNode | LexNamedNode
  trivia(): (RuleNode | TokenNode | GroupNode)[]
}
export class GroupNode {
  get type(): NodeType.Group
  children(): (RuleNode | TokenNode | GroupNode)[]
}
export class Language {
  constructor(version: string)
  version(): string
  getParser(kind: ProductionKind): Parser
}
export class Parser {
  parse(input: string): ParseOutput
}
export class ParseOutput {
  parseTree(): RuleNode | TokenNode | null
  errorCount(): bigint
  errorsAsStrings(sourceId: string, source: string, withColour: boolean): Array<string>
  isValid(): boolean
}
export class LexCharsNode {
  get type(): LexNodeType.Chars
  get range(): TokenRange
}
export class LexChoiceNode {
  get type(): LexNodeType.Choice
  get range(): TokenRange
  get index(): bigint
  child(): LexCharsNode | LexChoiceNode | LexSequenceNode | LexNamedNode
}
export class LexSequenceNode {
  get type(): LexNodeType.Sequence
  get range(): TokenRange
  children(): (LexCharsNode | LexChoiceNode | LexSequenceNode | LexNamedNode)[]
}
export class LexNamedNode {
  get type(): LexNodeType.Named
  get range(): TokenRange
  get kind(): TokenKind
  child(): LexCharsNode | LexChoiceNode | LexSequenceNode | LexNamedNode
}
