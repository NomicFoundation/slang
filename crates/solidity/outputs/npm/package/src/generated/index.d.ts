// This file is generated automatically by infrastructure scripts. Please don't edit by hand.

// Slang License: https://github.com/NomicFoundation/slang/blob/main/LICENSE
// NAPI-RS License: https://github.com/napi-rs/napi-rs/blob/main/LICENSE

// @ts-nocheck

/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export namespace legacy {
  export interface TextIndex {
    utf8: number;
    utf16: number;
    char: number;
  }
  export interface TextRange {
    start: TextIndex;
    end: TextIndex;
  }
  export enum NodeType {
    Rule = 0,
    Token = 1,
  }
  export class RuleNode {
    get type(): NodeType.Rule;
    get kind(): RuleKind;
    get textLength(): TextIndex;
    get children(): Array<RuleNode | TokenNode>;
  }
  export class TokenNode {
    get type(): NodeType.Token;
    get kind(): TokenKind;
    get textLength(): TextIndex;
    get text(): string;
  }
  export class Cursor {
    get reset(): void;
    get complete(): void;
    clone(): Cursor;
    spawn(): Cursor;
    get isCompleted(): boolean;
    get node(): RuleNode | TokenNode;
    get textOffset(): TextIndex;
    get textRange(): TextRange;
    get pathRuleNodes(): Array<RuleNode>;
    goToNext(): boolean;
    goToNextNonDescendent(): boolean;
    goToPrevious(): boolean;
    goToParent(): boolean;
    goToFirstChild(): boolean;
    goToLastChild(): boolean;
    goToNthChild(childNumber: number): boolean;
    goToNextSibling(): boolean;
    goToPreviousSibling(): boolean;
    findTokenWithKind(kinds: Array<TokenKind>): TokenNode | null;
    findRuleWithKind(kinds: Array<RuleKind>): RuleNode | null;
  }
  export class Language {
    constructor(version: string);
    get version(): string;
    static supportedVersions(): Array<string>;
    parse(productionKind: ProductionKind, input: string): ParseOutput;
  }
  export class ParseOutput {
    get parseTree(): RuleNode | TokenNode | null;
    get errors(): Array<ParseError>;
    get isValid(): boolean;
  }
  export class ParseError {
    get textRange(): TextRange;
    toErrorReport(sourceId: string, source: string, withColour: boolean): string;
  }
}
export namespace syntax$nodes {
  export enum ProductionKind {
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ABICoderPragma = ABICODER_KEYWORD IDENTIFIER;
     * ```
     */
    ABICoderPragma = "ABICoderPragma",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ABICODER_KEYWORD = "abicoder";
     * ```
     */
    AbicoderKeyword = "AbicoderKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ABSTRACT_KEYWORD = "abstract";
     * ```
     */
    AbstractKeyword = "AbstractKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ADDRESS_KEYWORD = "address";
     * ```
     */
    AddressKeyword = "AddressKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AddressType = (ADDRESS_KEYWORD PAYABLE_KEYWORD?) | PAYABLE_KEYWORD;
     * ```
     */
    AddressType = "AddressType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND = "&";
     * ```
     */
    Ampersand = "Ampersand",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND_AMPERSAND = "&&";
     * ```
     */
    AmpersandAmpersand = "AmpersandAmpersand",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND_EQUAL = "&=";
     * ```
     */
    AmpersandEqual = "AmpersandEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ANONYMOUS_KEYWORD = "anonymous";
     * ```
     */
    AnonymousKeyword = "AnonymousKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArgumentsDeclaration = OPEN_PAREN (PositionalArgumentsList | NamedArgumentsDeclaration)? CLOSE_PAREN;
     * ```
     */
    ArgumentsDeclaration = "ArgumentsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArrayExpression = OPEN_BRACKET ArrayValuesList CLOSE_BRACKET;
     * ```
     */
    ArrayExpression = "ArrayExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArrayValuesList = Expression (COMMA Expression)*;
     * ```
     */
    ArrayValuesList = "ArrayValuesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AS_KEYWORD = "as";
     * ```
     */
    AsKeyword = "AsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASCII_STRING_LITERAL = «SINGLE_QUOTED_ASCII_STRING_LITERAL»
     *                      | «DOUBLE_QUOTED_ASCII_STRING_LITERAL»;
     * ```
     */
    AsciiStringLiteral = "AsciiStringLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AsciiStringLiteralsList = ASCII_STRING_LITERAL+;
     * ```
     */
    AsciiStringLiteralsList = "AsciiStringLiteralsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AssemblyFlagsList = ASCII_STRING_LITERAL (COMMA ASCII_STRING_LITERAL)*;
     * ```
     */
    AssemblyFlagsList = "AssemblyFlagsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASSEMBLY_KEYWORD = "assembly";
     * ```
     */
    AssemblyKeyword = "AssemblyKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AssemblyStatement = ASSEMBLY_KEYWORD ASCII_STRING_LITERAL? (OPEN_PAREN AssemblyFlagsList CLOSE_PAREN)? YulBlock;
     * ```
     */
    AssemblyStatement = "AssemblyStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK = "*";
     * ```
     */
    Asterisk = "Asterisk",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK_ASTERISK = "**";
     * ```
     */
    AsteriskAsterisk = "AsteriskAsterisk",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK_EQUAL = "*=";
     * ```
     */
    AsteriskEqual = "AsteriskEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BANG = "!";
     * ```
     */
    Bang = "Bang",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BANG_EQUAL = "!=";
     * ```
     */
    BangEqual = "BangEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR = "|";
     * ```
     */
    Bar = "Bar",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR_BAR = "||";
     * ```
     */
    BarBar = "BarBar",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR_EQUAL = "|=";
     * ```
     */
    BarEqual = "BarEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * Block = OPEN_BRACE StatementsList? CLOSE_BRACE;
     * ```
     */
    Block = "Block",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BOOL_KEYWORD = "bool";
     * ```
     */
    BoolKeyword = "BoolKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BREAK_KEYWORD = "break";
     * ```
     */
    BreakKeyword = "BreakKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BreakStatement = BREAK_KEYWORD SEMICOLON;
     * ```
     */
    BreakStatement = "BreakStatement",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * BYTE_KEYWORD = "byte";
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ByteKeyword = "ByteKeyword",
    /**
     * ## v0.5.0
     *
     * ```ebnf
     * CALLDATA_KEYWORD = "calldata";
     * ```
     */
    CalldataKeyword = "CalldataKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CARET = "^";
     * ```
     */
    Caret = "Caret",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CARET_EQUAL = "^=";
     * ```
     */
    CaretEqual = "CaretEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CASE_KEYWORD = "case";
     * ```
     */
    CaseKeyword = "CaseKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClause = CATCH_KEYWORD CatchClauseError? Block;
     * ```
     */
    CatchClause = "CatchClause",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClauseError = IDENTIFIER? ParametersDeclaration;
     * ```
     */
    CatchClauseError = "CatchClauseError",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClausesList = CatchClause+;
     * ```
     */
    CatchClausesList = "CatchClausesList",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CATCH_KEYWORD = "catch";
     * ```
     */
    CatchKeyword = "CatchKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_BRACE = "}";
     * ```
     */
    CloseBrace = "CloseBrace",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_BRACKET = "]";
     * ```
     */
    CloseBracket = "CloseBracket",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_PAREN = ")";
     * ```
     */
    CloseParen = "CloseParen",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COLON = ":";
     * ```
     */
    Colon = "Colon",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COLON_EQUAL = ":=";
     * ```
     */
    ColonEqual = "ColonEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COMMA = ",";
     * ```
     */
    Comma = "Comma",
    /**
     * ## v0.7.4
     *
     * ```ebnf
     * ConstantDefinition = TypeName CONSTANT_KEYWORD IDENTIFIER EQUAL Expression SEMICOLON;
     * ```
     */
    ConstantDefinition = "ConstantDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONSTANT_KEYWORD = "constant";
     * ```
     */
    ConstantKeyword = "ConstantKeyword",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * ConstructorAttributesList = «ConstructorAttribute»+;
     * ```
     */
    ConstructorAttributesList = "ConstructorAttributesList",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * ConstructorDefinition = CONSTRUCTOR_KEYWORD ParametersDeclaration ConstructorAttributesList? Block;
     * ```
     */
    ConstructorDefinition = "ConstructorDefinition",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * CONSTRUCTOR_KEYWORD = "constructor";
     * ```
     */
    ConstructorKeyword = "ConstructorKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONTINUE_KEYWORD = "continue";
     * ```
     */
    ContinueKeyword = "ContinueKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ContinueStatement = CONTINUE_KEYWORD SEMICOLON;
     * ```
     */
    ContinueStatement = "ContinueStatement",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * ContractDefinition = CONTRACT_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE ContractMembersList? CLOSE_BRACE;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * ContractDefinition = ABSTRACT_KEYWORD? CONTRACT_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE ContractMembersList? CLOSE_BRACE;
     * ```
     */
    ContractDefinition = "ContractDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONTRACT_KEYWORD = "contract";
     * ```
     */
    ContractKeyword = "ContractKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ContractMembersList = «ContractMember»+;
     * ```
     */
    ContractMembersList = "ContractMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DAYS_KEYWORD = "days";
     * ```
     */
    DaysKeyword = "DaysKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * DECIMAL_LITERAL = ((«DECIMAL_DIGITS» ("." «DECIMAL_DIGITS»?)?) | ("." «DECIMAL_DIGITS»)) «DECIMAL_EXPONENT»?;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * DECIMAL_LITERAL = ((«DECIMAL_DIGITS» ("." «DECIMAL_DIGITS»)?) | ("." «DECIMAL_DIGITS»)) «DECIMAL_EXPONENT»?;
     * ```
     */
    DecimalLiteral = "DecimalLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImport = OPEN_BRACE DeconstructionImportSymbolsList CLOSE_BRACE FROM_KEYWORD ASCII_STRING_LITERAL;
     * ```
     */
    DeconstructionImport = "DeconstructionImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImportSymbol = IDENTIFIER (AS_KEYWORD IDENTIFIER)?;
     * ```
     */
    DeconstructionImportSymbol = "DeconstructionImportSymbol",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImportSymbolsList = DeconstructionImportSymbol (COMMA DeconstructionImportSymbol)*;
     * ```
     */
    DeconstructionImportSymbolsList = "DeconstructionImportSymbolsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DEFAULT_KEYWORD = "default";
     * ```
     */
    DefaultKeyword = "DefaultKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DELETE_KEYWORD = "delete";
     * ```
     */
    DeleteKeyword = "DeleteKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeleteStatement = DELETE_KEYWORD Expression SEMICOLON;
     * ```
     */
    DeleteStatement = "DeleteStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DO_KEYWORD = "do";
     * ```
     */
    DoKeyword = "DoKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DoWhileStatement = DO_KEYWORD Statement WHILE_KEYWORD OPEN_PAREN Expression CLOSE_PAREN SEMICOLON;
     * ```
     */
    DoWhileStatement = "DoWhileStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ELSE_KEYWORD = "else";
     * ```
     */
    ElseKeyword = "ElseKeyword",
    /**
     * ## v0.4.21
     *
     * ```ebnf
     * EMIT_KEYWORD = "emit";
     * ```
     */
    EmitKeyword = "EmitKeyword",
    /**
     * ## v0.4.21
     *
     * ```ebnf
     * EmitStatement = EMIT_KEYWORD IdentifierPath ArgumentsDeclaration SEMICOLON;
     * ```
     */
    EmitStatement = "EmitStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EndOfFileTrivia = (WHITESPACE | END_OF_LINE | MULTILINE_COMMENT | SINGLE_LINE_COMMENT)+;
     * ```
     */
    EndOfFileTrivia = "EndOfFileTrivia",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * END_OF_LINE = "
"? "
    ";
     * ```
     */
    EndOfLine = "EndOfLine",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EnumDefinition = ENUM_KEYWORD IDENTIFIER OPEN_BRACE IdentifiersList? CLOSE_BRACE;
     * ```
     */
    EnumDefinition = "EnumDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ENUM_KEYWORD = "enum";
     * ```
     */
    EnumKeyword = "EnumKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL = "=";
     * ```
     */
    Equal = "Equal",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL_EQUAL = "==";
     * ```
     */
    EqualEqual = "EqualEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL_GREATER_THAN = "=>";
     * ```
     */
    EqualGreaterThan = "EqualGreaterThan",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorDefinition = ERROR_KEYWORD IDENTIFIER OPEN_PAREN ErrorParametersList? CLOSE_PAREN SEMICOLON;
     * ```
     */
    ErrorDefinition = "ErrorDefinition",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ERROR_KEYWORD = "error";
     * ```
     */
    ErrorKeyword = "ErrorKeyword",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorParameter = TypeName IDENTIFIER?;
     * ```
     */
    ErrorParameter = "ErrorParameter",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorParametersList = ErrorParameter (COMMA ErrorParameter)*;
     * ```
     */
    ErrorParametersList = "ErrorParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ETHER_KEYWORD = "ether";
     * ```
     */
    EtherKeyword = "EtherKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventDefinition = EVENT_KEYWORD IDENTIFIER OPEN_PAREN EventParametersList? CLOSE_PAREN ANONYMOUS_KEYWORD? SEMICOLON;
     * ```
     */
    EventDefinition = "EventDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EVENT_KEYWORD = "event";
     * ```
     */
    EventKeyword = "EventKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventParameter = TypeName INDEXED_KEYWORD? IDENTIFIER?;
     * ```
     */
    EventParameter = "EventParameter",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventParametersList = EventParameter (COMMA EventParameter)*;
     * ```
     */
    EventParametersList = "EventParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EXPERIMENTAL_KEYWORD = "experimental";
     * ```
     */
    ExperimentalKeyword = "ExperimentalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ExperimentalPragma = EXPERIMENTAL_KEYWORD (ASCII_STRING_LITERAL | IDENTIFIER);
     * ```
     */
    ExperimentalPragma = "ExperimentalPragma",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * Expression = BinaryExpression (* Expression «AssignmentOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | ConditionalExpression (* Expression «ConditionalOperator» *) (* Unary Operator, Postfix *)
     *            | BinaryExpression (* Expression «OrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «EqualityComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «OrderComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseXOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseAndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ShiftOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AddSubOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «MulDivModOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ExponentiationOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | UnaryPostfixExpression (* Expression «UnaryPostfixOperator» *) (* Unary Operator, Postfix *)
     *            | UnaryPrefixExpression (* «UnaryPrefixOperator» Expression *) (* Unary Operator, Prefix *)
     *            | FunctionCallExpression (* Expression «FunctionCallOperator» *) (* Unary Operator, Postfix *)
     *            | MemberAccessExpression (* Expression «MemberAccessOperator» *) (* Unary Operator, Postfix *)
     *            | IndexAccessExpression (* Expression «IndexAccessOperator» *) (* Unary Operator, Postfix *)
     *            | «PrimaryExpression»;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * Expression = BinaryExpression (* Expression «AssignmentOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | ConditionalExpression (* Expression «ConditionalOperator» *) (* Unary Operator, Postfix *)
     *            | BinaryExpression (* Expression «OrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «EqualityComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «OrderComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseXOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseAndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ShiftOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AddSubOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «MulDivModOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ExponentiationOperator» Expression *) (* Binary Operator, Right Associative *)
     *            | UnaryPostfixExpression (* Expression «UnaryPostfixOperator» *) (* Unary Operator, Postfix *)
     *            | UnaryPrefixExpression (* «UnaryPrefixOperator» Expression *) (* Unary Operator, Prefix *)
     *            | FunctionCallExpression (* Expression «FunctionCallOperator» *) (* Unary Operator, Postfix *)
     *            | MemberAccessExpression (* Expression «MemberAccessOperator» *) (* Unary Operator, Postfix *)
     *            | IndexAccessExpression (* Expression «IndexAccessOperator» *) (* Unary Operator, Postfix *)
     *            | «PrimaryExpression»;
     * ```
     */
    Expression = "Expression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ExpressionStatement = Expression SEMICOLON;
     * ```
     */
    ExpressionStatement = "ExpressionStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EXTERNAL_KEYWORD = "external";
     * ```
     */
    ExternalKeyword = "ExternalKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * FallbackFunctionAttributesList = «FallbackFunctionAttribute»+;
     * ```
     */
    FallbackFunctionAttributesList = "FallbackFunctionAttributesList",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * FallbackFunctionDefinition = FALLBACK_KEYWORD ParametersDeclaration FallbackFunctionAttributesList? ReturnsDeclaration? (SEMICOLON | Block);
     * ```
     */
    FallbackFunctionDefinition = "FallbackFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FALLBACK_KEYWORD = "fallback";
     * ```
     */
    FallbackKeyword = "FallbackKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FALSE_KEYWORD = "false";
     * ```
     */
    FalseKeyword = "FalseKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * FINNEY_KEYWORD = "finney";
     * ```
     *
     * ## v0.7.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    FinneyKeyword = "FinneyKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FIXED_BYTES_TYPE = "bytes" «FIXED_BYTES_TYPE_SIZE»;
     * ```
     */
    FixedBytesType = "FixedBytesType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FOR_KEYWORD = "for";
     * ```
     */
    ForKeyword = "ForKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ForStatement = FOR_KEYWORD OPEN_PAREN («SimpleStatement» | SEMICOLON) (ExpressionStatement | SEMICOLON) Expression? CLOSE_PAREN Statement;
     * ```
     */
    ForStatement = "ForStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FROM_KEYWORD = "from";
     * ```
     */
    FromKeyword = "FromKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionAttributesList = «FunctionAttribute»+;
     * ```
     */
    FunctionAttributesList = "FunctionAttributesList",
    /**
     * ## v0.6.2
     *
     * ```ebnf
     * FunctionCallOptions = NamedArgumentsDeclaration+;
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * FunctionCallOptions = NamedArgumentsDeclaration;
     * ```
     */
    FunctionCallOptions = "FunctionCallOptions",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionDefinition = FUNCTION_KEYWORD (IDENTIFIER | FALLBACK_KEYWORD | RECEIVE_KEYWORD) ParametersDeclaration FunctionAttributesList? ReturnsDeclaration? (SEMICOLON | Block);
     * ```
     */
    FunctionDefinition = "FunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FUNCTION_KEYWORD = "function";
     * ```
     */
    FunctionKeyword = "FunctionKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionType = FUNCTION_KEYWORD ParametersDeclaration FunctionTypeAttributesList? ReturnsDeclaration?;
     * ```
     */
    FunctionType = "FunctionType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionTypeAttributesList = «FunctionTypeAttribute»+;
     * ```
     */
    FunctionTypeAttributesList = "FunctionTypeAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GLOBAL_KEYWORD = "global";
     * ```
     */
    GlobalKeyword = "GlobalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN = ">";
     * ```
     */
    GreaterThan = "GreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_EQUAL = ">=";
     * ```
     */
    GreaterThanEqual = "GreaterThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN = ">>";
     * ```
     */
    GreaterThanGreaterThan = "GreaterThanGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_EQUAL = ">>=";
     * ```
     */
    GreaterThanGreaterThanEqual = "GreaterThanGreaterThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_GREATER_THAN = ">>>";
     * ```
     */
    GreaterThanGreaterThanGreaterThan = "GreaterThanGreaterThanGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_GREATER_THAN_EQUAL = ">>>=";
     * ```
     */
    GreaterThanGreaterThanGreaterThanEqual = "GreaterThanGreaterThanGreaterThanEqual",
    /**
     * ## v0.6.11
     *
     * ```ebnf
     * GWEI_KEYWORD = "gwei";
     * ```
     */
    GweiKeyword = "GweiKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * HEX_LITERAL = ("0x" | "0X") «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * HEX_LITERAL = "0x" «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
     * ```
     */
    HexLiteral = "HexLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HEX_STRING_LITERAL = «SINGLE_QUOTED_HEX_STRING_LITERAL»
     *                    | «DOUBLE_QUOTED_HEX_STRING_LITERAL»;
     * ```
     */
    HexStringLiteral = "HexStringLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HexStringLiteralsList = HEX_STRING_LITERAL+;
     * ```
     */
    HexStringLiteralsList = "HexStringLiteralsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HOURS_KEYWORD = "hours";
     * ```
     */
    HoursKeyword = "HoursKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * IDENTIFIER = «RAW_IDENTIFIER» - («KEYWORD_IN_ANY_VERSION» | «KEYWORD_IN_SOME_VERSION» | «RESERVED_WORD_IN_ANY_VERSION»);
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * IDENTIFIER = «RAW_IDENTIFIER» - («KEYWORD_IN_ANY_VERSION» | «KEYWORD_IN_SOME_VERSION» | «RESERVED_WORD_IN_ANY_VERSION» | «RESERVED_WORD_IN_SOME_VERSION»);
     * ```
     */
    Identifier = "Identifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifierPath = IDENTIFIER (PERIOD IDENTIFIER)*;
     * ```
     */
    IdentifierPath = "IdentifierPath",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifierPathsList = IdentifierPath (COMMA IdentifierPath)*;
     * ```
     */
    IdentifierPathsList = "IdentifierPathsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifiersList = IDENTIFIER (COMMA IDENTIFIER)*;
     * ```
     */
    IdentifiersList = "IdentifiersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IF_KEYWORD = "if";
     * ```
     */
    IfKeyword = "IfKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IfStatement = IF_KEYWORD OPEN_PAREN Expression CLOSE_PAREN Statement (ELSE_KEYWORD Statement)?;
     * ```
     */
    IfStatement = "IfStatement",
    /**
     * ## v0.6.5
     *
     * ```ebnf
     * IMMUTABLE_KEYWORD = "immutable";
     * ```
     */
    ImmutableKeyword = "ImmutableKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ImportDirective = IMPORT_KEYWORD (PathImport | NamedImport | DeconstructionImport) SEMICOLON;
     * ```
     */
    ImportDirective = "ImportDirective",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IMPORT_KEYWORD = "import";
     * ```
     */
    ImportKeyword = "ImportKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INDEXED_KEYWORD = "indexed";
     * ```
     */
    IndexedKeyword = "IndexedKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceSpecifier = IS_KEYWORD InheritanceTypesList;
     * ```
     */
    InheritanceSpecifier = "InheritanceSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceType = IdentifierPath ArgumentsDeclaration?;
     * ```
     */
    InheritanceType = "InheritanceType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceTypesList = InheritanceType (COMMA InheritanceType)*;
     * ```
     */
    InheritanceTypesList = "InheritanceTypesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InterfaceDefinition = INTERFACE_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE InterfaceMembersList? CLOSE_BRACE;
     * ```
     */
    InterfaceDefinition = "InterfaceDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INTERFACE_KEYWORD = "interface";
     * ```
     */
    InterfaceKeyword = "InterfaceKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InterfaceMembersList = «ContractMember»+;
     * ```
     */
    InterfaceMembersList = "InterfaceMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INTERNAL_KEYWORD = "internal";
     * ```
     */
    InternalKeyword = "InternalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IS_KEYWORD = "is";
     * ```
     */
    IsKeyword = "IsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LeadingTrivia = (WHITESPACE | END_OF_LINE | MULTILINE_COMMENT | SINGLE_LINE_COMMENT)+;
     * ```
     */
    LeadingTrivia = "LeadingTrivia",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * LEAVE_KEYWORD = "leave";
     * ```
     */
    LeaveKeyword = "LeaveKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN = "<";
     * ```
     */
    LessThan = "LessThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_EQUAL = "<=";
     * ```
     */
    LessThanEqual = "LessThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_LESS_THAN = "<<";
     * ```
     */
    LessThanLessThan = "LessThanLessThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_LESS_THAN_EQUAL = "<<=";
     * ```
     */
    LessThanLessThanEqual = "LessThanLessThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LET_KEYWORD = "let";
     * ```
     */
    LetKeyword = "LetKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LibraryDefinition = LIBRARY_KEYWORD IDENTIFIER OPEN_BRACE LibraryMembersList? CLOSE_BRACE;
     * ```
     */
    LibraryDefinition = "LibraryDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LIBRARY_KEYWORD = "library";
     * ```
     */
    LibraryKeyword = "LibraryKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LibraryMembersList = «ContractMember»+;
     * ```
     */
    LibraryMembersList = "LibraryMembersList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * MappingKeyType = «ElementaryType» | IdentifierPath;
     * ```
     *
     * ## v0.8.18
     *
     * ```ebnf
     * MappingKeyType = («ElementaryType» | IdentifierPath) IDENTIFIER?;
     * ```
     */
    MappingKeyType = "MappingKeyType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MAPPING_KEYWORD = "mapping";
     * ```
     */
    MappingKeyword = "MappingKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MappingType = MAPPING_KEYWORD OPEN_PAREN MappingKeyType EQUAL_GREATER_THAN MappingValueType CLOSE_PAREN;
     * ```
     */
    MappingType = "MappingType",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * MappingValueType = TypeName;
     * ```
     *
     * ## v0.8.18
     *
     * ```ebnf
     * MappingValueType = TypeName IDENTIFIER?;
     * ```
     */
    MappingValueType = "MappingValueType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MEMORY_KEYWORD = "memory";
     * ```
     */
    MemoryKeyword = "MemoryKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS = "-";
     * ```
     */
    Minus = "Minus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_EQUAL = "-=";
     * ```
     */
    MinusEqual = "MinusEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_GREATER_THAN = "->";
     * ```
     */
    MinusGreaterThan = "MinusGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_MINUS = "--";
     * ```
     */
    MinusMinus = "MinusMinus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUTES_KEYWORD = "minutes";
     * ```
     */
    MinutesKeyword = "MinutesKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierAttributesList = «ModifierAttribute»+;
     * ```
     */
    ModifierAttributesList = "ModifierAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierDefinition = MODIFIER_KEYWORD IDENTIFIER ParametersDeclaration? ModifierAttributesList? (SEMICOLON | Block);
     * ```
     */
    ModifierDefinition = "ModifierDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierInvocation = IdentifierPath ArgumentsDeclaration?;
     * ```
     */
    ModifierInvocation = "ModifierInvocation",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MODIFIER_KEYWORD = "modifier";
     * ```
     */
    ModifierKeyword = "ModifierKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MULTILINE_COMMENT = "/" "*" (!"*" | "*")* "*" "/";
     * ```
     */
    MultilineComment = "MultilineComment",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgument = IDENTIFIER COLON Expression;
     * ```
     */
    NamedArgument = "NamedArgument",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgumentsDeclaration = OPEN_BRACE NamedArgumentsList? CLOSE_BRACE;
     * ```
     */
    NamedArgumentsDeclaration = "NamedArgumentsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgumentsList = NamedArgument (COMMA NamedArgument)*;
     * ```
     */
    NamedArgumentsList = "NamedArgumentsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedImport = ASTERISK AS_KEYWORD IDENTIFIER FROM_KEYWORD ASCII_STRING_LITERAL;
     * ```
     */
    NamedImport = "NamedImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NewExpression = NEW_KEYWORD TypeName;
     * ```
     */
    NewExpression = "NewExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NEW_KEYWORD = "new";
     * ```
     */
    NewKeyword = "NewKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * NumericExpression = (HEX_LITERAL | DECIMAL_LITERAL) «NumberUnit»?;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * NumericExpression = HEX_LITERAL | (DECIMAL_LITERAL «NumberUnit»?);
     * ```
     */
    NumericExpression = "NumericExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_BRACE = "{";
     * ```
     */
    OpenBrace = "OpenBrace",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_BRACKET = "[";
     * ```
     */
    OpenBracket = "OpenBracket",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_PAREN = "(";
     * ```
     */
    OpenParen = "OpenParen",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OVERRIDE_KEYWORD = "override";
     * ```
     */
    OverrideKeyword = "OverrideKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OverrideSpecifier = OVERRIDE_KEYWORD (OPEN_PAREN IdentifierPathsList? CLOSE_PAREN)?;
     * ```
     */
    OverrideSpecifier = "OverrideSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * Parameter = TypeName «DataLocation»? IDENTIFIER?;
     * ```
     */
    Parameter = "Parameter",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ParametersDeclaration = OPEN_PAREN ParametersList? CLOSE_PAREN;
     * ```
     */
    ParametersDeclaration = "ParametersDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ParametersList = Parameter (COMMA Parameter)*;
     * ```
     */
    ParametersList = "ParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PathImport = ASCII_STRING_LITERAL (AS_KEYWORD IDENTIFIER)?;
     * ```
     */
    PathImport = "PathImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PAYABLE_KEYWORD = "payable";
     * ```
     */
    PayableKeyword = "PayableKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERCENT = "%";
     * ```
     */
    Percent = "Percent",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERCENT_EQUAL = "%=";
     * ```
     */
    PercentEqual = "PercentEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERIOD = ".";
     * ```
     */
    Period = "Period",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS = "+";
     * ```
     */
    Plus = "Plus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS_EQUAL = "+=";
     * ```
     */
    PlusEqual = "PlusEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS_PLUS = "++";
     * ```
     */
    PlusPlus = "PlusPlus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PositionalArgumentsList = Expression (COMMA Expression)*;
     * ```
     */
    PositionalArgumentsList = "PositionalArgumentsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PragmaDirective = PRAGMA_KEYWORD (ABICoderPragma | ExperimentalPragma | VersionPragma) SEMICOLON;
     * ```
     */
    PragmaDirective = "PragmaDirective",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PRAGMA_KEYWORD = "pragma";
     * ```
     */
    PragmaKeyword = "PragmaKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PRIVATE_KEYWORD = "private";
     * ```
     */
    PrivateKeyword = "PrivateKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PUBLIC_KEYWORD = "public";
     * ```
     */
    PublicKeyword = "PublicKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PURE_KEYWORD = "pure";
     * ```
     */
    PureKeyword = "PureKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * QUESTION_MARK = "?";
     * ```
     */
    QuestionMark = "QuestionMark",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ReceiveFunctionAttributesList = «ReceiveFunctionAttribute»+;
     * ```
     */
    ReceiveFunctionAttributesList = "ReceiveFunctionAttributesList",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ReceiveFunctionDefinition = RECEIVE_KEYWORD ParametersDeclaration ReceiveFunctionAttributesList? (SEMICOLON | Block);
     * ```
     */
    ReceiveFunctionDefinition = "ReceiveFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RECEIVE_KEYWORD = "receive";
     * ```
     */
    ReceiveKeyword = "ReceiveKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RETURN_KEYWORD = "return";
     * ```
     */
    ReturnKeyword = "ReturnKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ReturnStatement = RETURN_KEYWORD Expression? SEMICOLON;
     * ```
     */
    ReturnStatement = "ReturnStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ReturnsDeclaration = RETURNS_KEYWORD ParametersDeclaration;
     * ```
     */
    ReturnsDeclaration = "ReturnsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RETURNS_KEYWORD = "returns";
     * ```
     */
    ReturnsKeyword = "ReturnsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * REVERT_KEYWORD = "revert";
     * ```
     */
    RevertKeyword = "RevertKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RevertStatement = REVERT_KEYWORD IdentifierPath? ArgumentsDeclaration SEMICOLON;
     * ```
     */
    RevertStatement = "RevertStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SECONDS_KEYWORD = "seconds";
     * ```
     */
    SecondsKeyword = "SecondsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SEMICOLON = ";";
     * ```
     */
    Semicolon = "Semicolon",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SIGNED_FIXED_TYPE = "fixed" «FIXED_TYPE_SIZE»?;
     * ```
     */
    SignedFixedType = "SignedFixedType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SIGNED_INTEGER_TYPE = "int" «INTEGER_TYPE_SIZE»?;
     * ```
     */
    SignedIntegerType = "SignedIntegerType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SINGLE_LINE_COMMENT = "//" (!("
" | "
    "))*;
     * ```
     */
    SingleLineComment = "SingleLineComment",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SLASH = "/";
     * ```
     */
    Slash = "Slash",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SLASH_EQUAL = "/=";
     * ```
     */
    SlashEqual = "SlashEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SOLIDITY_KEYWORD = "solidity";
     * ```
     */
    SolidityKeyword = "SolidityKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SourceUnit = SourceUnitMembersList? EndOfFileTrivia?;
     * ```
     */
    SourceUnit = "SourceUnit",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SourceUnitMembersList = «SourceUnitMember»+;
     * ```
     */
    SourceUnitMembersList = "SourceUnitMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StateVariableAttributesList = «StateVariableAttribute»+;
     * ```
     */
    StateVariableAttributesList = "StateVariableAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StateVariableDefinition = TypeName StateVariableAttributesList? IDENTIFIER (EQUAL Expression)? SEMICOLON;
     * ```
     */
    StateVariableDefinition = "StateVariableDefinition",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * Statement = «SimpleStatement»
     *           | «ControlStatement»
     *           | AssemblyStatement
     *           | Block;
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * Statement = «SimpleStatement»
     *           | «ControlStatement»
     *           | AssemblyStatement
     *           | Block
     *           | UncheckedBlock;
     * ```
     */
    Statement = "Statement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StatementsList = Statement+;
     * ```
     */
    StatementsList = "StatementsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STORAGE_KEYWORD = "storage";
     * ```
     */
    StorageKeyword = "StorageKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STRING_KEYWORD = "string";
     * ```
     */
    StringKeyword = "StringKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructDefinition = STRUCT_KEYWORD IDENTIFIER OPEN_BRACE StructMembersList? CLOSE_BRACE;
     * ```
     */
    StructDefinition = "StructDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STRUCT_KEYWORD = "struct";
     * ```
     */
    StructKeyword = "StructKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructMember = TypeName IDENTIFIER SEMICOLON;
     * ```
     */
    StructMember = "StructMember",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructMembersList = StructMember+;
     * ```
     */
    StructMembersList = "StructMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SWITCH_KEYWORD = "switch";
     * ```
     */
    SwitchKeyword = "SwitchKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * SZABO_KEYWORD = "szabo";
     * ```
     *
     * ## v0.7.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    SzaboKeyword = "SzaboKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * THROW_KEYWORD = "throw";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ThrowKeyword = "ThrowKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * ThrowStatement = THROW_KEYWORD SEMICOLON;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ThrowStatement = "ThrowStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TILDE = "~";
     * ```
     */
    Tilde = "Tilde",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TrailingTrivia = WHITESPACE? SINGLE_LINE_COMMENT? END_OF_LINE;
     * ```
     */
    TrailingTrivia = "TrailingTrivia",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TRUE_KEYWORD = "true";
     * ```
     */
    TrueKeyword = "TrueKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * TRY_KEYWORD = "try";
     * ```
     */
    TryKeyword = "TryKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * TryStatement = TRY_KEYWORD Expression ReturnsDeclaration? Block CatchClausesList;
     * ```
     */
    TryStatement = "TryStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleDeconstructionStatement = OPEN_PAREN TupleMembersList? CLOSE_PAREN EQUAL Expression SEMICOLON;
     * ```
     */
    TupleDeconstructionStatement = "TupleDeconstructionStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleExpression = OPEN_PAREN TupleValuesList CLOSE_PAREN;
     * ```
     */
    TupleExpression = "TupleExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleMember = ((TypeName «DataLocation»? IDENTIFIER) | («DataLocation»? IDENTIFIER))?;
     * ```
     */
    TupleMember = "TupleMember",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleMembersList = TupleMember (COMMA TupleMember)*;
     * ```
     */
    TupleMembersList = "TupleMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleValuesList = Expression? (COMMA Expression?)*;
     * ```
     */
    TupleValuesList = "TupleValuesList",
    /**
     * ## v0.5.3
     *
     * ```ebnf
     * TypeExpression = TYPE_KEYWORD OPEN_PAREN TypeName CLOSE_PAREN;
     * ```
     */
    TypeExpression = "TypeExpression",
    /**
     * ## v0.5.3
     *
     * ```ebnf
     * TYPE_KEYWORD = "type";
     * ```
     */
    TypeKeyword = "TypeKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TypeName = ArrayTypeName (* TypeName «ArrayTypeNameOperator» *) (* Unary Operator, Postfix *)
     *          | FunctionType
     *          | MappingType
     *          | «ElementaryType»
     *          | IdentifierPath;
     * ```
     */
    TypeName = "TypeName",
    /**
     * ## v0.8.0
     *
     * ```ebnf
     * UncheckedBlock = UNCHECKED_KEYWORD Block;
     * ```
     */
    UncheckedBlock = "UncheckedBlock",
    /**
     * ## v0.8.0
     *
     * ```ebnf
     * UNCHECKED_KEYWORD = "unchecked";
     * ```
     */
    UncheckedKeyword = "UncheckedKeyword",
    /**
     * ## v0.7.0
     *
     * ```ebnf
     * UNICODE_STRING_LITERAL = «SINGLE_QUOTED_UNICODE_STRING_LITERAL»
     *                        | «DOUBLE_QUOTED_UNICODE_STRING_LITERAL»;
     * ```
     */
    UnicodeStringLiteral = "UnicodeStringLiteral",
    /**
     * ## v0.7.0
     *
     * ```ebnf
     * UnicodeStringLiteralsList = UNICODE_STRING_LITERAL+;
     * ```
     */
    UnicodeStringLiteralsList = "UnicodeStringLiteralsList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnnamedFunctionAttributesList = «UnnamedFunctionAttribute»+;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    UnnamedFunctionAttributesList = "UnnamedFunctionAttributesList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnnamedFunctionDefinition = FUNCTION_KEYWORD ParametersDeclaration UnnamedFunctionAttributesList? (SEMICOLON | Block);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    UnnamedFunctionDefinition = "UnnamedFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UNSIGNED_FIXED_TYPE = "ufixed" «FIXED_TYPE_SIZE»?;
     * ```
     */
    UnsignedFixedType = "UnsignedFixedType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UNSIGNED_INTEGER_TYPE = "uint" «INTEGER_TYPE_SIZE»?;
     * ```
     */
    UnsignedIntegerType = "UnsignedIntegerType",
    /**
     * ## v0.8.8
     *
     * ```ebnf
     * UserDefinedValueTypeDefinition = TYPE_KEYWORD IDENTIFIER IS_KEYWORD «ElementaryType» SEMICOLON;
     * ```
     */
    UserDefinedValueTypeDefinition = "UserDefinedValueTypeDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirective = USING_KEYWORD (UsingDirectivePath | UsingDirectiveDeconstruction) FOR_KEYWORD (ASTERISK | TypeName) GLOBAL_KEYWORD? SEMICOLON;
     * ```
     */
    UsingDirective = "UsingDirective",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectiveDeconstruction = OPEN_BRACE UsingDirectiveSymbolsList CLOSE_BRACE;
     * ```
     */
    UsingDirectiveDeconstruction = "UsingDirectiveDeconstruction",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectivePath = IdentifierPath;
     * ```
     */
    UsingDirectivePath = "UsingDirectivePath",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UsingDirectiveSymbol = IdentifierPath;
     * ```
     *
     * ## v0.8.19
     *
     * ```ebnf
     * UsingDirectiveSymbol = IdentifierPath (AS_KEYWORD «UsingDirectiveOperator»)?;
     * ```
     */
    UsingDirectiveSymbol = "UsingDirectiveSymbol",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectiveSymbolsList = UsingDirectiveSymbol (COMMA UsingDirectiveSymbol)*;
     * ```
     */
    UsingDirectiveSymbolsList = "UsingDirectiveSymbolsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * USING_KEYWORD = "using";
     * ```
     */
    UsingKeyword = "UsingKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * VAR_KEYWORD = "var";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    VarKeyword = "VarKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * VariableDeclaration = (VAR_KEYWORD | TypeName) «DataLocation»? IDENTIFIER;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * VariableDeclaration = TypeName «DataLocation»? IDENTIFIER;
     * ```
     */
    VariableDeclaration = "VariableDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VariableDeclarationStatement = VariableDeclaration (EQUAL Expression)? SEMICOLON;
     * ```
     */
    VariableDeclarationStatement = "VariableDeclarationStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragma = SOLIDITY_KEYWORD VersionPragmaExpressionsList;
     * ```
     */
    VersionPragma = "VersionPragma",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaExpression = VersionPragmaBinaryExpression (* VersionPragmaExpression «VersionPragmaOrOperator» VersionPragmaExpression *) (* Binary Operator, Left Associative *)
     *                         | VersionPragmaBinaryExpression (* VersionPragmaExpression «VersionPragmaRangeOperator» VersionPragmaExpression *) (* Binary Operator, Left Associative *)
     *                         | VersionPragmaUnaryExpression (* «VersionPragmaUnaryOperator» VersionPragmaExpression *) (* Unary Operator, Prefix *)
     *                         | VersionPragmaSpecifier;
     * ```
     */
    VersionPragmaExpression = "VersionPragmaExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaExpressionsList = VersionPragmaExpression+;
     * ```
     */
    VersionPragmaExpressionsList = "VersionPragmaExpressionsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaSpecifier = VERSION_PRAGMA_VALUE (PERIOD VERSION_PRAGMA_VALUE)*;
     * ```
     */
    VersionPragmaSpecifier = "VersionPragmaSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VERSION_PRAGMA_VALUE = ("0"…"9" | "x" | "X" | "*")+;
     * ```
     */
    VersionPragmaValue = "VersionPragmaValue",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VIEW_KEYWORD = "view";
     * ```
     */
    ViewKeyword = "ViewKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * VIRTUAL_KEYWORD = "virtual";
     * ```
     */
    VirtualKeyword = "VirtualKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WEEKS_KEYWORD = "weeks";
     * ```
     */
    WeeksKeyword = "WeeksKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WEI_KEYWORD = "wei";
     * ```
     */
    WeiKeyword = "WeiKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WHILE_KEYWORD = "while";
     * ```
     */
    WhileKeyword = "WhileKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WhileStatement = WHILE_KEYWORD OPEN_PAREN Expression CLOSE_PAREN Statement;
     * ```
     */
    WhileStatement = "WhileStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WHITESPACE = (" " | "	")+;
     * ```
     */
    Whitespace = "Whitespace",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * YEARS_KEYWORD = "years";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    YearsKeyword = "YearsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulAssignmentStatement = YulIdentifierPathsList COLON_EQUAL YulExpression;
     * ```
     */
    YulAssignmentStatement = "YulAssignmentStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulBlock = OPEN_BRACE YulStatementsList? CLOSE_BRACE;
     * ```
     */
    YulBlock = "YulBlock",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulBreakStatement = BREAK_KEYWORD;
     * ```
     */
    YulBreakStatement = "YulBreakStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulContinueStatement = CONTINUE_KEYWORD;
     * ```
     */
    YulContinueStatement = "YulContinueStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_DECIMAL_LITERAL = "0" | ("1"…"9" "0"…"9"*);
     * ```
     */
    YulDecimalLiteral = "YulDecimalLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulDeclarationStatement = LET_KEYWORD YulIdentifierPathsList (COLON_EQUAL YulExpression)?;
     * ```
     */
    YulDeclarationStatement = "YulDeclarationStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulExpression = YulFunctionCallExpression (* YulExpression «YulFunctionCallOperator» *) (* Unary Operator, Postfix *)
     *               | «YulLiteral»
     *               | YulIdentifierPath;
     * ```
     */
    YulExpression = "YulExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulExpressionsList = YulExpression (COMMA YulExpression)*;
     * ```
     */
    YulExpressionsList = "YulExpressionsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulForStatement = FOR_KEYWORD YulBlock YulExpression YulBlock YulBlock;
     * ```
     */
    YulForStatement = "YulForStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulFunctionDefinition = FUNCTION_KEYWORD YUL_IDENTIFIER YulParametersDeclaration YulReturnsDeclaration? YulBlock;
     * ```
     */
    YulFunctionDefinition = "YulFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_HEX_LITERAL = "0x" «HEX_CHARACTER»+;
     * ```
     */
    YulHexLiteral = "YulHexLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_IDENTIFIER = «RAW_IDENTIFIER» - («YUL_KEYWORD» | «YUL_RESERVED_WORD»);
     * ```
     */
    YulIdentifier = "YulIdentifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifierPath = YUL_IDENTIFIER (PERIOD YUL_IDENTIFIER)*;
     * ```
     */
    YulIdentifierPath = "YulIdentifierPath",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifierPathsList = YulIdentifierPath (COMMA YulIdentifierPath)*;
     * ```
     */
    YulIdentifierPathsList = "YulIdentifierPathsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifiersList = YUL_IDENTIFIER (COMMA YUL_IDENTIFIER)*;
     * ```
     */
    YulIdentifiersList = "YulIdentifiersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIfStatement = IF_KEYWORD YulExpression YulBlock;
     * ```
     */
    YulIfStatement = "YulIfStatement",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * YulLeaveStatement = LEAVE_KEYWORD;
     * ```
     */
    YulLeaveStatement = "YulLeaveStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulParametersDeclaration = OPEN_PAREN YulIdentifiersList? CLOSE_PAREN;
     * ```
     */
    YulParametersDeclaration = "YulParametersDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulReturnsDeclaration = MINUS_GREATER_THAN YulIdentifiersList;
     * ```
     */
    YulReturnsDeclaration = "YulReturnsDeclaration",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * YulStatement = YulBlock
     *              | YulFunctionDefinition
     *              | YulDeclarationStatement
     *              | YulAssignmentStatement
     *              | YulIfStatement
     *              | YulForStatement
     *              | YulSwitchStatement
     *              | YulBreakStatement
     *              | YulContinueStatement
     *              | YulExpression;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * YulStatement = YulBlock
     *              | YulFunctionDefinition
     *              | YulDeclarationStatement
     *              | YulAssignmentStatement
     *              | YulIfStatement
     *              | YulForStatement
     *              | YulSwitchStatement
     *              | YulLeaveStatement
     *              | YulBreakStatement
     *              | YulContinueStatement
     *              | YulExpression;
     * ```
     */
    YulStatement = "YulStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulStatementsList = YulStatement+;
     * ```
     */
    YulStatementsList = "YulStatementsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchCase = (DEFAULT_KEYWORD | (CASE_KEYWORD «YulLiteral»)) YulBlock;
     * ```
     */
    YulSwitchCase = "YulSwitchCase",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchCasesList = YulSwitchCase+;
     * ```
     */
    YulSwitchCasesList = "YulSwitchCasesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchStatement = SWITCH_KEYWORD YulExpression YulSwitchCasesList;
     * ```
     */
    YulSwitchStatement = "YulSwitchStatement",
  }
  export enum RuleKind {
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ABICoderPragma = ABICODER_KEYWORD IDENTIFIER;
     * ```
     */
    ABICoderPragma = "ABICoderPragma",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AddressType = (ADDRESS_KEYWORD PAYABLE_KEYWORD?) | PAYABLE_KEYWORD;
     * ```
     */
    AddressType = "AddressType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArgumentsDeclaration = OPEN_PAREN (PositionalArgumentsList | NamedArgumentsDeclaration)? CLOSE_PAREN;
     * ```
     */
    ArgumentsDeclaration = "ArgumentsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArrayExpression = OPEN_BRACKET ArrayValuesList CLOSE_BRACKET;
     * ```
     */
    ArrayExpression = "ArrayExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArrayTypeName = TypeName «ArrayTypeNameOperator» (* Unary Operator, Postfix *);
     * ```
     */
    ArrayTypeName = "ArrayTypeName",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ArrayValuesList = Expression (COMMA Expression)*;
     * ```
     */
    ArrayValuesList = "ArrayValuesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AsciiStringLiteralsList = ASCII_STRING_LITERAL+;
     * ```
     */
    AsciiStringLiteralsList = "AsciiStringLiteralsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AssemblyFlagsList = ASCII_STRING_LITERAL (COMMA ASCII_STRING_LITERAL)*;
     * ```
     */
    AssemblyFlagsList = "AssemblyFlagsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AssemblyStatement = ASSEMBLY_KEYWORD ASCII_STRING_LITERAL? (OPEN_PAREN AssemblyFlagsList CLOSE_PAREN)? YulBlock;
     * ```
     */
    AssemblyStatement = "AssemblyStatement",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * BinaryExpression = Expression «AssignmentOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «OrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «AndOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «EqualityComparisonOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «OrderComparisonOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseOrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseXOrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseAndOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «ShiftOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «AddSubOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «MulDivModOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «ExponentiationOperator» Expression (* Binary Operator, Left Associative *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * BinaryExpression = Expression «AssignmentOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «OrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «AndOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «EqualityComparisonOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «OrderComparisonOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseOrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseXOrOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «BitwiseAndOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «ShiftOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «AddSubOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «MulDivModOperator» Expression (* Binary Operator, Left Associative *);
     * BinaryExpression = Expression «ExponentiationOperator» Expression (* Binary Operator, Right Associative *);
     * ```
     */
    BinaryExpression = "BinaryExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * Block = OPEN_BRACE StatementsList? CLOSE_BRACE;
     * ```
     */
    Block = "Block",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BreakStatement = BREAK_KEYWORD SEMICOLON;
     * ```
     */
    BreakStatement = "BreakStatement",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClause = CATCH_KEYWORD CatchClauseError? Block;
     * ```
     */
    CatchClause = "CatchClause",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClauseError = IDENTIFIER? ParametersDeclaration;
     * ```
     */
    CatchClauseError = "CatchClauseError",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CatchClausesList = CatchClause+;
     * ```
     */
    CatchClausesList = "CatchClausesList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * ConditionalExpression = Expression «ConditionalOperator» (* Unary Operator, Postfix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * ConditionalExpression = Expression «ConditionalOperator» (* Unary Operator, Postfix *);
     * ```
     */
    ConditionalExpression = "ConditionalExpression",
    /**
     * ## v0.7.4
     *
     * ```ebnf
     * ConstantDefinition = TypeName CONSTANT_KEYWORD IDENTIFIER EQUAL Expression SEMICOLON;
     * ```
     */
    ConstantDefinition = "ConstantDefinition",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * ConstructorAttributesList = «ConstructorAttribute»+;
     * ```
     */
    ConstructorAttributesList = "ConstructorAttributesList",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * ConstructorDefinition = CONSTRUCTOR_KEYWORD ParametersDeclaration ConstructorAttributesList? Block;
     * ```
     */
    ConstructorDefinition = "ConstructorDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ContinueStatement = CONTINUE_KEYWORD SEMICOLON;
     * ```
     */
    ContinueStatement = "ContinueStatement",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * ContractDefinition = CONTRACT_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE ContractMembersList? CLOSE_BRACE;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * ContractDefinition = ABSTRACT_KEYWORD? CONTRACT_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE ContractMembersList? CLOSE_BRACE;
     * ```
     */
    ContractDefinition = "ContractDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ContractMembersList = «ContractMember»+;
     * ```
     */
    ContractMembersList = "ContractMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImport = OPEN_BRACE DeconstructionImportSymbolsList CLOSE_BRACE FROM_KEYWORD ASCII_STRING_LITERAL;
     * ```
     */
    DeconstructionImport = "DeconstructionImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImportSymbol = IDENTIFIER (AS_KEYWORD IDENTIFIER)?;
     * ```
     */
    DeconstructionImportSymbol = "DeconstructionImportSymbol",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeconstructionImportSymbolsList = DeconstructionImportSymbol (COMMA DeconstructionImportSymbol)*;
     * ```
     */
    DeconstructionImportSymbolsList = "DeconstructionImportSymbolsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DeleteStatement = DELETE_KEYWORD Expression SEMICOLON;
     * ```
     */
    DeleteStatement = "DeleteStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DoWhileStatement = DO_KEYWORD Statement WHILE_KEYWORD OPEN_PAREN Expression CLOSE_PAREN SEMICOLON;
     * ```
     */
    DoWhileStatement = "DoWhileStatement",
    /**
     * ## v0.4.21
     *
     * ```ebnf
     * EmitStatement = EMIT_KEYWORD IdentifierPath ArgumentsDeclaration SEMICOLON;
     * ```
     */
    EmitStatement = "EmitStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EndOfFileTrivia = (WHITESPACE | END_OF_LINE | MULTILINE_COMMENT | SINGLE_LINE_COMMENT)+;
     * ```
     */
    EndOfFileTrivia = "EndOfFileTrivia",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EnumDefinition = ENUM_KEYWORD IDENTIFIER OPEN_BRACE IdentifiersList? CLOSE_BRACE;
     * ```
     */
    EnumDefinition = "EnumDefinition",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorDefinition = ERROR_KEYWORD IDENTIFIER OPEN_PAREN ErrorParametersList? CLOSE_PAREN SEMICOLON;
     * ```
     */
    ErrorDefinition = "ErrorDefinition",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorParameter = TypeName IDENTIFIER?;
     * ```
     */
    ErrorParameter = "ErrorParameter",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ErrorParametersList = ErrorParameter (COMMA ErrorParameter)*;
     * ```
     */
    ErrorParametersList = "ErrorParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventDefinition = EVENT_KEYWORD IDENTIFIER OPEN_PAREN EventParametersList? CLOSE_PAREN ANONYMOUS_KEYWORD? SEMICOLON;
     * ```
     */
    EventDefinition = "EventDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventParameter = TypeName INDEXED_KEYWORD? IDENTIFIER?;
     * ```
     */
    EventParameter = "EventParameter",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EventParametersList = EventParameter (COMMA EventParameter)*;
     * ```
     */
    EventParametersList = "EventParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ExperimentalPragma = EXPERIMENTAL_KEYWORD (ASCII_STRING_LITERAL | IDENTIFIER);
     * ```
     */
    ExperimentalPragma = "ExperimentalPragma",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * Expression = BinaryExpression (* Expression «AssignmentOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | ConditionalExpression (* Expression «ConditionalOperator» *) (* Unary Operator, Postfix *)
     *            | BinaryExpression (* Expression «OrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «EqualityComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «OrderComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseXOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseAndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ShiftOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AddSubOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «MulDivModOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ExponentiationOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | UnaryPostfixExpression (* Expression «UnaryPostfixOperator» *) (* Unary Operator, Postfix *)
     *            | UnaryPrefixExpression (* «UnaryPrefixOperator» Expression *) (* Unary Operator, Prefix *)
     *            | FunctionCallExpression (* Expression «FunctionCallOperator» *) (* Unary Operator, Postfix *)
     *            | MemberAccessExpression (* Expression «MemberAccessOperator» *) (* Unary Operator, Postfix *)
     *            | IndexAccessExpression (* Expression «IndexAccessOperator» *) (* Unary Operator, Postfix *)
     *            | «PrimaryExpression»;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * Expression = BinaryExpression (* Expression «AssignmentOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | ConditionalExpression (* Expression «ConditionalOperator» *) (* Unary Operator, Postfix *)
     *            | BinaryExpression (* Expression «OrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «EqualityComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «OrderComparisonOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseXOrOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «BitwiseAndOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ShiftOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «AddSubOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «MulDivModOperator» Expression *) (* Binary Operator, Left Associative *)
     *            | BinaryExpression (* Expression «ExponentiationOperator» Expression *) (* Binary Operator, Right Associative *)
     *            | UnaryPostfixExpression (* Expression «UnaryPostfixOperator» *) (* Unary Operator, Postfix *)
     *            | UnaryPrefixExpression (* «UnaryPrefixOperator» Expression *) (* Unary Operator, Prefix *)
     *            | FunctionCallExpression (* Expression «FunctionCallOperator» *) (* Unary Operator, Postfix *)
     *            | MemberAccessExpression (* Expression «MemberAccessOperator» *) (* Unary Operator, Postfix *)
     *            | IndexAccessExpression (* Expression «IndexAccessOperator» *) (* Unary Operator, Postfix *)
     *            | «PrimaryExpression»;
     * ```
     */
    Expression = "Expression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ExpressionStatement = Expression SEMICOLON;
     * ```
     */
    ExpressionStatement = "ExpressionStatement",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * FallbackFunctionAttributesList = «FallbackFunctionAttribute»+;
     * ```
     */
    FallbackFunctionAttributesList = "FallbackFunctionAttributesList",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * FallbackFunctionDefinition = FALLBACK_KEYWORD ParametersDeclaration FallbackFunctionAttributesList? ReturnsDeclaration? (SEMICOLON | Block);
     * ```
     */
    FallbackFunctionDefinition = "FallbackFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ForStatement = FOR_KEYWORD OPEN_PAREN («SimpleStatement» | SEMICOLON) (ExpressionStatement | SEMICOLON) Expression? CLOSE_PAREN Statement;
     * ```
     */
    ForStatement = "ForStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionAttributesList = «FunctionAttribute»+;
     * ```
     */
    FunctionAttributesList = "FunctionAttributesList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * FunctionCallExpression = Expression «FunctionCallOperator» (* Unary Operator, Postfix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * FunctionCallExpression = Expression «FunctionCallOperator» (* Unary Operator, Postfix *);
     * ```
     */
    FunctionCallExpression = "FunctionCallExpression",
    /**
     * ## v0.6.2
     *
     * ```ebnf
     * FunctionCallOptions = NamedArgumentsDeclaration+;
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * FunctionCallOptions = NamedArgumentsDeclaration;
     * ```
     */
    FunctionCallOptions = "FunctionCallOptions",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionDefinition = FUNCTION_KEYWORD (IDENTIFIER | FALLBACK_KEYWORD | RECEIVE_KEYWORD) ParametersDeclaration FunctionAttributesList? ReturnsDeclaration? (SEMICOLON | Block);
     * ```
     */
    FunctionDefinition = "FunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionType = FUNCTION_KEYWORD ParametersDeclaration FunctionTypeAttributesList? ReturnsDeclaration?;
     * ```
     */
    FunctionType = "FunctionType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FunctionTypeAttributesList = «FunctionTypeAttribute»+;
     * ```
     */
    FunctionTypeAttributesList = "FunctionTypeAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HexStringLiteralsList = HEX_STRING_LITERAL+;
     * ```
     */
    HexStringLiteralsList = "HexStringLiteralsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifierPath = IDENTIFIER (PERIOD IDENTIFIER)*;
     * ```
     */
    IdentifierPath = "IdentifierPath",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifierPathsList = IdentifierPath (COMMA IdentifierPath)*;
     * ```
     */
    IdentifierPathsList = "IdentifierPathsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IdentifiersList = IDENTIFIER (COMMA IDENTIFIER)*;
     * ```
     */
    IdentifiersList = "IdentifiersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IfStatement = IF_KEYWORD OPEN_PAREN Expression CLOSE_PAREN Statement (ELSE_KEYWORD Statement)?;
     * ```
     */
    IfStatement = "IfStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ImportDirective = IMPORT_KEYWORD (PathImport | NamedImport | DeconstructionImport) SEMICOLON;
     * ```
     */
    ImportDirective = "ImportDirective",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * IndexAccessExpression = Expression «IndexAccessOperator» (* Unary Operator, Postfix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * IndexAccessExpression = Expression «IndexAccessOperator» (* Unary Operator, Postfix *);
     * ```
     */
    IndexAccessExpression = "IndexAccessExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceSpecifier = IS_KEYWORD InheritanceTypesList;
     * ```
     */
    InheritanceSpecifier = "InheritanceSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceType = IdentifierPath ArgumentsDeclaration?;
     * ```
     */
    InheritanceType = "InheritanceType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InheritanceTypesList = InheritanceType (COMMA InheritanceType)*;
     * ```
     */
    InheritanceTypesList = "InheritanceTypesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InterfaceDefinition = INTERFACE_KEYWORD IDENTIFIER InheritanceSpecifier? OPEN_BRACE InterfaceMembersList? CLOSE_BRACE;
     * ```
     */
    InterfaceDefinition = "InterfaceDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * InterfaceMembersList = «ContractMember»+;
     * ```
     */
    InterfaceMembersList = "InterfaceMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LeadingTrivia = (WHITESPACE | END_OF_LINE | MULTILINE_COMMENT | SINGLE_LINE_COMMENT)+;
     * ```
     */
    LeadingTrivia = "LeadingTrivia",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LibraryDefinition = LIBRARY_KEYWORD IDENTIFIER OPEN_BRACE LibraryMembersList? CLOSE_BRACE;
     * ```
     */
    LibraryDefinition = "LibraryDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LibraryMembersList = «ContractMember»+;
     * ```
     */
    LibraryMembersList = "LibraryMembersList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * MappingKeyType = «ElementaryType» | IdentifierPath;
     * ```
     *
     * ## v0.8.18
     *
     * ```ebnf
     * MappingKeyType = («ElementaryType» | IdentifierPath) IDENTIFIER?;
     * ```
     */
    MappingKeyType = "MappingKeyType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MappingType = MAPPING_KEYWORD OPEN_PAREN MappingKeyType EQUAL_GREATER_THAN MappingValueType CLOSE_PAREN;
     * ```
     */
    MappingType = "MappingType",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * MappingValueType = TypeName;
     * ```
     *
     * ## v0.8.18
     *
     * ```ebnf
     * MappingValueType = TypeName IDENTIFIER?;
     * ```
     */
    MappingValueType = "MappingValueType",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * MemberAccessExpression = Expression «MemberAccessOperator» (* Unary Operator, Postfix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * MemberAccessExpression = Expression «MemberAccessOperator» (* Unary Operator, Postfix *);
     * ```
     */
    MemberAccessExpression = "MemberAccessExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierAttributesList = «ModifierAttribute»+;
     * ```
     */
    ModifierAttributesList = "ModifierAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierDefinition = MODIFIER_KEYWORD IDENTIFIER ParametersDeclaration? ModifierAttributesList? (SEMICOLON | Block);
     * ```
     */
    ModifierDefinition = "ModifierDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ModifierInvocation = IdentifierPath ArgumentsDeclaration?;
     * ```
     */
    ModifierInvocation = "ModifierInvocation",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgument = IDENTIFIER COLON Expression;
     * ```
     */
    NamedArgument = "NamedArgument",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgumentsDeclaration = OPEN_BRACE NamedArgumentsList? CLOSE_BRACE;
     * ```
     */
    NamedArgumentsDeclaration = "NamedArgumentsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedArgumentsList = NamedArgument (COMMA NamedArgument)*;
     * ```
     */
    NamedArgumentsList = "NamedArgumentsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NamedImport = ASTERISK AS_KEYWORD IDENTIFIER FROM_KEYWORD ASCII_STRING_LITERAL;
     * ```
     */
    NamedImport = "NamedImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NewExpression = NEW_KEYWORD TypeName;
     * ```
     */
    NewExpression = "NewExpression",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * NumericExpression = (HEX_LITERAL | DECIMAL_LITERAL) «NumberUnit»?;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * NumericExpression = HEX_LITERAL | (DECIMAL_LITERAL «NumberUnit»?);
     * ```
     */
    NumericExpression = "NumericExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OverrideSpecifier = OVERRIDE_KEYWORD (OPEN_PAREN IdentifierPathsList? CLOSE_PAREN)?;
     * ```
     */
    OverrideSpecifier = "OverrideSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * Parameter = TypeName «DataLocation»? IDENTIFIER?;
     * ```
     */
    Parameter = "Parameter",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ParametersDeclaration = OPEN_PAREN ParametersList? CLOSE_PAREN;
     * ```
     */
    ParametersDeclaration = "ParametersDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ParametersList = Parameter (COMMA Parameter)*;
     * ```
     */
    ParametersList = "ParametersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PathImport = ASCII_STRING_LITERAL (AS_KEYWORD IDENTIFIER)?;
     * ```
     */
    PathImport = "PathImport",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PositionalArgumentsList = Expression (COMMA Expression)*;
     * ```
     */
    PositionalArgumentsList = "PositionalArgumentsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PragmaDirective = PRAGMA_KEYWORD (ABICoderPragma | ExperimentalPragma | VersionPragma) SEMICOLON;
     * ```
     */
    PragmaDirective = "PragmaDirective",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ReceiveFunctionAttributesList = «ReceiveFunctionAttribute»+;
     * ```
     */
    ReceiveFunctionAttributesList = "ReceiveFunctionAttributesList",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ReceiveFunctionDefinition = RECEIVE_KEYWORD ParametersDeclaration ReceiveFunctionAttributesList? (SEMICOLON | Block);
     * ```
     */
    ReceiveFunctionDefinition = "ReceiveFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ReturnStatement = RETURN_KEYWORD Expression? SEMICOLON;
     * ```
     */
    ReturnStatement = "ReturnStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ReturnsDeclaration = RETURNS_KEYWORD ParametersDeclaration;
     * ```
     */
    ReturnsDeclaration = "ReturnsDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RevertStatement = REVERT_KEYWORD IdentifierPath? ArgumentsDeclaration SEMICOLON;
     * ```
     */
    RevertStatement = "RevertStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SourceUnit = SourceUnitMembersList? EndOfFileTrivia?;
     * ```
     */
    SourceUnit = "SourceUnit",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SourceUnitMembersList = «SourceUnitMember»+;
     * ```
     */
    SourceUnitMembersList = "SourceUnitMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StateVariableAttributesList = «StateVariableAttribute»+;
     * ```
     */
    StateVariableAttributesList = "StateVariableAttributesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StateVariableDefinition = TypeName StateVariableAttributesList? IDENTIFIER (EQUAL Expression)? SEMICOLON;
     * ```
     */
    StateVariableDefinition = "StateVariableDefinition",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * Statement = «SimpleStatement»
     *           | «ControlStatement»
     *           | AssemblyStatement
     *           | Block;
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * Statement = «SimpleStatement»
     *           | «ControlStatement»
     *           | AssemblyStatement
     *           | Block
     *           | UncheckedBlock;
     * ```
     */
    Statement = "Statement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StatementsList = Statement+;
     * ```
     */
    StatementsList = "StatementsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructDefinition = STRUCT_KEYWORD IDENTIFIER OPEN_BRACE StructMembersList? CLOSE_BRACE;
     * ```
     */
    StructDefinition = "StructDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructMember = TypeName IDENTIFIER SEMICOLON;
     * ```
     */
    StructMember = "StructMember",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * StructMembersList = StructMember+;
     * ```
     */
    StructMembersList = "StructMembersList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * ThrowStatement = THROW_KEYWORD SEMICOLON;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ThrowStatement = "ThrowStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TrailingTrivia = WHITESPACE? SINGLE_LINE_COMMENT? END_OF_LINE;
     * ```
     */
    TrailingTrivia = "TrailingTrivia",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * TryStatement = TRY_KEYWORD Expression ReturnsDeclaration? Block CatchClausesList;
     * ```
     */
    TryStatement = "TryStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleDeconstructionStatement = OPEN_PAREN TupleMembersList? CLOSE_PAREN EQUAL Expression SEMICOLON;
     * ```
     */
    TupleDeconstructionStatement = "TupleDeconstructionStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleExpression = OPEN_PAREN TupleValuesList CLOSE_PAREN;
     * ```
     */
    TupleExpression = "TupleExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleMember = ((TypeName «DataLocation»? IDENTIFIER) | («DataLocation»? IDENTIFIER))?;
     * ```
     */
    TupleMember = "TupleMember",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleMembersList = TupleMember (COMMA TupleMember)*;
     * ```
     */
    TupleMembersList = "TupleMembersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TupleValuesList = Expression? (COMMA Expression?)*;
     * ```
     */
    TupleValuesList = "TupleValuesList",
    /**
     * ## v0.5.3
     *
     * ```ebnf
     * TypeExpression = TYPE_KEYWORD OPEN_PAREN TypeName CLOSE_PAREN;
     * ```
     */
    TypeExpression = "TypeExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TypeName = ArrayTypeName (* TypeName «ArrayTypeNameOperator» *) (* Unary Operator, Postfix *)
     *          | FunctionType
     *          | MappingType
     *          | «ElementaryType»
     *          | IdentifierPath;
     * ```
     */
    TypeName = "TypeName",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnaryPostfixExpression = Expression «UnaryPostfixOperator» (* Unary Operator, Postfix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * UnaryPostfixExpression = Expression «UnaryPostfixOperator» (* Unary Operator, Postfix *);
     * ```
     */
    UnaryPostfixExpression = "UnaryPostfixExpression",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnaryPrefixExpression = «UnaryPrefixOperator» Expression (* Unary Operator, Prefix *);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * UnaryPrefixExpression = «UnaryPrefixOperator» Expression (* Unary Operator, Prefix *);
     * ```
     */
    UnaryPrefixExpression = "UnaryPrefixExpression",
    /**
     * ## v0.8.0
     *
     * ```ebnf
     * UncheckedBlock = UNCHECKED_KEYWORD Block;
     * ```
     */
    UncheckedBlock = "UncheckedBlock",
    /**
     * ## v0.7.0
     *
     * ```ebnf
     * UnicodeStringLiteralsList = UNICODE_STRING_LITERAL+;
     * ```
     */
    UnicodeStringLiteralsList = "UnicodeStringLiteralsList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnnamedFunctionAttributesList = «UnnamedFunctionAttribute»+;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    UnnamedFunctionAttributesList = "UnnamedFunctionAttributesList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UnnamedFunctionDefinition = FUNCTION_KEYWORD ParametersDeclaration UnnamedFunctionAttributesList? (SEMICOLON | Block);
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    UnnamedFunctionDefinition = "UnnamedFunctionDefinition",
    /**
     * ## v0.8.8
     *
     * ```ebnf
     * UserDefinedValueTypeDefinition = TYPE_KEYWORD IDENTIFIER IS_KEYWORD «ElementaryType» SEMICOLON;
     * ```
     */
    UserDefinedValueTypeDefinition = "UserDefinedValueTypeDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirective = USING_KEYWORD (UsingDirectivePath | UsingDirectiveDeconstruction) FOR_KEYWORD (ASTERISK | TypeName) GLOBAL_KEYWORD? SEMICOLON;
     * ```
     */
    UsingDirective = "UsingDirective",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectiveDeconstruction = OPEN_BRACE UsingDirectiveSymbolsList CLOSE_BRACE;
     * ```
     */
    UsingDirectiveDeconstruction = "UsingDirectiveDeconstruction",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectivePath = IdentifierPath;
     * ```
     */
    UsingDirectivePath = "UsingDirectivePath",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * UsingDirectiveSymbol = IdentifierPath;
     * ```
     *
     * ## v0.8.19
     *
     * ```ebnf
     * UsingDirectiveSymbol = IdentifierPath (AS_KEYWORD «UsingDirectiveOperator»)?;
     * ```
     */
    UsingDirectiveSymbol = "UsingDirectiveSymbol",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UsingDirectiveSymbolsList = UsingDirectiveSymbol (COMMA UsingDirectiveSymbol)*;
     * ```
     */
    UsingDirectiveSymbolsList = "UsingDirectiveSymbolsList",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * VariableDeclaration = (VAR_KEYWORD | TypeName) «DataLocation»? IDENTIFIER;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * VariableDeclaration = TypeName «DataLocation»? IDENTIFIER;
     * ```
     */
    VariableDeclaration = "VariableDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VariableDeclarationStatement = VariableDeclaration (EQUAL Expression)? SEMICOLON;
     * ```
     */
    VariableDeclarationStatement = "VariableDeclarationStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragma = SOLIDITY_KEYWORD VersionPragmaExpressionsList;
     * ```
     */
    VersionPragma = "VersionPragma",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaBinaryExpression = VersionPragmaExpression «VersionPragmaOrOperator» VersionPragmaExpression (* Binary Operator, Left Associative *);
     * VersionPragmaBinaryExpression = VersionPragmaExpression «VersionPragmaRangeOperator» VersionPragmaExpression (* Binary Operator, Left Associative *);
     * ```
     */
    VersionPragmaBinaryExpression = "VersionPragmaBinaryExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaExpression = VersionPragmaBinaryExpression (* VersionPragmaExpression «VersionPragmaOrOperator» VersionPragmaExpression *) (* Binary Operator, Left Associative *)
     *                         | VersionPragmaBinaryExpression (* VersionPragmaExpression «VersionPragmaRangeOperator» VersionPragmaExpression *) (* Binary Operator, Left Associative *)
     *                         | VersionPragmaUnaryExpression (* «VersionPragmaUnaryOperator» VersionPragmaExpression *) (* Unary Operator, Prefix *)
     *                         | VersionPragmaSpecifier;
     * ```
     */
    VersionPragmaExpression = "VersionPragmaExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaExpressionsList = VersionPragmaExpression+;
     * ```
     */
    VersionPragmaExpressionsList = "VersionPragmaExpressionsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaSpecifier = VERSION_PRAGMA_VALUE (PERIOD VERSION_PRAGMA_VALUE)*;
     * ```
     */
    VersionPragmaSpecifier = "VersionPragmaSpecifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VersionPragmaUnaryExpression = «VersionPragmaUnaryOperator» VersionPragmaExpression (* Unary Operator, Prefix *);
     * ```
     */
    VersionPragmaUnaryExpression = "VersionPragmaUnaryExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WhileStatement = WHILE_KEYWORD OPEN_PAREN Expression CLOSE_PAREN Statement;
     * ```
     */
    WhileStatement = "WhileStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulAssignmentStatement = YulIdentifierPathsList COLON_EQUAL YulExpression;
     * ```
     */
    YulAssignmentStatement = "YulAssignmentStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulBlock = OPEN_BRACE YulStatementsList? CLOSE_BRACE;
     * ```
     */
    YulBlock = "YulBlock",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulBreakStatement = BREAK_KEYWORD;
     * ```
     */
    YulBreakStatement = "YulBreakStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulContinueStatement = CONTINUE_KEYWORD;
     * ```
     */
    YulContinueStatement = "YulContinueStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulDeclarationStatement = LET_KEYWORD YulIdentifierPathsList (COLON_EQUAL YulExpression)?;
     * ```
     */
    YulDeclarationStatement = "YulDeclarationStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulExpression = YulFunctionCallExpression (* YulExpression «YulFunctionCallOperator» *) (* Unary Operator, Postfix *)
     *               | «YulLiteral»
     *               | YulIdentifierPath;
     * ```
     */
    YulExpression = "YulExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulExpressionsList = YulExpression (COMMA YulExpression)*;
     * ```
     */
    YulExpressionsList = "YulExpressionsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulForStatement = FOR_KEYWORD YulBlock YulExpression YulBlock YulBlock;
     * ```
     */
    YulForStatement = "YulForStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulFunctionCallExpression = YulExpression «YulFunctionCallOperator» (* Unary Operator, Postfix *);
     * ```
     */
    YulFunctionCallExpression = "YulFunctionCallExpression",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulFunctionDefinition = FUNCTION_KEYWORD YUL_IDENTIFIER YulParametersDeclaration YulReturnsDeclaration? YulBlock;
     * ```
     */
    YulFunctionDefinition = "YulFunctionDefinition",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifierPath = YUL_IDENTIFIER (PERIOD YUL_IDENTIFIER)*;
     * ```
     */
    YulIdentifierPath = "YulIdentifierPath",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifierPathsList = YulIdentifierPath (COMMA YulIdentifierPath)*;
     * ```
     */
    YulIdentifierPathsList = "YulIdentifierPathsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIdentifiersList = YUL_IDENTIFIER (COMMA YUL_IDENTIFIER)*;
     * ```
     */
    YulIdentifiersList = "YulIdentifiersList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulIfStatement = IF_KEYWORD YulExpression YulBlock;
     * ```
     */
    YulIfStatement = "YulIfStatement",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * YulLeaveStatement = LEAVE_KEYWORD;
     * ```
     */
    YulLeaveStatement = "YulLeaveStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulParametersDeclaration = OPEN_PAREN YulIdentifiersList? CLOSE_PAREN;
     * ```
     */
    YulParametersDeclaration = "YulParametersDeclaration",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulReturnsDeclaration = MINUS_GREATER_THAN YulIdentifiersList;
     * ```
     */
    YulReturnsDeclaration = "YulReturnsDeclaration",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * YulStatement = YulBlock
     *              | YulFunctionDefinition
     *              | YulDeclarationStatement
     *              | YulAssignmentStatement
     *              | YulIfStatement
     *              | YulForStatement
     *              | YulSwitchStatement
     *              | YulBreakStatement
     *              | YulContinueStatement
     *              | YulExpression;
     * ```
     *
     * ## v0.6.0
     *
     * ```ebnf
     * YulStatement = YulBlock
     *              | YulFunctionDefinition
     *              | YulDeclarationStatement
     *              | YulAssignmentStatement
     *              | YulIfStatement
     *              | YulForStatement
     *              | YulSwitchStatement
     *              | YulLeaveStatement
     *              | YulBreakStatement
     *              | YulContinueStatement
     *              | YulExpression;
     * ```
     */
    YulStatement = "YulStatement",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulStatementsList = YulStatement+;
     * ```
     */
    YulStatementsList = "YulStatementsList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchCase = (DEFAULT_KEYWORD | (CASE_KEYWORD «YulLiteral»)) YulBlock;
     * ```
     */
    YulSwitchCase = "YulSwitchCase",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchCasesList = YulSwitchCase+;
     * ```
     */
    YulSwitchCasesList = "YulSwitchCasesList",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YulSwitchStatement = SWITCH_KEYWORD YulExpression YulSwitchCasesList;
     * ```
     */
    YulSwitchStatement = "YulSwitchStatement",
  }
  export enum TokenKind {
    /** Used to hold parts of input that cannot be parsed (incomplete, or erroneous). */
    SKIPPED = "SKIPPED",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ABICODER_KEYWORD = "abicoder";
     * ```
     */
    AbicoderKeyword = "AbicoderKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * ABSTRACT_KEYWORD = "abstract";
     * ```
     */
    AbstractKeyword = "AbstractKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ADDRESS_KEYWORD = "address";
     * ```
     */
    AddressKeyword = "AddressKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND = "&";
     * ```
     */
    Ampersand = "Ampersand",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND_AMPERSAND = "&&";
     * ```
     */
    AmpersandAmpersand = "AmpersandAmpersand",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AMPERSAND_EQUAL = "&=";
     * ```
     */
    AmpersandEqual = "AmpersandEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ANONYMOUS_KEYWORD = "anonymous";
     * ```
     */
    AnonymousKeyword = "AnonymousKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * AS_KEYWORD = "as";
     * ```
     */
    AsKeyword = "AsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASCII_STRING_LITERAL = «SINGLE_QUOTED_ASCII_STRING_LITERAL»
     *                      | «DOUBLE_QUOTED_ASCII_STRING_LITERAL»;
     * ```
     */
    AsciiStringLiteral = "AsciiStringLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASSEMBLY_KEYWORD = "assembly";
     * ```
     */
    AssemblyKeyword = "AssemblyKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK = "*";
     * ```
     */
    Asterisk = "Asterisk",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK_ASTERISK = "**";
     * ```
     */
    AsteriskAsterisk = "AsteriskAsterisk",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ASTERISK_EQUAL = "*=";
     * ```
     */
    AsteriskEqual = "AsteriskEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BANG = "!";
     * ```
     */
    Bang = "Bang",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BANG_EQUAL = "!=";
     * ```
     */
    BangEqual = "BangEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR = "|";
     * ```
     */
    Bar = "Bar",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR_BAR = "||";
     * ```
     */
    BarBar = "BarBar",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BAR_EQUAL = "|=";
     * ```
     */
    BarEqual = "BarEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BOOL_KEYWORD = "bool";
     * ```
     */
    BoolKeyword = "BoolKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * BREAK_KEYWORD = "break";
     * ```
     */
    BreakKeyword = "BreakKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * BYTE_KEYWORD = "byte";
     * ```
     *
     * ## v0.8.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ByteKeyword = "ByteKeyword",
    /**
     * ## v0.5.0
     *
     * ```ebnf
     * CALLDATA_KEYWORD = "calldata";
     * ```
     */
    CalldataKeyword = "CalldataKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CARET = "^";
     * ```
     */
    Caret = "Caret",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CARET_EQUAL = "^=";
     * ```
     */
    CaretEqual = "CaretEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CASE_KEYWORD = "case";
     * ```
     */
    CaseKeyword = "CaseKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * CATCH_KEYWORD = "catch";
     * ```
     */
    CatchKeyword = "CatchKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_BRACE = "}";
     * ```
     */
    CloseBrace = "CloseBrace",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_BRACKET = "]";
     * ```
     */
    CloseBracket = "CloseBracket",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CLOSE_PAREN = ")";
     * ```
     */
    CloseParen = "CloseParen",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COLON = ":";
     * ```
     */
    Colon = "Colon",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COLON_EQUAL = ":=";
     * ```
     */
    ColonEqual = "ColonEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * COMMA = ",";
     * ```
     */
    Comma = "Comma",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONSTANT_KEYWORD = "constant";
     * ```
     */
    ConstantKeyword = "ConstantKeyword",
    /**
     * ## v0.4.22
     *
     * ```ebnf
     * CONSTRUCTOR_KEYWORD = "constructor";
     * ```
     */
    ConstructorKeyword = "ConstructorKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONTINUE_KEYWORD = "continue";
     * ```
     */
    ContinueKeyword = "ContinueKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * CONTRACT_KEYWORD = "contract";
     * ```
     */
    ContractKeyword = "ContractKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DAYS_KEYWORD = "days";
     * ```
     */
    DaysKeyword = "DaysKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * DECIMAL_LITERAL = ((«DECIMAL_DIGITS» ("." «DECIMAL_DIGITS»?)?) | ("." «DECIMAL_DIGITS»)) «DECIMAL_EXPONENT»?;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * DECIMAL_LITERAL = ((«DECIMAL_DIGITS» ("." «DECIMAL_DIGITS»)?) | ("." «DECIMAL_DIGITS»)) «DECIMAL_EXPONENT»?;
     * ```
     */
    DecimalLiteral = "DecimalLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DEFAULT_KEYWORD = "default";
     * ```
     */
    DefaultKeyword = "DefaultKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DELETE_KEYWORD = "delete";
     * ```
     */
    DeleteKeyword = "DeleteKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * DO_KEYWORD = "do";
     * ```
     */
    DoKeyword = "DoKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ELSE_KEYWORD = "else";
     * ```
     */
    ElseKeyword = "ElseKeyword",
    /**
     * ## v0.4.21
     *
     * ```ebnf
     * EMIT_KEYWORD = "emit";
     * ```
     */
    EmitKeyword = "EmitKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * END_OF_LINE = "
"? "
    ";
     * ```
     */
    EndOfLine = "EndOfLine",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ENUM_KEYWORD = "enum";
     * ```
     */
    EnumKeyword = "EnumKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL = "=";
     * ```
     */
    Equal = "Equal",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL_EQUAL = "==";
     * ```
     */
    EqualEqual = "EqualEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EQUAL_GREATER_THAN = "=>";
     * ```
     */
    EqualGreaterThan = "EqualGreaterThan",
    /**
     * ## v0.8.4
     *
     * ```ebnf
     * ERROR_KEYWORD = "error";
     * ```
     */
    ErrorKeyword = "ErrorKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * ETHER_KEYWORD = "ether";
     * ```
     */
    EtherKeyword = "EtherKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EVENT_KEYWORD = "event";
     * ```
     */
    EventKeyword = "EventKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EXPERIMENTAL_KEYWORD = "experimental";
     * ```
     */
    ExperimentalKeyword = "ExperimentalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * EXTERNAL_KEYWORD = "external";
     * ```
     */
    ExternalKeyword = "ExternalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FALLBACK_KEYWORD = "fallback";
     * ```
     */
    FallbackKeyword = "FallbackKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FALSE_KEYWORD = "false";
     * ```
     */
    FalseKeyword = "FalseKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * FINNEY_KEYWORD = "finney";
     * ```
     *
     * ## v0.7.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    FinneyKeyword = "FinneyKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FIXED_BYTES_TYPE = "bytes" «FIXED_BYTES_TYPE_SIZE»;
     * ```
     */
    FixedBytesType = "FixedBytesType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FOR_KEYWORD = "for";
     * ```
     */
    ForKeyword = "ForKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FROM_KEYWORD = "from";
     * ```
     */
    FromKeyword = "FromKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * FUNCTION_KEYWORD = "function";
     * ```
     */
    FunctionKeyword = "FunctionKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GLOBAL_KEYWORD = "global";
     * ```
     */
    GlobalKeyword = "GlobalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN = ">";
     * ```
     */
    GreaterThan = "GreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_EQUAL = ">=";
     * ```
     */
    GreaterThanEqual = "GreaterThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN = ">>";
     * ```
     */
    GreaterThanGreaterThan = "GreaterThanGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_EQUAL = ">>=";
     * ```
     */
    GreaterThanGreaterThanEqual = "GreaterThanGreaterThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_GREATER_THAN = ">>>";
     * ```
     */
    GreaterThanGreaterThanGreaterThan = "GreaterThanGreaterThanGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * GREATER_THAN_GREATER_THAN_GREATER_THAN_EQUAL = ">>>=";
     * ```
     */
    GreaterThanGreaterThanGreaterThanEqual = "GreaterThanGreaterThanGreaterThanEqual",
    /**
     * ## v0.6.11
     *
     * ```ebnf
     * GWEI_KEYWORD = "gwei";
     * ```
     */
    GweiKeyword = "GweiKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * HEX_LITERAL = ("0x" | "0X") «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * HEX_LITERAL = "0x" «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
     * ```
     */
    HexLiteral = "HexLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HEX_STRING_LITERAL = «SINGLE_QUOTED_HEX_STRING_LITERAL»
     *                    | «DOUBLE_QUOTED_HEX_STRING_LITERAL»;
     * ```
     */
    HexStringLiteral = "HexStringLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * HOURS_KEYWORD = "hours";
     * ```
     */
    HoursKeyword = "HoursKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * IDENTIFIER = «RAW_IDENTIFIER» - («KEYWORD_IN_ANY_VERSION» | «KEYWORD_IN_SOME_VERSION» | «RESERVED_WORD_IN_ANY_VERSION»);
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * IDENTIFIER = «RAW_IDENTIFIER» - («KEYWORD_IN_ANY_VERSION» | «KEYWORD_IN_SOME_VERSION» | «RESERVED_WORD_IN_ANY_VERSION» | «RESERVED_WORD_IN_SOME_VERSION»);
     * ```
     */
    Identifier = "Identifier",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IF_KEYWORD = "if";
     * ```
     */
    IfKeyword = "IfKeyword",
    /**
     * ## v0.6.5
     *
     * ```ebnf
     * IMMUTABLE_KEYWORD = "immutable";
     * ```
     */
    ImmutableKeyword = "ImmutableKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IMPORT_KEYWORD = "import";
     * ```
     */
    ImportKeyword = "ImportKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INDEXED_KEYWORD = "indexed";
     * ```
     */
    IndexedKeyword = "IndexedKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INTERFACE_KEYWORD = "interface";
     * ```
     */
    InterfaceKeyword = "InterfaceKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * INTERNAL_KEYWORD = "internal";
     * ```
     */
    InternalKeyword = "InternalKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * IS_KEYWORD = "is";
     * ```
     */
    IsKeyword = "IsKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * LEAVE_KEYWORD = "leave";
     * ```
     */
    LeaveKeyword = "LeaveKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN = "<";
     * ```
     */
    LessThan = "LessThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_EQUAL = "<=";
     * ```
     */
    LessThanEqual = "LessThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_LESS_THAN = "<<";
     * ```
     */
    LessThanLessThan = "LessThanLessThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LESS_THAN_LESS_THAN_EQUAL = "<<=";
     * ```
     */
    LessThanLessThanEqual = "LessThanLessThanEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LET_KEYWORD = "let";
     * ```
     */
    LetKeyword = "LetKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * LIBRARY_KEYWORD = "library";
     * ```
     */
    LibraryKeyword = "LibraryKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MAPPING_KEYWORD = "mapping";
     * ```
     */
    MappingKeyword = "MappingKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MEMORY_KEYWORD = "memory";
     * ```
     */
    MemoryKeyword = "MemoryKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS = "-";
     * ```
     */
    Minus = "Minus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_EQUAL = "-=";
     * ```
     */
    MinusEqual = "MinusEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_GREATER_THAN = "->";
     * ```
     */
    MinusGreaterThan = "MinusGreaterThan",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUS_MINUS = "--";
     * ```
     */
    MinusMinus = "MinusMinus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MINUTES_KEYWORD = "minutes";
     * ```
     */
    MinutesKeyword = "MinutesKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MODIFIER_KEYWORD = "modifier";
     * ```
     */
    ModifierKeyword = "ModifierKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * MULTILINE_COMMENT = "/" "*" (!"*" | "*")* "*" "/";
     * ```
     */
    MultilineComment = "MultilineComment",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * NEW_KEYWORD = "new";
     * ```
     */
    NewKeyword = "NewKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_BRACE = "{";
     * ```
     */
    OpenBrace = "OpenBrace",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_BRACKET = "[";
     * ```
     */
    OpenBracket = "OpenBracket",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OPEN_PAREN = "(";
     * ```
     */
    OpenParen = "OpenParen",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * OVERRIDE_KEYWORD = "override";
     * ```
     */
    OverrideKeyword = "OverrideKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PAYABLE_KEYWORD = "payable";
     * ```
     */
    PayableKeyword = "PayableKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERCENT = "%";
     * ```
     */
    Percent = "Percent",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERCENT_EQUAL = "%=";
     * ```
     */
    PercentEqual = "PercentEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PERIOD = ".";
     * ```
     */
    Period = "Period",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS = "+";
     * ```
     */
    Plus = "Plus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS_EQUAL = "+=";
     * ```
     */
    PlusEqual = "PlusEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PLUS_PLUS = "++";
     * ```
     */
    PlusPlus = "PlusPlus",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PRAGMA_KEYWORD = "pragma";
     * ```
     */
    PragmaKeyword = "PragmaKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PRIVATE_KEYWORD = "private";
     * ```
     */
    PrivateKeyword = "PrivateKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PUBLIC_KEYWORD = "public";
     * ```
     */
    PublicKeyword = "PublicKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * PURE_KEYWORD = "pure";
     * ```
     */
    PureKeyword = "PureKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * QUESTION_MARK = "?";
     * ```
     */
    QuestionMark = "QuestionMark",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RECEIVE_KEYWORD = "receive";
     * ```
     */
    ReceiveKeyword = "ReceiveKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RETURN_KEYWORD = "return";
     * ```
     */
    ReturnKeyword = "ReturnKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * RETURNS_KEYWORD = "returns";
     * ```
     */
    ReturnsKeyword = "ReturnsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * REVERT_KEYWORD = "revert";
     * ```
     */
    RevertKeyword = "RevertKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SECONDS_KEYWORD = "seconds";
     * ```
     */
    SecondsKeyword = "SecondsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SEMICOLON = ";";
     * ```
     */
    Semicolon = "Semicolon",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SIGNED_FIXED_TYPE = "fixed" «FIXED_TYPE_SIZE»?;
     * ```
     */
    SignedFixedType = "SignedFixedType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SIGNED_INTEGER_TYPE = "int" «INTEGER_TYPE_SIZE»?;
     * ```
     */
    SignedIntegerType = "SignedIntegerType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SINGLE_LINE_COMMENT = "//" (!("
" | "
    "))*;
     * ```
     */
    SingleLineComment = "SingleLineComment",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SLASH = "/";
     * ```
     */
    Slash = "Slash",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SLASH_EQUAL = "/=";
     * ```
     */
    SlashEqual = "SlashEqual",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SOLIDITY_KEYWORD = "solidity";
     * ```
     */
    SolidityKeyword = "SolidityKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STORAGE_KEYWORD = "storage";
     * ```
     */
    StorageKeyword = "StorageKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STRING_KEYWORD = "string";
     * ```
     */
    StringKeyword = "StringKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * STRUCT_KEYWORD = "struct";
     * ```
     */
    StructKeyword = "StructKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * SWITCH_KEYWORD = "switch";
     * ```
     */
    SwitchKeyword = "SwitchKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * SZABO_KEYWORD = "szabo";
     * ```
     *
     * ## v0.7.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    SzaboKeyword = "SzaboKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * THROW_KEYWORD = "throw";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    ThrowKeyword = "ThrowKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TILDE = "~";
     * ```
     */
    Tilde = "Tilde",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * TRUE_KEYWORD = "true";
     * ```
     */
    TrueKeyword = "TrueKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * TRY_KEYWORD = "try";
     * ```
     */
    TryKeyword = "TryKeyword",
    /**
     * ## v0.5.3
     *
     * ```ebnf
     * TYPE_KEYWORD = "type";
     * ```
     */
    TypeKeyword = "TypeKeyword",
    /**
     * ## v0.8.0
     *
     * ```ebnf
     * UNCHECKED_KEYWORD = "unchecked";
     * ```
     */
    UncheckedKeyword = "UncheckedKeyword",
    /**
     * ## v0.7.0
     *
     * ```ebnf
     * UNICODE_STRING_LITERAL = «SINGLE_QUOTED_UNICODE_STRING_LITERAL»
     *                        | «DOUBLE_QUOTED_UNICODE_STRING_LITERAL»;
     * ```
     */
    UnicodeStringLiteral = "UnicodeStringLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UNSIGNED_FIXED_TYPE = "ufixed" «FIXED_TYPE_SIZE»?;
     * ```
     */
    UnsignedFixedType = "UnsignedFixedType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * UNSIGNED_INTEGER_TYPE = "uint" «INTEGER_TYPE_SIZE»?;
     * ```
     */
    UnsignedIntegerType = "UnsignedIntegerType",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * USING_KEYWORD = "using";
     * ```
     */
    UsingKeyword = "UsingKeyword",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * VAR_KEYWORD = "var";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    VarKeyword = "VarKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VERSION_PRAGMA_VALUE = ("0"…"9" | "x" | "X" | "*")+;
     * ```
     */
    VersionPragmaValue = "VersionPragmaValue",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * VIEW_KEYWORD = "view";
     * ```
     */
    ViewKeyword = "ViewKeyword",
    /**
     * ## v0.6.0
     *
     * ```ebnf
     * VIRTUAL_KEYWORD = "virtual";
     * ```
     */
    VirtualKeyword = "VirtualKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WEEKS_KEYWORD = "weeks";
     * ```
     */
    WeeksKeyword = "WeeksKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WEI_KEYWORD = "wei";
     * ```
     */
    WeiKeyword = "WeiKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WHILE_KEYWORD = "while";
     * ```
     */
    WhileKeyword = "WhileKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * WHITESPACE = (" " | "	")+;
     * ```
     */
    Whitespace = "Whitespace",
    /**
     * ## v0.4.11
     *
     * ```ebnf
     * YEARS_KEYWORD = "years";
     * ```
     *
     * ## v0.5.0
     *
     * ```ebnf
     * (* DELETED *)
     * ```
     */
    YearsKeyword = "YearsKeyword",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_DECIMAL_LITERAL = "0" | ("1"…"9" "0"…"9"*);
     * ```
     */
    YulDecimalLiteral = "YulDecimalLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_HEX_LITERAL = "0x" «HEX_CHARACTER»+;
     * ```
     */
    YulHexLiteral = "YulHexLiteral",
    /**
     * ## Unversioned
     *
     * ```ebnf
     * YUL_IDENTIFIER = «RAW_IDENTIFIER» - («YUL_KEYWORD» | «YUL_RESERVED_WORD»);
     * ```
     */
    YulIdentifier = "YulIdentifier",
  }
}
