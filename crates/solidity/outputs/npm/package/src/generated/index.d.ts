// Slang License: https://github.com/NomicFoundation/slang/blob/main/LICENSE
// NAPI-RS License: https://github.com/napi-rs/napi-rs/blob/main/LICENSE

// @ts-nocheck

/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export enum NodeType {
  Rule = 0,
  Token = 1,
}
export enum TokenKind {
  AbicoderKeyword = 0,
  AbstractKeyword = 1,
  AddressKeyword = 2,
  Ampersand = 3,
  AmpersandAmpersand = 4,
  AmpersandEqual = 5,
  AnonymousKeyword = 6,
  AsKeyword = 7,
  AsciiEscape = 8,
  AsciiStringLiteral = 9,
  AssemblyKeyword = 10,
  Bang = 11,
  BangEqual = 12,
  Bar = 13,
  BarBar = 14,
  BarEqual = 15,
  BoolKeyword = 16,
  BreakKeyword = 17,
  ByteType = 18,
  CalldataKeyword = 19,
  Caret = 20,
  CaretEqual = 21,
  CaseKeyword = 22,
  CatchKeyword = 23,
  CloseBrace = 24,
  CloseBracket = 25,
  CloseParen = 26,
  Colon = 27,
  ColonEqual = 28,
  Comma = 29,
  ConstantKeyword = 30,
  ConstructorKeyword = 31,
  ContinueKeyword = 32,
  ContractKeyword = 33,
  DaysKeyword = 34,
  DecimalExponent = 35,
  DecimalLiteral = 36,
  DecimalNumber = 37,
  DefaultKeyword = 38,
  DeleteKeyword = 39,
  DoKeyword = 40,
  DoubleQuotedAsciiStringLiteral = 41,
  DoubleQuotedUnicodeStringLiteral = 42,
  ElseKeyword = 43,
  EmitKeyword = 44,
  EndOfLine = 45,
  EnumKeyword = 46,
  Equal = 47,
  EqualEqual = 48,
  EqualGreaterThan = 49,
  ErrorKeyword = 50,
  EscapeSequence = 51,
  EtherKeyword = 52,
  EventKeyword = 53,
  Evmasm = 54,
  ExperimentalKeyword = 55,
  ExternalKeyword = 56,
  FallbackKeyword = 57,
  FalseKeyword = 58,
  FinneyKeyword = 59,
  FixedBytesType = 60,
  ForKeyword = 61,
  FromKeyword = 62,
  FunctionKeyword = 63,
  GlobalKeyword = 64,
  GreaterThan = 65,
  GreaterThanEqual = 66,
  GreaterThanGreaterThan = 67,
  GreaterThanGreaterThanEqual = 68,
  GreaterThanGreaterThanGreaterThan = 69,
  GreaterThanGreaterThanGreaterThanEqual = 70,
  GweiKeyword = 71,
  HexByteEscape = 72,
  HexCharacter = 73,
  HexLiteral = 74,
  HexStringLiteral = 75,
  HoursKeyword = 76,
  Identifier = 77,
  IdentifierPart = 78,
  IdentifierStart = 79,
  IfKeyword = 80,
  ImmutableKeyword = 81,
  ImportKeyword = 82,
  IndexedKeyword = 83,
  InterfaceKeyword = 84,
  InternalKeyword = 85,
  IsKeyword = 86,
  LeaveKeyword = 87,
  LessThan = 88,
  LessThanEqual = 89,
  LessThanLessThan = 90,
  LessThanLessThanEqual = 91,
  LetKeyword = 92,
  LibraryKeyword = 93,
  MappingKeyword = 94,
  MemoryKeyword = 95,
  Minus = 96,
  MinusEqual = 97,
  MinusGreaterThan = 98,
  MinusMinus = 99,
  MinutesKeyword = 100,
  ModifierKeyword = 101,
  MultilineComment = 102,
  NewKeyword = 103,
  NotAnIdentifierInAnyVersion = 104,
  NotAnIdentifierInSomeVersions = 105,
  OpenBrace = 106,
  OpenBracket = 107,
  OpenParen = 108,
  OverrideKeyword = 109,
  PayableKeyword = 110,
  Percent = 111,
  PercentEqual = 112,
  Period = 113,
  Plus = 114,
  PlusEqual = 115,
  PlusPlus = 116,
  PossiblySeparatedPairsOfHexDigits = 117,
  PragmaKeyword = 118,
  PrivateKeyword = 119,
  PublicKeyword = 120,
  PureKeyword = 121,
  QuestionMark = 122,
  RawIdentifier = 123,
  ReceiveKeyword = 124,
  ReturnKeyword = 125,
  ReturnsKeyword = 126,
  RevertKeyword = 127,
  SecondsKeyword = 128,
  Semicolon = 129,
  SignedFixedType = 130,
  SignedIntegerType = 131,
  SingleLineComment = 132,
  SingleQuotedAsciiStringLiteral = 133,
  SingleQuotedUnicodeStringLiteral = 134,
  Slash = 135,
  SlashEqual = 136,
  SolidityKeyword = 137,
  Star = 138,
  StarEqual = 139,
  StarStar = 140,
  StorageKeyword = 141,
  StringKeyword = 142,
  StructKeyword = 143,
  SwitchKeyword = 144,
  SzaboKeyword = 145,
  ThrowKeyword = 146,
  Tilde = 147,
  TrueKeyword = 148,
  TryKeyword = 149,
  TypeKeyword = 150,
  UncheckedKeyword = 151,
  UnicodeEscape = 152,
  UnicodeStringLiteral = 153,
  UnsignedFixedType = 154,
  UnsignedIntegerType = 155,
  UsingKeyword = 156,
  VarKeyword = 157,
  VersionPragmaValue = 158,
  ViewKeyword = 159,
  VirtualKeyword = 160,
  WeeksKeyword = 161,
  WeiKeyword = 162,
  WhileKeyword = 163,
  Whitespace = 164,
  YearsKeyword = 165,
  YulDecimalLiteral = 166,
  YulHexLiteral = 167,
  YulIdentifier = 168,
  YulKeyword = 169,
  YulReservedKeyword = 170,
}
export enum RuleKind {
  ABICoderPragma = 0,
  AddSubExpression = 1,
  AddressType = 2,
  AndExpression = 3,
  ArgumentList = 4,
  Arguments = 5,
  ArrayLiteral = 6,
  ArrayTypeName = 7,
  AssemblyFlags = 8,
  AssemblyStatement = 9,
  AssignmentExpression = 10,
  BitAndExpression = 11,
  BitOrExpression = 12,
  BitXOrExpression = 13,
  Block = 14,
  BooleanLiteral = 15,
  BreakStatement = 16,
  CatchClause = 17,
  ConditionalExpression = 18,
  ConstantDefinition = 19,
  ConstructorAttribute = 20,
  ConstructorDefinition = 21,
  ContinueStatement = 22,
  ContractBodyElement = 23,
  ContractDefinition = 24,
  DataLocation = 25,
  Definition = 26,
  DeleteStatement = 27,
  Directive = 28,
  DoWhileStatement = 29,
  ElementaryType = 30,
  EmitStatement = 31,
  EndOfFileTrivia = 32,
  EnumDefinition = 33,
  EqualityComparisonExpression = 34,
  ErrorDefinition = 35,
  ErrorParameter = 36,
  EventDefinition = 37,
  EventParameter = 38,
  ExperimentalPragma = 39,
  ExponentiationExpression = 40,
  Expression = 41,
  ExpressionStatement = 42,
  FallbackFunctionAttribute = 43,
  FallbackFunctionDefinition = 44,
  ForStatement = 45,
  FunctionAttribute = 46,
  FunctionCallExpression = 47,
  FunctionCallOptions = 48,
  FunctionDefinition = 49,
  FunctionType = 50,
  IdentifierPath = 51,
  IfStatement = 52,
  ImportDirective = 53,
  ImportPath = 54,
  IndexAccessExpression = 55,
  InheritanceSpecifier = 56,
  InheritanceSpecifierList = 57,
  InterfaceDefinition = 58,
  LeadingTrivia = 59,
  LibraryDefinition = 60,
  MappingKeyType = 61,
  MappingType = 62,
  MappingValueType = 63,
  MemberAccessExpression = 64,
  ModifierAttribute = 65,
  ModifierDefinition = 66,
  ModifierInvocation = 67,
  MulDivModExpression = 68,
  NamedArgument = 69,
  NamedArgumentList = 70,
  NewExpression = 71,
  NumberUnit = 72,
  NumericLiteral = 73,
  OrExpression = 74,
  OrderComparisonExpression = 75,
  OverrideSpecifier = 76,
  ParameterDeclaration = 77,
  ParameterList = 78,
  PayableType = 79,
  PositionalArgumentList = 80,
  PragmaDirective = 81,
  PrimaryExpression = 82,
  ReceiveFunctionAttribute = 83,
  ReceiveFunctionDefinition = 84,
  Results = 85,
  ReturnStatement = 86,
  RevertStatement = 87,
  SelectedImport = 88,
  SelectingImportDirective = 89,
  ShiftExpression = 90,
  SimpleImportDirective = 91,
  SimpleStatement = 92,
  SourceUnit = 93,
  StarImportDirective = 94,
  StateVariableAttribute = 95,
  StateVariableDeclaration = 96,
  Statement = 97,
  StringExpression = 98,
  StructDefinition = 99,
  StructMember = 100,
  ThrowStatement = 101,
  TrailingTrivia = 102,
  TryStatement = 103,
  TupleDeconstructionStatement = 104,
  TupleExpression = 105,
  TypeExpression = 106,
  TypeName = 107,
  UnaryPostfixExpression = 108,
  UnaryPrefixExpression = 109,
  UncheckedBlock = 110,
  UnnamedFunctionAttribute = 111,
  UnnamedFunctionDefinition = 112,
  UserDefinedValueTypeDefinition = 113,
  UsingDirective = 114,
  VariableDeclarationStatement = 115,
  VersionPragma = 116,
  VersionPragmaAlternatives = 117,
  VersionPragmaComparator = 118,
  VersionPragmaExpression = 119,
  VersionPragmaRange = 120,
  VersionPragmaSpecifier = 121,
  WhileStatement = 122,
  YulAssignmentStatement = 123,
  YulBlock = 124,
  YulBreakStatement = 125,
  YulContinueStatement = 126,
  YulDeclarationStatement = 127,
  YulExpression = 128,
  YulForStatement = 129,
  YulFunctionCallExpression = 130,
  YulFunctionDefinition = 131,
  YulIdentifierPath = 132,
  YulIfStatement = 133,
  YulLeaveStatement = 134,
  YulLiteral = 135,
  YulStatement = 136,
  YulSwitchStatement = 137,
  _DELIMITEDBY = 138,
  _OPTIONAL = 139,
  _REPEATED = 140,
  _SEPARATEDBY = 141,
  _SEQUENCE = 142,
  _TERMINATEDBY = 143,
}
export enum ProductionKind {
  ABICoderPragma = 0,
  AbicoderKeyword = 1,
  AbstractKeyword = 2,
  AddressKeyword = 3,
  AddressType = 4,
  Ampersand = 5,
  AmpersandAmpersand = 6,
  AmpersandEqual = 7,
  AnonymousKeyword = 8,
  ArgumentList = 9,
  ArrayLiteral = 10,
  AsKeyword = 11,
  AsciiEscape = 12,
  AsciiStringLiteral = 13,
  AssemblyFlags = 14,
  AssemblyKeyword = 15,
  AssemblyStatement = 16,
  Bang = 17,
  BangEqual = 18,
  Bar = 19,
  BarBar = 20,
  BarEqual = 21,
  Block = 22,
  BoolKeyword = 23,
  BooleanLiteral = 24,
  BreakKeyword = 25,
  BreakStatement = 26,
  ByteType = 27,
  CalldataKeyword = 28,
  Caret = 29,
  CaretEqual = 30,
  CaseKeyword = 31,
  CatchClause = 32,
  CatchKeyword = 33,
  CloseBrace = 34,
  CloseBracket = 35,
  CloseParen = 36,
  Colon = 37,
  ColonEqual = 38,
  Comma = 39,
  ConstantDefinition = 40,
  ConstantKeyword = 41,
  ConstructorAttribute = 42,
  ConstructorDefinition = 43,
  ConstructorKeyword = 44,
  ContinueKeyword = 45,
  ContinueStatement = 46,
  ContractBodyElement = 47,
  ContractDefinition = 48,
  ContractKeyword = 49,
  DataLocation = 50,
  DaysKeyword = 51,
  DecimalExponent = 52,
  DecimalLiteral = 53,
  DecimalNumber = 54,
  DefaultKeyword = 55,
  Definition = 56,
  DeleteKeyword = 57,
  DeleteStatement = 58,
  Directive = 59,
  DoKeyword = 60,
  DoWhileStatement = 61,
  DoubleQuotedAsciiStringLiteral = 62,
  DoubleQuotedUnicodeStringLiteral = 63,
  ElementaryType = 64,
  ElseKeyword = 65,
  EmitKeyword = 66,
  EmitStatement = 67,
  EndOfFileTrivia = 68,
  EndOfLine = 69,
  EnumDefinition = 70,
  EnumKeyword = 71,
  Equal = 72,
  EqualEqual = 73,
  EqualGreaterThan = 74,
  ErrorDefinition = 75,
  ErrorKeyword = 76,
  ErrorParameter = 77,
  EscapeSequence = 78,
  EtherKeyword = 79,
  EventDefinition = 80,
  EventKeyword = 81,
  EventParameter = 82,
  Evmasm = 83,
  ExperimentalKeyword = 84,
  ExperimentalPragma = 85,
  Expression = 86,
  ExpressionStatement = 87,
  ExternalKeyword = 88,
  FallbackFunctionAttribute = 89,
  FallbackFunctionDefinition = 90,
  FallbackKeyword = 91,
  FalseKeyword = 92,
  FinneyKeyword = 93,
  FixedBytesType = 94,
  ForKeyword = 95,
  ForStatement = 96,
  FromKeyword = 97,
  FunctionAttribute = 98,
  FunctionCallOptions = 99,
  FunctionDefinition = 100,
  FunctionKeyword = 101,
  FunctionType = 102,
  GlobalKeyword = 103,
  GreaterThan = 104,
  GreaterThanEqual = 105,
  GreaterThanGreaterThan = 106,
  GreaterThanGreaterThanEqual = 107,
  GreaterThanGreaterThanGreaterThan = 108,
  GreaterThanGreaterThanGreaterThanEqual = 109,
  GweiKeyword = 110,
  HexByteEscape = 111,
  HexCharacter = 112,
  HexLiteral = 113,
  HexStringLiteral = 114,
  HoursKeyword = 115,
  Identifier = 116,
  IdentifierPart = 117,
  IdentifierPath = 118,
  IdentifierStart = 119,
  IfKeyword = 120,
  IfStatement = 121,
  ImmutableKeyword = 122,
  ImportDirective = 123,
  ImportKeyword = 124,
  ImportPath = 125,
  IndexedKeyword = 126,
  InheritanceSpecifier = 127,
  InheritanceSpecifierList = 128,
  InterfaceDefinition = 129,
  InterfaceKeyword = 130,
  InternalKeyword = 131,
  IsKeyword = 132,
  LeadingTrivia = 133,
  LeaveKeyword = 134,
  LessThan = 135,
  LessThanEqual = 136,
  LessThanLessThan = 137,
  LessThanLessThanEqual = 138,
  LetKeyword = 139,
  LibraryDefinition = 140,
  LibraryKeyword = 141,
  MappingKeyType = 142,
  MappingKeyword = 143,
  MappingType = 144,
  MappingValueType = 145,
  MemoryKeyword = 146,
  Minus = 147,
  MinusEqual = 148,
  MinusGreaterThan = 149,
  MinusMinus = 150,
  MinutesKeyword = 151,
  ModifierAttribute = 152,
  ModifierDefinition = 153,
  ModifierInvocation = 154,
  ModifierKeyword = 155,
  MultilineComment = 156,
  NamedArgument = 157,
  NamedArgumentList = 158,
  NewExpression = 159,
  NewKeyword = 160,
  NotAnIdentifierInAnyVersion = 161,
  NotAnIdentifierInSomeVersions = 162,
  NumberUnit = 163,
  NumericLiteral = 164,
  OpenBrace = 165,
  OpenBracket = 166,
  OpenParen = 167,
  OverrideKeyword = 168,
  OverrideSpecifier = 169,
  ParameterDeclaration = 170,
  ParameterList = 171,
  PayableKeyword = 172,
  PayableType = 173,
  Percent = 174,
  PercentEqual = 175,
  Period = 176,
  Plus = 177,
  PlusEqual = 178,
  PlusPlus = 179,
  PositionalArgumentList = 180,
  PossiblySeparatedPairsOfHexDigits = 181,
  PragmaDirective = 182,
  PragmaKeyword = 183,
  PrimaryExpression = 184,
  PrivateKeyword = 185,
  PublicKeyword = 186,
  PureKeyword = 187,
  QuestionMark = 188,
  RawIdentifier = 189,
  ReceiveFunctionAttribute = 190,
  ReceiveFunctionDefinition = 191,
  ReceiveKeyword = 192,
  ReturnKeyword = 193,
  ReturnStatement = 194,
  ReturnsKeyword = 195,
  RevertKeyword = 196,
  RevertStatement = 197,
  SecondsKeyword = 198,
  SelectedImport = 199,
  SelectingImportDirective = 200,
  Semicolon = 201,
  SignedFixedType = 202,
  SignedIntegerType = 203,
  SimpleImportDirective = 204,
  SimpleStatement = 205,
  SingleLineComment = 206,
  SingleQuotedAsciiStringLiteral = 207,
  SingleQuotedUnicodeStringLiteral = 208,
  Slash = 209,
  SlashEqual = 210,
  SolidityKeyword = 211,
  SourceUnit = 212,
  Star = 213,
  StarEqual = 214,
  StarImportDirective = 215,
  StarStar = 216,
  StateVariableAttribute = 217,
  StateVariableDeclaration = 218,
  Statement = 219,
  StorageKeyword = 220,
  StringExpression = 221,
  StringKeyword = 222,
  StructDefinition = 223,
  StructKeyword = 224,
  StructMember = 225,
  SwitchKeyword = 226,
  SzaboKeyword = 227,
  ThrowKeyword = 228,
  ThrowStatement = 229,
  Tilde = 230,
  TrailingTrivia = 231,
  TrueKeyword = 232,
  TryKeyword = 233,
  TryStatement = 234,
  TupleDeconstructionStatement = 235,
  TupleExpression = 236,
  TypeExpression = 237,
  TypeKeyword = 238,
  TypeName = 239,
  UncheckedBlock = 240,
  UncheckedKeyword = 241,
  UnicodeEscape = 242,
  UnicodeStringLiteral = 243,
  UnnamedFunctionAttribute = 244,
  UnnamedFunctionDefinition = 245,
  UnsignedFixedType = 246,
  UnsignedIntegerType = 247,
  UserDefinedValueTypeDefinition = 248,
  UsingDirective = 249,
  UsingKeyword = 250,
  VarKeyword = 251,
  VariableDeclarationStatement = 252,
  VersionPragma = 253,
  VersionPragmaExpression = 254,
  VersionPragmaSpecifier = 255,
  VersionPragmaValue = 256,
  ViewKeyword = 257,
  VirtualKeyword = 258,
  WeeksKeyword = 259,
  WeiKeyword = 260,
  WhileKeyword = 261,
  WhileStatement = 262,
  Whitespace = 263,
  YearsKeyword = 264,
  YulAssignmentStatement = 265,
  YulBlock = 266,
  YulBreakStatement = 267,
  YulContinueStatement = 268,
  YulDecimalLiteral = 269,
  YulDeclarationStatement = 270,
  YulExpression = 271,
  YulForStatement = 272,
  YulFunctionDefinition = 273,
  YulHexLiteral = 274,
  YulIdentifier = 275,
  YulIdentifierPath = 276,
  YulIfStatement = 277,
  YulKeyword = 278,
  YulLeaveStatement = 279,
  YulLiteral = 280,
  YulReservedKeyword = 281,
  YulStatement = 282,
  YulSwitchStatement = 283,
}
export class RuleNode {
  get type(): NodeType.Rule;
  get kind(): RuleKind;
  get range(): bigint[];
  get rangeIncludingTrivia(): bigint[];
  children(): (RuleNode | TokenNode)[];
}
export class TokenNode {
  get type(): NodeType.Token;
  get kind(): TokenKind;
  get range(): bigint[];
  get rangeIncludingTrivia(): bigint[];
  trivia(): (RuleNode | TokenNode)[];
}
export class Language {
  constructor(version: string);
  version(): string;
  parse(productionKind: ProductionKind, input: string): ParseOutput;
}
export class ParseOutput {
  parseTree(): RuleNode | TokenNode | null;
  errorCount(): bigint;
  errorsAsStrings(sourceId: string, source: string, withColour: boolean): Array<string>;
  isValid(): boolean;
}
