// Slang License: https://github.com/NomicFoundation/slang/blob/main/LICENSE
// NAPI-RS License: https://github.com/napi-rs/napi-rs/blob/main/LICENSE

// @ts-nocheck

/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export enum NodeType {
  Rule = 0,
  Token = 1,
}
export enum TokenKind {
  AbicoderKeyword = 0,
  AbstractKeyword = 1,
  AddressKeyword = 2,
  Ampersand = 3,
  AmpersandAmpersand = 4,
  AmpersandEqual = 5,
  AnonymousKeyword = 6,
  AsKeyword = 7,
  AsciiEscape = 8,
  AsciiStringLiteral = 9,
  AssemblyKeyword = 10,
  Asterisk = 11,
  AsteriskAsterisk = 12,
  AsteriskEqual = 13,
  Bang = 14,
  BangEqual = 15,
  Bar = 16,
  BarBar = 17,
  BarEqual = 18,
  BoolKeyword = 19,
  BreakKeyword = 20,
  ByteType = 21,
  CalldataKeyword = 22,
  Caret = 23,
  CaretEqual = 24,
  CaseKeyword = 25,
  CatchKeyword = 26,
  CloseBrace = 27,
  CloseBracket = 28,
  CloseParen = 29,
  Colon = 30,
  ColonEqual = 31,
  Comma = 32,
  ConstantKeyword = 33,
  ConstructorKeyword = 34,
  ContinueKeyword = 35,
  ContractKeyword = 36,
  DaysKeyword = 37,
  DecimalExponent = 38,
  DecimalLiteral = 39,
  DecimalNumber = 40,
  DefaultKeyword = 41,
  DeleteKeyword = 42,
  DoKeyword = 43,
  DoubleQuotedAsciiStringLiteral = 44,
  DoubleQuotedUnicodeStringLiteral = 45,
  ElseKeyword = 46,
  EmitKeyword = 47,
  EndOfLine = 48,
  EnumKeyword = 49,
  Equal = 50,
  EqualEqual = 51,
  EqualGreaterThan = 52,
  ErrorKeyword = 53,
  EscapeSequence = 54,
  EtherKeyword = 55,
  EventKeyword = 56,
  Evmasm = 57,
  ExperimentalKeyword = 58,
  ExternalKeyword = 59,
  FallbackKeyword = 60,
  FalseKeyword = 61,
  FinneyKeyword = 62,
  FixedBytesType = 63,
  ForKeyword = 64,
  FromKeyword = 65,
  FunctionKeyword = 66,
  GlobalKeyword = 67,
  GreaterThan = 68,
  GreaterThanEqual = 69,
  GreaterThanGreaterThan = 70,
  GreaterThanGreaterThanEqual = 71,
  GreaterThanGreaterThanGreaterThan = 72,
  GreaterThanGreaterThanGreaterThanEqual = 73,
  GweiKeyword = 74,
  HexByteEscape = 75,
  HexCharacter = 76,
  HexLiteral = 77,
  HexStringLiteral = 78,
  HoursKeyword = 79,
  Identifier = 80,
  IdentifierPart = 81,
  IdentifierStart = 82,
  IfKeyword = 83,
  ImmutableKeyword = 84,
  ImportKeyword = 85,
  IndexedKeyword = 86,
  InterfaceKeyword = 87,
  InternalKeyword = 88,
  IsKeyword = 89,
  LeaveKeyword = 90,
  LessThan = 91,
  LessThanEqual = 92,
  LessThanLessThan = 93,
  LessThanLessThanEqual = 94,
  LetKeyword = 95,
  LibraryKeyword = 96,
  MappingKeyword = 97,
  MemoryKeyword = 98,
  Minus = 99,
  MinusEqual = 100,
  MinusGreaterThan = 101,
  MinusMinus = 102,
  MinutesKeyword = 103,
  ModifierKeyword = 104,
  MultilineComment = 105,
  NewKeyword = 106,
  NotAnIdentifierInAnyVersion = 107,
  NotAnIdentifierInSomeVersions = 108,
  OpenBrace = 109,
  OpenBracket = 110,
  OpenParen = 111,
  OverrideKeyword = 112,
  PayableKeyword = 113,
  Percent = 114,
  PercentEqual = 115,
  Period = 116,
  Plus = 117,
  PlusEqual = 118,
  PlusPlus = 119,
  PossiblySeparatedPairsOfHexDigits = 120,
  PragmaKeyword = 121,
  PrivateKeyword = 122,
  PublicKeyword = 123,
  PureKeyword = 124,
  QuestionMark = 125,
  RawIdentifier = 126,
  ReceiveKeyword = 127,
  ReturnKeyword = 128,
  ReturnsKeyword = 129,
  RevertKeyword = 130,
  SecondsKeyword = 131,
  Semicolon = 132,
  SignedFixedType = 133,
  SignedIntegerType = 134,
  SingleLineComment = 135,
  SingleQuotedAsciiStringLiteral = 136,
  SingleQuotedUnicodeStringLiteral = 137,
  Slash = 138,
  SlashEqual = 139,
  SolidityKeyword = 140,
  StorageKeyword = 141,
  StringKeyword = 142,
  StructKeyword = 143,
  SwitchKeyword = 144,
  SzaboKeyword = 145,
  ThrowKeyword = 146,
  Tilde = 147,
  TrueKeyword = 148,
  TryKeyword = 149,
  TypeKeyword = 150,
  UncheckedKeyword = 151,
  UnicodeEscape = 152,
  UnicodeStringLiteral = 153,
  UnsignedFixedType = 154,
  UnsignedIntegerType = 155,
  UsingKeyword = 156,
  VarKeyword = 157,
  VersionPragmaValue = 158,
  ViewKeyword = 159,
  VirtualKeyword = 160,
  WeeksKeyword = 161,
  WeiKeyword = 162,
  WhileKeyword = 163,
  Whitespace = 164,
  YearsKeyword = 165,
  YulDecimalLiteral = 166,
  YulHexLiteral = 167,
  YulIdentifier = 168,
  YulKeyword = 169,
  YulReservedKeyword = 170,
}
export enum RuleKind {
  ABICoderPragma = 0,
  AddSubExpression = 1,
  AddSubOperator = 2,
  AddressType = 3,
  AndExpression = 4,
  AndOperator = 5,
  ArgumentList = 6,
  Arguments = 7,
  ArrayLiteral = 8,
  ArrayTypeName = 9,
  AssemblyFlags = 10,
  AssemblyStatement = 11,
  AssignmentExpression = 12,
  AssignmentOperator = 13,
  AsteriskImport = 14,
  BitAndExpression = 15,
  BitAndOperator = 16,
  BitOrExpression = 17,
  BitOrOperator = 18,
  BitXOrExpression = 19,
  BitXOrOperator = 20,
  Block = 21,
  BooleanLiteral = 22,
  BreakStatement = 23,
  CatchClause = 24,
  ConditionalExpression = 25,
  ConditionalOperator = 26,
  ConstantDefinition = 27,
  ConstructorAttribute = 28,
  ConstructorDefinition = 29,
  ContinueStatement = 30,
  ContractBodyElement = 31,
  ContractDefinition = 32,
  DataLocation = 33,
  Definition = 34,
  DeleteStatement = 35,
  Directive = 36,
  DoWhileStatement = 37,
  ElementaryType = 38,
  EmitStatement = 39,
  EndOfFileTrivia = 40,
  EnumDefinition = 41,
  EqualityComparisonExpression = 42,
  EqualityComparisonOperator = 43,
  ErrorDefinition = 44,
  ErrorParameter = 45,
  EventDefinition = 46,
  EventParameter = 47,
  ExperimentalPragma = 48,
  ExponentiationExpression = 49,
  ExponentiationOperator = 50,
  Expression = 51,
  ExpressionStatement = 52,
  FallbackFunctionAttribute = 53,
  FallbackFunctionDefinition = 54,
  ForStatement = 55,
  FunctionAttribute = 56,
  FunctionCallExpression = 57,
  FunctionCallOperator = 58,
  FunctionCallOptions = 59,
  FunctionDefinition = 60,
  FunctionType = 61,
  IdentifierPath = 62,
  IfStatement = 63,
  ImportAlias = 64,
  ImportDirective = 65,
  ImportPath = 66,
  IndexAccessExpression = 67,
  IndexAccessOperator = 68,
  InheritanceSpecifier = 69,
  InheritanceSpecifierList = 70,
  InterfaceDefinition = 71,
  LeadingTrivia = 72,
  LibraryDefinition = 73,
  MappingKeyType = 74,
  MappingType = 75,
  MappingValueType = 76,
  MemberAccessExpression = 77,
  MemberAccessOperator = 78,
  ModifierAttribute = 79,
  ModifierDefinition = 80,
  ModifierInvocation = 81,
  MulDivModExpression = 82,
  MulDivModOperator = 83,
  NamedArgument = 84,
  NamedArgumentList = 85,
  NewExpression = 86,
  NumberUnit = 87,
  NumericExpression = 88,
  OrExpression = 89,
  OrOperator = 90,
  OrderComparisonExpression = 91,
  OrderComparisonOperator = 92,
  OverrideSpecifier = 93,
  ParameterDeclaration = 94,
  ParameterList = 95,
  PayableType = 96,
  PositionalArgumentList = 97,
  PragmaDirective = 98,
  PrimaryExpression = 99,
  ReceiveFunctionAttribute = 100,
  ReceiveFunctionDefinition = 101,
  Results = 102,
  ReturnStatement = 103,
  RevertStatement = 104,
  SelectiveImport = 105,
  ShiftExpression = 106,
  ShiftOperator = 107,
  SimpleImport = 108,
  SimpleStatement = 109,
  SourceUnit = 110,
  StateVariableAttribute = 111,
  StateVariableDeclaration = 112,
  Statement = 113,
  StringExpression = 114,
  StructDefinition = 115,
  StructMember = 116,
  ThrowStatement = 117,
  TrailingTrivia = 118,
  TryStatement = 119,
  TupleDeconstructionStatement = 120,
  TupleExpression = 121,
  TypeExpression = 122,
  TypeName = 123,
  UnaryPostfixExpression = 124,
  UnaryPostfixOperator = 125,
  UnaryPrefixExpression = 126,
  UnaryPrefixOperator = 127,
  UncheckedBlock = 128,
  UnnamedFunctionAttribute = 129,
  UnnamedFunctionDefinition = 130,
  UserDefinedOperator = 131,
  UserDefinedValueTypeDefinition = 132,
  UsingDirective = 133,
  VariableDeclarationStatement = 134,
  VersionPragma = 135,
  VersionPragmaAlternatives = 136,
  VersionPragmaComparator = 137,
  VersionPragmaExpression = 138,
  VersionPragmaRange = 139,
  VersionPragmaSpecifier = 140,
  WhileStatement = 141,
  YulAssignmentStatement = 142,
  YulBlock = 143,
  YulBreakStatement = 144,
  YulContinueStatement = 145,
  YulDeclarationStatement = 146,
  YulExpression = 147,
  YulForStatement = 148,
  YulFunctionCallExpression = 149,
  YulFunctionDefinition = 150,
  YulIdentifierPath = 151,
  YulIfStatement = 152,
  YulLeaveStatement = 153,
  YulLiteral = 154,
  YulStatement = 155,
  YulSwitchStatement = 156,
  _DELIMITEDBY = 157,
  _OPTIONAL = 158,
  _REPEATED = 159,
  _SEPARATEDBY = 160,
  _SEQUENCE = 161,
  _TERMINATEDBY = 162,
}
export enum ProductionKind {
  ABICoderPragma = 0,
  AbicoderKeyword = 1,
  AbstractKeyword = 2,
  AddSubOperator = 3,
  AddressKeyword = 4,
  AddressType = 5,
  Ampersand = 6,
  AmpersandAmpersand = 7,
  AmpersandEqual = 8,
  AndOperator = 9,
  AnonymousKeyword = 10,
  ArgumentList = 11,
  ArrayLiteral = 12,
  AsKeyword = 13,
  AsciiEscape = 14,
  AsciiStringLiteral = 15,
  AssemblyFlags = 16,
  AssemblyKeyword = 17,
  AssemblyStatement = 18,
  AssignmentOperator = 19,
  Asterisk = 20,
  AsteriskAsterisk = 21,
  AsteriskEqual = 22,
  AsteriskImport = 23,
  Bang = 24,
  BangEqual = 25,
  Bar = 26,
  BarBar = 27,
  BarEqual = 28,
  BitAndOperator = 29,
  BitOrOperator = 30,
  BitXOrOperator = 31,
  Block = 32,
  BoolKeyword = 33,
  BooleanLiteral = 34,
  BreakKeyword = 35,
  BreakStatement = 36,
  ByteType = 37,
  CalldataKeyword = 38,
  Caret = 39,
  CaretEqual = 40,
  CaseKeyword = 41,
  CatchClause = 42,
  CatchKeyword = 43,
  CloseBrace = 44,
  CloseBracket = 45,
  CloseParen = 46,
  Colon = 47,
  ColonEqual = 48,
  Comma = 49,
  ConditionalOperator = 50,
  ConstantDefinition = 51,
  ConstantKeyword = 52,
  ConstructorAttribute = 53,
  ConstructorDefinition = 54,
  ConstructorKeyword = 55,
  ContinueKeyword = 56,
  ContinueStatement = 57,
  ContractBodyElement = 58,
  ContractDefinition = 59,
  ContractKeyword = 60,
  DataLocation = 61,
  DaysKeyword = 62,
  DecimalExponent = 63,
  DecimalLiteral = 64,
  DecimalNumber = 65,
  DefaultKeyword = 66,
  Definition = 67,
  DeleteKeyword = 68,
  DeleteStatement = 69,
  Directive = 70,
  DoKeyword = 71,
  DoWhileStatement = 72,
  DoubleQuotedAsciiStringLiteral = 73,
  DoubleQuotedUnicodeStringLiteral = 74,
  ElementaryType = 75,
  ElseKeyword = 76,
  EmitKeyword = 77,
  EmitStatement = 78,
  EndOfFileTrivia = 79,
  EndOfLine = 80,
  EnumDefinition = 81,
  EnumKeyword = 82,
  Equal = 83,
  EqualEqual = 84,
  EqualGreaterThan = 85,
  EqualityComparisonOperator = 86,
  ErrorDefinition = 87,
  ErrorKeyword = 88,
  ErrorParameter = 89,
  EscapeSequence = 90,
  EtherKeyword = 91,
  EventDefinition = 92,
  EventKeyword = 93,
  EventParameter = 94,
  Evmasm = 95,
  ExperimentalKeyword = 96,
  ExperimentalPragma = 97,
  ExponentiationOperator = 98,
  Expression = 99,
  ExpressionStatement = 100,
  ExternalKeyword = 101,
  FallbackFunctionAttribute = 102,
  FallbackFunctionDefinition = 103,
  FallbackKeyword = 104,
  FalseKeyword = 105,
  FinneyKeyword = 106,
  FixedBytesType = 107,
  ForKeyword = 108,
  ForStatement = 109,
  FromKeyword = 110,
  FunctionAttribute = 111,
  FunctionCallOperator = 112,
  FunctionCallOptions = 113,
  FunctionDefinition = 114,
  FunctionKeyword = 115,
  FunctionType = 116,
  GlobalKeyword = 117,
  GreaterThan = 118,
  GreaterThanEqual = 119,
  GreaterThanGreaterThan = 120,
  GreaterThanGreaterThanEqual = 121,
  GreaterThanGreaterThanGreaterThan = 122,
  GreaterThanGreaterThanGreaterThanEqual = 123,
  GweiKeyword = 124,
  HexByteEscape = 125,
  HexCharacter = 126,
  HexLiteral = 127,
  HexStringLiteral = 128,
  HoursKeyword = 129,
  Identifier = 130,
  IdentifierPart = 131,
  IdentifierPath = 132,
  IdentifierStart = 133,
  IfKeyword = 134,
  IfStatement = 135,
  ImmutableKeyword = 136,
  ImportAlias = 137,
  ImportDirective = 138,
  ImportKeyword = 139,
  ImportPath = 140,
  IndexAccessOperator = 141,
  IndexedKeyword = 142,
  InheritanceSpecifier = 143,
  InheritanceSpecifierList = 144,
  InterfaceDefinition = 145,
  InterfaceKeyword = 146,
  InternalKeyword = 147,
  IsKeyword = 148,
  LeadingTrivia = 149,
  LeaveKeyword = 150,
  LessThan = 151,
  LessThanEqual = 152,
  LessThanLessThan = 153,
  LessThanLessThanEqual = 154,
  LetKeyword = 155,
  LibraryDefinition = 156,
  LibraryKeyword = 157,
  MappingKeyType = 158,
  MappingKeyword = 159,
  MappingType = 160,
  MappingValueType = 161,
  MemberAccessOperator = 162,
  MemoryKeyword = 163,
  Minus = 164,
  MinusEqual = 165,
  MinusGreaterThan = 166,
  MinusMinus = 167,
  MinutesKeyword = 168,
  ModifierAttribute = 169,
  ModifierDefinition = 170,
  ModifierInvocation = 171,
  ModifierKeyword = 172,
  MulDivModOperator = 173,
  MultilineComment = 174,
  NamedArgument = 175,
  NamedArgumentList = 176,
  NewExpression = 177,
  NewKeyword = 178,
  NotAnIdentifierInAnyVersion = 179,
  NotAnIdentifierInSomeVersions = 180,
  NumberUnit = 181,
  NumericExpression = 182,
  OpenBrace = 183,
  OpenBracket = 184,
  OpenParen = 185,
  OrOperator = 186,
  OrderComparisonOperator = 187,
  OverrideKeyword = 188,
  OverrideSpecifier = 189,
  ParameterDeclaration = 190,
  ParameterList = 191,
  PayableKeyword = 192,
  PayableType = 193,
  Percent = 194,
  PercentEqual = 195,
  Period = 196,
  Plus = 197,
  PlusEqual = 198,
  PlusPlus = 199,
  PositionalArgumentList = 200,
  PossiblySeparatedPairsOfHexDigits = 201,
  PragmaDirective = 202,
  PragmaKeyword = 203,
  PrimaryExpression = 204,
  PrivateKeyword = 205,
  PublicKeyword = 206,
  PureKeyword = 207,
  QuestionMark = 208,
  RawIdentifier = 209,
  ReceiveFunctionAttribute = 210,
  ReceiveFunctionDefinition = 211,
  ReceiveKeyword = 212,
  ReturnKeyword = 213,
  ReturnStatement = 214,
  ReturnsKeyword = 215,
  RevertKeyword = 216,
  RevertStatement = 217,
  SecondsKeyword = 218,
  SelectiveImport = 219,
  Semicolon = 220,
  ShiftOperator = 221,
  SignedFixedType = 222,
  SignedIntegerType = 223,
  SimpleImport = 224,
  SimpleStatement = 225,
  SingleLineComment = 226,
  SingleQuotedAsciiStringLiteral = 227,
  SingleQuotedUnicodeStringLiteral = 228,
  Slash = 229,
  SlashEqual = 230,
  SolidityKeyword = 231,
  SourceUnit = 232,
  StateVariableAttribute = 233,
  StateVariableDeclaration = 234,
  Statement = 235,
  StorageKeyword = 236,
  StringExpression = 237,
  StringKeyword = 238,
  StructDefinition = 239,
  StructKeyword = 240,
  StructMember = 241,
  SwitchKeyword = 242,
  SzaboKeyword = 243,
  ThrowKeyword = 244,
  ThrowStatement = 245,
  Tilde = 246,
  TrailingTrivia = 247,
  TrueKeyword = 248,
  TryKeyword = 249,
  TryStatement = 250,
  TupleDeconstructionStatement = 251,
  TupleExpression = 252,
  TypeExpression = 253,
  TypeKeyword = 254,
  TypeName = 255,
  UnaryPostfixOperator = 256,
  UnaryPrefixOperator = 257,
  UncheckedBlock = 258,
  UncheckedKeyword = 259,
  UnicodeEscape = 260,
  UnicodeStringLiteral = 261,
  UnnamedFunctionAttribute = 262,
  UnnamedFunctionDefinition = 263,
  UnsignedFixedType = 264,
  UnsignedIntegerType = 265,
  UserDefinedOperator = 266,
  UserDefinedValueTypeDefinition = 267,
  UsingDirective = 268,
  UsingKeyword = 269,
  VarKeyword = 270,
  VariableDeclarationStatement = 271,
  VersionPragma = 272,
  VersionPragmaExpression = 273,
  VersionPragmaSpecifier = 274,
  VersionPragmaValue = 275,
  ViewKeyword = 276,
  VirtualKeyword = 277,
  WeeksKeyword = 278,
  WeiKeyword = 279,
  WhileKeyword = 280,
  WhileStatement = 281,
  Whitespace = 282,
  YearsKeyword = 283,
  YulAssignmentStatement = 284,
  YulBlock = 285,
  YulBreakStatement = 286,
  YulContinueStatement = 287,
  YulDecimalLiteral = 288,
  YulDeclarationStatement = 289,
  YulExpression = 290,
  YulForStatement = 291,
  YulFunctionDefinition = 292,
  YulHexLiteral = 293,
  YulIdentifier = 294,
  YulIdentifierPath = 295,
  YulIfStatement = 296,
  YulKeyword = 297,
  YulLeaveStatement = 298,
  YulLiteral = 299,
  YulReservedKeyword = 300,
  YulStatement = 301,
  YulSwitchStatement = 302,
}
export class RuleNode {
  get type(): NodeType.Rule;
  get kind(): RuleKind;
  get byteRange(): [start: number, end: number];
  get charRange(): [start: number, end: number];
  get byteRangeIncludingTrivia(): [start: number, end: number];
  get charRangeIncludingTrivia(): [start: number, end: number];
  get children(): (RuleNode | TokenNode)[];
}
export class TokenNode {
  get type(): NodeType.Token;
  get kind(): TokenKind;
  get byteRange(): [start: number, end: number];
  get charRange(): [start: number, end: number];
  get byteRangeIncludingTrivia(): [start: number, end: number];
  get charRangeIncludingTrivia(): [start: number, end: number];
  get trivia(): (RuleNode | TokenNode)[];
}
export class Language {
  constructor(version: string);
  get version(): string;
  parse(productionKind: ProductionKind, input: string): ParseOutput;
}
export class ParseOutput {
  get parseTree(): RuleNode | TokenNode | null;
  get errors(): Array<ParseError>;
  get isValid(): boolean;
}
export class ParseError {
  get bytePosition(): number;
  get charPosition(): number;
  get expected(): Array<string>;
  toErrorReport(sourceId: string, source: string, withColour: boolean): string;
}
