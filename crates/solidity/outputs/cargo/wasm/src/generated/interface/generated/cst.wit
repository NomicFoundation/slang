// This file is generated automatically by infrastructure scripts. Please don't edit by hand.

interface cst {
    /// Represents different kinds of nonterminal nodes in the syntax tree.
    /// These are nodes that can have child nodes and represent higher-level language constructs.
    enum nonterminal-kind {
                /// This kind represents a `AbicoderPragma` node, with the following structure: 
                ///
                /// ```ebnf
                /// AbicoderPragma = (* abicoder_keyword: *) ABICODER_KEYWORD
                ///                  (* version: *) IDENTIFIER;
                /// ```
                %abicoder-pragma,
                /// This kind represents a `AdditiveExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// AdditiveExpression = (* left_operand: *) Expression
                ///                      (* operator: *) PLUS
                ///                      (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AdditiveExpression = (* left_operand: *) Expression
                ///                      (* operator: *) MINUS
                ///                      (* right_operand: *) Expression;
                /// ```
                %additive-expression,
                /// This kind represents a `AddressType` node, with the following structure: 
                ///
                /// ```ebnf
                /// AddressType = (* address_keyword: *) ADDRESS_KEYWORD
                ///               (* payable_keyword: *) PAYABLE_KEYWORD?;
                /// ```
                %address-type,
                /// This kind represents a `AndExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// AndExpression = (* left_operand: *) Expression
                ///                 (* operator: *) AMPERSAND_AMPERSAND
                ///                 (* right_operand: *) Expression;
                /// ```
                %and-expression,
                /// This kind represents a `ArgumentsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// ArgumentsDeclaration = (* variant: *) PositionalArgumentsDeclaration
                ///                      | (* variant: *) NamedArgumentsDeclaration;
                /// ```
                %arguments-declaration,
                /// This kind represents a `ArrayExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// ArrayExpression = (* open_bracket: *) OPEN_BRACKET
                ///                   (* items: *) ArrayValues
                ///                   (* close_bracket: *) CLOSE_BRACKET;
                /// ```
                %array-expression,
                /// This kind represents a `ArrayTypeName` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// ArrayTypeName = (* operand: *) TypeName
                ///                 (* open_bracket: *) OPEN_BRACKET
                ///                 (* index: *) Expression?
                ///                 (* close_bracket: *) CLOSE_BRACKET;
                /// ```
                %array-type-name,
                /// This kind represents a `ArrayValues` node, with the following structure: 
                ///
                /// ```ebnf
                /// ArrayValues = (* item: *) Expression ((* separator: *) COMMA (* item: *) Expression)*;
                /// ```
                %array-values,
                /// This kind represents a `AssemblyFlags` node, with the following structure: 
                ///
                /// ```ebnf
                /// AssemblyFlags = (* item: *) StringLiteral ((* separator: *) COMMA (* item: *) StringLiteral)*;
                /// ```
                %assembly-flags,
                /// This kind represents a `AssemblyFlagsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// AssemblyFlagsDeclaration = (* open_paren: *) OPEN_PAREN
                ///                            (* flags: *) AssemblyFlags
                ///                            (* close_paren: *) CLOSE_PAREN;
                /// ```
                %assembly-flags-declaration,
                /// This kind represents a `AssemblyStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// AssemblyStatement = (* assembly_keyword: *) ASSEMBLY_KEYWORD
                ///                     (* label: *) StringLiteral?
                ///                     (* flags: *) AssemblyFlagsDeclaration?
                ///                     (* body: *) YulBlock;
                /// ```
                %assembly-statement,
                /// This kind represents a `AssignmentExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) BAR_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) PLUS_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) MINUS_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) CARET_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) SLASH_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) PERCENT_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) ASTERISK_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) AMPERSAND_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) LESS_THAN_LESS_THAN_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) GREATER_THAN_GREATER_THAN_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// AssignmentExpression = (* left_operand: *) Expression
                ///                        (* operator: *) GREATER_THAN_GREATER_THAN_GREATER_THAN_EQUAL
                ///                        (* right_operand: *) Expression;
                /// ```
                %assignment-expression,
                /// This kind represents a `BitwiseAndExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// BitwiseAndExpression = (* left_operand: *) Expression
                ///                        (* operator: *) AMPERSAND
                ///                        (* right_operand: *) Expression;
                /// ```
                %bitwise-and-expression,
                /// This kind represents a `BitwiseOrExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// BitwiseOrExpression = (* left_operand: *) Expression
                ///                       (* operator: *) BAR
                ///                       (* right_operand: *) Expression;
                /// ```
                %bitwise-or-expression,
                /// This kind represents a `BitwiseXorExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// BitwiseXorExpression = (* left_operand: *) Expression
                ///                        (* operator: *) CARET
                ///                        (* right_operand: *) Expression;
                /// ```
                %bitwise-xor-expression,
                /// This kind represents a `Block` node, with the following structure: 
                ///
                /// ```ebnf
                /// Block = (* open_brace: *) OPEN_BRACE
                ///         (* statements: *) Statements
                ///         (* close_brace: *) CLOSE_BRACE;
                /// ```
                %block,
                /// This kind represents a `BreakStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// BreakStatement = (* break_keyword: *) BREAK_KEYWORD
                ///                  (* semicolon: *) SEMICOLON;
                /// ```
                %break-statement,
                /// This kind represents a `CallOptions` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.2 *)
                /// CallOptions = (* item: *) NamedArgument ((* separator: *) COMMA (* item: *) NamedArgument)*;
                /// ```
                %call-options,
                /// This kind represents a `CallOptionsExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// (* Introduced in 0.6.2 *)
                /// CallOptionsExpression = (* operand: *) Expression
                ///                         (* open_brace: *) OPEN_BRACE
                ///                         (* options: *) CallOptions
                ///                         (* close_brace: *) CLOSE_BRACE;
                /// ```
                %call-options-expression,
                /// This kind represents a `CatchClause` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// CatchClause = (* catch_keyword: *) CATCH_KEYWORD
                ///               (* error: *) CatchClauseError?
                ///               (* body: *) Block;
                /// ```
                %catch-clause,
                /// This kind represents a `CatchClauseError` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// CatchClauseError = (* name: *) IDENTIFIER?
                ///                    (* parameters: *) ParametersDeclaration;
                /// ```
                %catch-clause-error,
                /// This kind represents a `CatchClauses` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// CatchClauses = (* item: *) CatchClause+;
                /// ```
                %catch-clauses,
                /// This kind represents a `ComparisonExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// ComparisonExpression = (* left_operand: *) Expression
                ///                        (* operator: *) LESS_THAN
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// ComparisonExpression = (* left_operand: *) Expression
                ///                        (* operator: *) GREATER_THAN
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// ComparisonExpression = (* left_operand: *) Expression
                ///                        (* operator: *) LESS_THAN_EQUAL
                ///                        (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// ComparisonExpression = (* left_operand: *) Expression
                ///                        (* operator: *) GREATER_THAN_EQUAL
                ///                        (* right_operand: *) Expression;
                /// ```
                %comparison-expression,
                /// This kind represents a `ConditionalExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// ConditionalExpression = (* operand: *) Expression
                ///                         (* question_mark: *) QUESTION_MARK
                ///                         (* true_expression: *) Expression
                ///                         (* colon: *) COLON
                ///                         (* false_expression: *) Expression;
                /// ```
                %conditional-expression,
                /// This kind represents a `ConstantDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.7.4 *)
                /// ConstantDefinition = (* type_name: *) TypeName
                ///                      (* constant_keyword: *) CONSTANT_KEYWORD
                ///                      (* name: *) IDENTIFIER
                ///                      (* equal: *) EQUAL
                ///                      (* value: *) Expression
                ///                      (* semicolon: *) SEMICOLON;
                /// ```
                %constant-definition,
                /// This kind represents a `ConstructorAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.22 *)
                /// ConstructorAttribute = (* variant: *) ModifierInvocation
                ///                      | (* variant: *) INTERNAL_KEYWORD
                ///                      | (* variant: *) OVERRIDE_KEYWORD (* Introduced in 0.6.0 and deprecated in 0.6.7. *)
                ///                      | (* variant: *) PAYABLE_KEYWORD
                ///                      | (* variant: *) PUBLIC_KEYWORD
                ///                      | (* variant: *) VIRTUAL_KEYWORD; (* Introduced in 0.6.0 and deprecated in 0.6.7. *)
                /// ```
                %constructor-attribute,
                /// This kind represents a `ConstructorAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.22 *)
                /// ConstructorAttributes = (* item: *) ConstructorAttribute*;
                /// ```
                %constructor-attributes,
                /// This kind represents a `ConstructorDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.22 *)
                /// ConstructorDefinition = (* constructor_keyword: *) CONSTRUCTOR_KEYWORD
                ///                         (* parameters: *) ParametersDeclaration
                ///                         (* attributes: *) ConstructorAttributes
                ///                         (* body: *) Block;
                /// ```
                %constructor-definition,
                /// This kind represents a `ContinueStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// ContinueStatement = (* continue_keyword: *) CONTINUE_KEYWORD
                ///                     (* semicolon: *) SEMICOLON;
                /// ```
                %continue-statement,
                /// This kind represents a `ContractDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// ContractDefinition = (* abstract_keyword: *) ABSTRACT_KEYWORD? (* Introduced in 0.6.0 *)
                ///                      (* contract_keyword: *) CONTRACT_KEYWORD
                ///                      (* name: *) IDENTIFIER
                ///                      (* inheritance: *) InheritanceSpecifier?
                ///                      (* open_brace: *) OPEN_BRACE
                ///                      (* members: *) ContractMembers
                ///                      (* close_brace: *) CLOSE_BRACE;
                /// ```
                %contract-definition,
                /// This kind represents a `ContractMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// ContractMember = (* variant: *) UsingDirective
                ///                | (* variant: *) FunctionDefinition
                ///                | (* variant: *) ConstructorDefinition (* Introduced in 0.4.22 *)
                ///                | (* variant: *) ReceiveFunctionDefinition (* Introduced in 0.6.0 *)
                ///                | (* variant: *) FallbackFunctionDefinition (* Introduced in 0.6.0 *)
                ///                | (* variant: *) UnnamedFunctionDefinition (* Deprecated in 0.6.0 *)
                ///                | (* variant: *) ModifierDefinition
                ///                | (* variant: *) StructDefinition
                ///                | (* variant: *) EnumDefinition
                ///                | (* variant: *) EventDefinition
                ///                | (* variant: *) ErrorDefinition (* Introduced in 0.8.4 *)
                ///                | (* variant: *) UserDefinedValueTypeDefinition (* Introduced in 0.8.8 *)
                ///                | (* variant: *) StateVariableDefinition;
                /// ```
                %contract-member,
                /// This kind represents a `ContractMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// ContractMembers = (* item: *) ContractMember*;
                /// ```
                %contract-members,
                /// This kind represents a `DecimalNumberExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// DecimalNumberExpression = (* literal: *) DECIMAL_LITERAL
                ///                           (* unit: *) NumberUnit?;
                /// ```
                %decimal-number-expression,
                /// This kind represents a `DoWhileStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// DoWhileStatement = (* do_keyword: *) DO_KEYWORD
                ///                    (* body: *) Statement
                ///                    (* while_keyword: *) WHILE_KEYWORD
                ///                    (* open_paren: *) OPEN_PAREN
                ///                    (* condition: *) Expression
                ///                    (* close_paren: *) CLOSE_PAREN
                ///                    (* semicolon: *) SEMICOLON;
                /// ```
                %do-while-statement,
                /// This kind represents a `ElementaryType` node, with the following structure: 
                ///
                /// ```ebnf
                /// ElementaryType = (* variant: *) BOOL_KEYWORD
                ///                | (* variant: *) BYTE_KEYWORD (* Deprecated in 0.8.0 *)
                ///                | (* variant: *) STRING_KEYWORD
                ///                | (* variant: *) AddressType
                ///                | (* variant: *) BYTES_KEYWORD
                ///                | (* variant: *) INT_KEYWORD
                ///                | (* variant: *) UINT_KEYWORD
                ///                | (* variant: *) FIXED_KEYWORD
                ///                | (* variant: *) UFIXED_KEYWORD;
                /// ```
                %elementary-type,
                /// This kind represents a `ElseBranch` node, with the following structure: 
                ///
                /// ```ebnf
                /// ElseBranch = (* else_keyword: *) ELSE_KEYWORD
                ///              (* body: *) Statement;
                /// ```
                %else-branch,
                /// This kind represents a `EmitStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.21 *)
                /// EmitStatement = (* emit_keyword: *) EMIT_KEYWORD
                ///                 (* event: *) IdentifierPath
                ///                 (* arguments: *) ArgumentsDeclaration
                ///                 (* semicolon: *) SEMICOLON;
                /// ```
                %emit-statement,
                /// This kind represents a `EnumDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// EnumDefinition = (* enum_keyword: *) ENUM_KEYWORD
                ///                  (* name: *) IDENTIFIER
                ///                  (* open_brace: *) OPEN_BRACE
                ///                  (* members: *) EnumMembers
                ///                  (* close_brace: *) CLOSE_BRACE;
                /// ```
                %enum-definition,
                /// This kind represents a `EnumMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// EnumMembers = ((* item: *) IDENTIFIER ((* separator: *) COMMA (* item: *) IDENTIFIER)*)?;
                /// ```
                %enum-members,
                /// This kind represents a `EqualityExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// EqualityExpression = (* left_operand: *) Expression
                ///                      (* operator: *) EQUAL_EQUAL
                ///                      (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// EqualityExpression = (* left_operand: *) Expression
                ///                      (* operator: *) BANG_EQUAL
                ///                      (* right_operand: *) Expression;
                /// ```
                %equality-expression,
                /// This kind represents a `ErrorDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// ErrorDefinition = (* error_keyword: *) ERROR_KEYWORD
                ///                   (* name: *) IDENTIFIER
                ///                   (* members: *) ErrorParametersDeclaration
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %error-definition,
                /// This kind represents a `ErrorParameter` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// ErrorParameter = (* type_name: *) TypeName
                ///                  (* name: *) IDENTIFIER?;
                /// ```
                %error-parameter,
                /// This kind represents a `ErrorParameters` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// ErrorParameters = ((* item: *) ErrorParameter ((* separator: *) COMMA (* item: *) ErrorParameter)*)?;
                /// ```
                %error-parameters,
                /// This kind represents a `ErrorParametersDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// ErrorParametersDeclaration = (* open_paren: *) OPEN_PAREN
                ///                              (* parameters: *) ErrorParameters
                ///                              (* close_paren: *) CLOSE_PAREN;
                /// ```
                %error-parameters-declaration,
                /// This kind represents a `EventDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// EventDefinition = (* event_keyword: *) EVENT_KEYWORD
                ///                   (* name: *) IDENTIFIER
                ///                   (* parameters: *) EventParametersDeclaration
                ///                   (* anonymous_keyword: *) ANONYMOUS_KEYWORD?
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %event-definition,
                /// This kind represents a `EventParameter` node, with the following structure: 
                ///
                /// ```ebnf
                /// EventParameter = (* type_name: *) TypeName
                ///                  (* indexed_keyword: *) INDEXED_KEYWORD?
                ///                  (* name: *) IDENTIFIER?;
                /// ```
                %event-parameter,
                /// This kind represents a `EventParameters` node, with the following structure: 
                ///
                /// ```ebnf
                /// EventParameters = ((* item: *) EventParameter ((* separator: *) COMMA (* item: *) EventParameter)*)?;
                /// ```
                %event-parameters,
                /// This kind represents a `EventParametersDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// EventParametersDeclaration = (* open_paren: *) OPEN_PAREN
                ///                              (* parameters: *) EventParameters
                ///                              (* close_paren: *) CLOSE_PAREN;
                /// ```
                %event-parameters-declaration,
                /// This kind represents a `ExperimentalFeature` node, with the following structure: 
                ///
                /// ```ebnf
                /// ExperimentalFeature = (* variant: *) IDENTIFIER
                ///                     | (* variant: *) StringLiteral;
                /// ```
                %experimental-feature,
                /// This kind represents a `ExperimentalPragma` node, with the following structure: 
                ///
                /// ```ebnf
                /// ExperimentalPragma = (* experimental_keyword: *) EXPERIMENTAL_KEYWORD
                ///                      (* feature: *) ExperimentalFeature;
                /// ```
                %experimental-pragma,
                /// This kind represents a `ExponentiationExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// (* Deprecated in 0.8.0 *)
                /// ExponentiationExpression = (* left_operand: *) Expression
                ///                            (* operator: *) ASTERISK_ASTERISK
                ///                            (* right_operand: *) Expression;
                /// 
                /// (* Right-associative binary operator *)
                /// (* Introduced in 0.8.0 *)
                /// ExponentiationExpression = (* left_operand: *) Expression
                ///                            (* operator: *) ASTERISK_ASTERISK
                ///                            (* right_operand: *) Expression;
                /// ```
                %exponentiation-expression,
                /// This kind represents a `Expression` node, with the following structure: 
                ///
                /// ```ebnf
                /// Expression = (* variant: *) AssignmentExpression
                ///            | (* variant: *) ConditionalExpression
                ///            | (* variant: *) OrExpression
                ///            | (* variant: *) AndExpression
                ///            | (* variant: *) EqualityExpression
                ///            | (* variant: *) ComparisonExpression
                ///            | (* variant: *) BitwiseOrExpression
                ///            | (* variant: *) BitwiseXorExpression
                ///            | (* variant: *) BitwiseAndExpression
                ///            | (* variant: *) ShiftExpression
                ///            | (* variant: *) AdditiveExpression
                ///            | (* variant: *) MultiplicativeExpression
                ///            | (* variant: *) ExponentiationExpression
                ///            | (* variant: *) PostfixExpression
                ///            | (* variant: *) PrefixExpression
                ///            | (* variant: *) FunctionCallExpression
                ///            | (* variant: *) CallOptionsExpression
                ///            | (* variant: *) MemberAccessExpression
                ///            | (* variant: *) IndexAccessExpression
                ///            | (* variant: *) NewExpression
                ///            | (* variant: *) TupleExpression
                ///            | (* variant: *) TypeExpression (* Introduced in 0.5.3 *)
                ///            | (* variant: *) ArrayExpression
                ///            | (* variant: *) HexNumberExpression
                ///            | (* variant: *) DecimalNumberExpression
                ///            | (* variant: *) StringExpression
                ///            | (* variant: *) ElementaryType
                ///            | (* variant: *) PAYABLE_KEYWORD (* Introduced in 0.6.0 *)
                ///            | (* variant: *) THIS_KEYWORD
                ///            | (* variant: *) SUPER_KEYWORD
                ///            | (* variant: *) TRUE_KEYWORD
                ///            | (* variant: *) FALSE_KEYWORD
                ///            | (* variant: *) IDENTIFIER;
                /// ```
                %expression,
                /// This kind represents a `ExpressionStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// ExpressionStatement = (* expression: *) Expression
                ///                       (* semicolon: *) SEMICOLON;
                /// ```
                %expression-statement,
                /// This kind represents a `FallbackFunctionAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// FallbackFunctionAttribute = (* variant: *) ModifierInvocation
                ///                           | (* variant: *) OverrideSpecifier
                ///                           | (* variant: *) EXTERNAL_KEYWORD
                ///                           | (* variant: *) PAYABLE_KEYWORD
                ///                           | (* variant: *) PURE_KEYWORD
                ///                           | (* variant: *) VIEW_KEYWORD
                ///                           | (* variant: *) VIRTUAL_KEYWORD;
                /// ```
                %fallback-function-attribute,
                /// This kind represents a `FallbackFunctionAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// FallbackFunctionAttributes = (* item: *) FallbackFunctionAttribute*;
                /// ```
                %fallback-function-attributes,
                /// This kind represents a `FallbackFunctionDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// FallbackFunctionDefinition = (* fallback_keyword: *) FALLBACK_KEYWORD
                ///                              (* parameters: *) ParametersDeclaration
                ///                              (* attributes: *) FallbackFunctionAttributes
                ///                              (* returns: *) ReturnsDeclaration?
                ///                              (* body: *) FunctionBody;
                /// ```
                %fallback-function-definition,
                /// This kind represents a `ForStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// ForStatement = (* for_keyword: *) FOR_KEYWORD
                ///                (* open_paren: *) OPEN_PAREN
                ///                (* initialization: *) ForStatementInitialization
                ///                (* condition: *) ForStatementCondition
                ///                (* iterator: *) Expression?
                ///                (* close_paren: *) CLOSE_PAREN
                ///                (* body: *) Statement;
                /// ```
                %for-statement,
                /// This kind represents a `ForStatementCondition` node, with the following structure: 
                ///
                /// ```ebnf
                /// ForStatementCondition = (* variant: *) ExpressionStatement
                ///                       | (* variant: *) SEMICOLON;
                /// ```
                %for-statement-condition,
                /// This kind represents a `ForStatementInitialization` node, with the following structure: 
                ///
                /// ```ebnf
                /// ForStatementInitialization = (* variant: *) TupleDeconstructionStatement
                ///                            | (* variant: *) VariableDeclarationStatement
                ///                            | (* variant: *) ExpressionStatement
                ///                            | (* variant: *) SEMICOLON;
                /// ```
                %for-statement-initialization,
                /// This kind represents a `FunctionAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionAttribute = (* variant: *) ModifierInvocation
                ///                   | (* variant: *) OverrideSpecifier (* Introduced in 0.6.0 *)
                ///                   | (* variant: *) CONSTANT_KEYWORD (* Deprecated in 0.5.0 *)
                ///                   | (* variant: *) EXTERNAL_KEYWORD
                ///                   | (* variant: *) INTERNAL_KEYWORD
                ///                   | (* variant: *) PAYABLE_KEYWORD
                ///                   | (* variant: *) PRIVATE_KEYWORD
                ///                   | (* variant: *) PUBLIC_KEYWORD
                ///                   | (* variant: *) PURE_KEYWORD (* Introduced in 0.4.16 *)
                ///                   | (* variant: *) VIEW_KEYWORD (* Introduced in 0.4.16 *)
                ///                   | (* variant: *) VIRTUAL_KEYWORD; (* Introduced in 0.6.0 *)
                /// ```
                %function-attribute,
                /// This kind represents a `FunctionAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionAttributes = (* item: *) FunctionAttribute*;
                /// ```
                %function-attributes,
                /// This kind represents a `FunctionBody` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionBody = (* variant: *) Block
                ///              | (* variant: *) SEMICOLON;
                /// ```
                %function-body,
                /// This kind represents a `FunctionCallExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// FunctionCallExpression = (* operand: *) Expression
                ///                          (* arguments: *) ArgumentsDeclaration;
                /// ```
                %function-call-expression,
                /// This kind represents a `FunctionDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionDefinition = (* function_keyword: *) FUNCTION_KEYWORD
                ///                      (* name: *) FunctionName
                ///                      (* parameters: *) ParametersDeclaration
                ///                      (* attributes: *) FunctionAttributes
                ///                      (* returns: *) ReturnsDeclaration?
                ///                      (* body: *) FunctionBody;
                /// ```
                %function-definition,
                /// This kind represents a `FunctionName` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionName = (* variant: *) IDENTIFIER
                ///              | (* variant: *) FALLBACK_KEYWORD
                ///              | (* variant: *) RECEIVE_KEYWORD;
                /// ```
                %function-name,
                /// This kind represents a `FunctionType` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionType = (* function_keyword: *) FUNCTION_KEYWORD
                ///                (* parameters: *) ParametersDeclaration
                ///                (* attributes: *) FunctionTypeAttributes
                ///                (* returns: *) ReturnsDeclaration?;
                /// ```
                %function-type,
                /// This kind represents a `FunctionTypeAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionTypeAttribute = (* variant: *) INTERNAL_KEYWORD
                ///                       | (* variant: *) EXTERNAL_KEYWORD
                ///                       | (* variant: *) PRIVATE_KEYWORD
                ///                       | (* variant: *) PUBLIC_KEYWORD
                ///                       | (* variant: *) CONSTANT_KEYWORD (* Deprecated in 0.5.0 *)
                ///                       | (* variant: *) PURE_KEYWORD (* Introduced in 0.4.16 *)
                ///                       | (* variant: *) VIEW_KEYWORD (* Introduced in 0.4.16 *)
                ///                       | (* variant: *) PAYABLE_KEYWORD;
                /// ```
                %function-type-attribute,
                /// This kind represents a `FunctionTypeAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// FunctionTypeAttributes = (* item: *) FunctionTypeAttribute*;
                /// ```
                %function-type-attributes,
                /// This kind represents a `HexNumberExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// HexNumberExpression = (* literal: *) HEX_LITERAL
                ///                       (* unit: *) NumberUnit?; (* Deprecated in 0.5.0 *)
                /// ```
                %hex-number-expression,
                /// This kind represents a `HexStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// HexStringLiteral = (* variant: *) SINGLE_QUOTED_HEX_STRING_LITERAL
                ///                  | (* variant: *) DOUBLE_QUOTED_HEX_STRING_LITERAL;
                /// ```
                %hex-string-literal,
                /// This kind represents a `HexStringLiterals` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.14 *)
                /// HexStringLiterals = (* item: *) HexStringLiteral+;
                /// ```
                %hex-string-literals,
                /// This kind represents a `IdentifierPath` node, with the following structure: 
                ///
                /// ```ebnf
                /// IdentifierPath = (* item: *) IDENTIFIER ((* separator: *) PERIOD (* item: *) IDENTIFIER)*;
                /// ```
                %identifier-path,
                /// This kind represents a `IfStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// IfStatement = (* if_keyword: *) IF_KEYWORD
                ///               (* open_paren: *) OPEN_PAREN
                ///               (* condition: *) Expression
                ///               (* close_paren: *) CLOSE_PAREN
                ///               (* body: *) Statement
                ///               (* else_branch: *) ElseBranch?;
                /// ```
                %if-statement,
                /// This kind represents a `ImportAlias` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportAlias = (* as_keyword: *) AS_KEYWORD
                ///               (* identifier: *) IDENTIFIER;
                /// ```
                %import-alias,
                /// This kind represents a `ImportClause` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportClause = (* variant: *) PathImport
                ///              | (* variant: *) NamedImport
                ///              | (* variant: *) ImportDeconstruction;
                /// ```
                %import-clause,
                /// This kind represents a `ImportDeconstruction` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportDeconstruction = (* open_brace: *) OPEN_BRACE
                ///                        (* symbols: *) ImportDeconstructionSymbols
                ///                        (* close_brace: *) CLOSE_BRACE
                ///                        (* from_keyword: *) FROM_KEYWORD
                ///                        (* path: *) StringLiteral;
                /// ```
                %import-deconstruction,
                /// This kind represents a `ImportDeconstructionSymbol` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportDeconstructionSymbol = (* name: *) IDENTIFIER
                ///                              (* alias: *) ImportAlias?;
                /// ```
                %import-deconstruction-symbol,
                /// This kind represents a `ImportDeconstructionSymbols` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportDeconstructionSymbols = (* item: *) ImportDeconstructionSymbol ((* separator: *) COMMA (* item: *) ImportDeconstructionSymbol)*;
                /// ```
                %import-deconstruction-symbols,
                /// This kind represents a `ImportDirective` node, with the following structure: 
                ///
                /// ```ebnf
                /// ImportDirective = (* import_keyword: *) IMPORT_KEYWORD
                ///                   (* clause: *) ImportClause
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %import-directive,
                /// This kind represents a `IndexAccessEnd` node, with the following structure: 
                ///
                /// ```ebnf
                /// IndexAccessEnd = (* colon: *) COLON
                ///                  (* end: *) Expression?;
                /// ```
                %index-access-end,
                /// This kind represents a `IndexAccessExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// IndexAccessExpression = (* operand: *) Expression
                ///                         (* open_bracket: *) OPEN_BRACKET
                ///                         (* start: *) Expression?
                ///                         (* end: *) IndexAccessEnd?
                ///                         (* close_bracket: *) CLOSE_BRACKET;
                /// ```
                %index-access-expression,
                /// This kind represents a `InheritanceSpecifier` node, with the following structure: 
                ///
                /// ```ebnf
                /// InheritanceSpecifier = (* is_keyword: *) IS_KEYWORD
                ///                        (* types: *) InheritanceTypes;
                /// ```
                %inheritance-specifier,
                /// This kind represents a `InheritanceType` node, with the following structure: 
                ///
                /// ```ebnf
                /// InheritanceType = (* type_name: *) IdentifierPath
                ///                   (* arguments: *) ArgumentsDeclaration?;
                /// ```
                %inheritance-type,
                /// This kind represents a `InheritanceTypes` node, with the following structure: 
                ///
                /// ```ebnf
                /// InheritanceTypes = (* item: *) InheritanceType ((* separator: *) COMMA (* item: *) InheritanceType)*;
                /// ```
                %inheritance-types,
                /// This kind represents a `InterfaceDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// InterfaceDefinition = (* interface_keyword: *) INTERFACE_KEYWORD
                ///                       (* name: *) IDENTIFIER
                ///                       (* inheritance: *) InheritanceSpecifier?
                ///                       (* open_brace: *) OPEN_BRACE
                ///                       (* members: *) InterfaceMembers
                ///                       (* close_brace: *) CLOSE_BRACE;
                /// ```
                %interface-definition,
                /// This kind represents a `InterfaceMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// InterfaceMembers = (* item: *) ContractMember*;
                /// ```
                %interface-members,
                /// This kind represents a `LibraryDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// LibraryDefinition = (* library_keyword: *) LIBRARY_KEYWORD
                ///                     (* name: *) IDENTIFIER
                ///                     (* open_brace: *) OPEN_BRACE
                ///                     (* members: *) LibraryMembers
                ///                     (* close_brace: *) CLOSE_BRACE;
                /// ```
                %library-definition,
                /// This kind represents a `LibraryMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// LibraryMembers = (* item: *) ContractMember*;
                /// ```
                %library-members,
                /// This kind represents a `MappingKey` node, with the following structure: 
                ///
                /// ```ebnf
                /// MappingKey = (* key_type: *) MappingKeyType
                ///              (* name: *) IDENTIFIER?; (* Introduced in 0.8.18 *)
                /// ```
                %mapping-key,
                /// This kind represents a `MappingKeyType` node, with the following structure: 
                ///
                /// ```ebnf
                /// MappingKeyType = (* variant: *) ElementaryType
                ///                | (* variant: *) IdentifierPath;
                /// ```
                %mapping-key-type,
                /// This kind represents a `MappingType` node, with the following structure: 
                ///
                /// ```ebnf
                /// MappingType = (* mapping_keyword: *) MAPPING_KEYWORD
                ///               (* open_paren: *) OPEN_PAREN
                ///               (* key_type: *) MappingKey
                ///               (* equal_greater_than: *) EQUAL_GREATER_THAN
                ///               (* value_type: *) MappingValue
                ///               (* close_paren: *) CLOSE_PAREN;
                /// ```
                %mapping-type,
                /// This kind represents a `MappingValue` node, with the following structure: 
                ///
                /// ```ebnf
                /// MappingValue = (* type_name: *) TypeName
                ///                (* name: *) IDENTIFIER?; (* Introduced in 0.8.18 *)
                /// ```
                %mapping-value,
                /// This kind represents a `MemberAccessExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// MemberAccessExpression = (* operand: *) Expression
                ///                          (* period: *) PERIOD
                ///                          (* member: *) IDENTIFIER;
                /// ```
                %member-access-expression,
                /// This kind represents a `ModifierAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// ModifierAttribute = (* variant: *) OverrideSpecifier (* Introduced in 0.6.0 *)
                ///                   | (* variant: *) VIRTUAL_KEYWORD; (* Introduced in 0.6.0 *)
                /// ```
                %modifier-attribute,
                /// This kind represents a `ModifierAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// ModifierAttributes = (* item: *) ModifierAttribute*;
                /// ```
                %modifier-attributes,
                /// This kind represents a `ModifierDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// ModifierDefinition = (* modifier_keyword: *) MODIFIER_KEYWORD
                ///                      (* name: *) IDENTIFIER
                ///                      (* parameters: *) ParametersDeclaration?
                ///                      (* attributes: *) ModifierAttributes
                ///                      (* body: *) FunctionBody;
                /// ```
                %modifier-definition,
                /// This kind represents a `ModifierInvocation` node, with the following structure: 
                ///
                /// ```ebnf
                /// ModifierInvocation = (* name: *) IdentifierPath
                ///                      (* arguments: *) ArgumentsDeclaration?;
                /// ```
                %modifier-invocation,
                /// This kind represents a `MultiplicativeExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// MultiplicativeExpression = (* left_operand: *) Expression
                ///                            (* operator: *) ASTERISK
                ///                            (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// MultiplicativeExpression = (* left_operand: *) Expression
                ///                            (* operator: *) SLASH
                ///                            (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// MultiplicativeExpression = (* left_operand: *) Expression
                ///                            (* operator: *) PERCENT
                ///                            (* right_operand: *) Expression;
                /// ```
                %multiplicative-expression,
                /// This kind represents a `NamedArgument` node, with the following structure: 
                ///
                /// ```ebnf
                /// NamedArgument = (* name: *) IDENTIFIER
                ///                 (* colon: *) COLON
                ///                 (* value: *) Expression;
                /// ```
                %named-argument,
                /// This kind represents a `NamedArgumentGroup` node, with the following structure: 
                ///
                /// ```ebnf
                /// NamedArgumentGroup = (* open_brace: *) OPEN_BRACE
                ///                      (* arguments: *) NamedArguments
                ///                      (* close_brace: *) CLOSE_BRACE;
                /// ```
                %named-argument-group,
                /// This kind represents a `NamedArguments` node, with the following structure: 
                ///
                /// ```ebnf
                /// NamedArguments = ((* item: *) NamedArgument ((* separator: *) COMMA (* item: *) NamedArgument)*)?;
                /// ```
                %named-arguments,
                /// This kind represents a `NamedArgumentsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// NamedArgumentsDeclaration = (* open_paren: *) OPEN_PAREN
                ///                             (* arguments: *) NamedArgumentGroup?
                ///                             (* close_paren: *) CLOSE_PAREN;
                /// ```
                %named-arguments-declaration,
                /// This kind represents a `NamedImport` node, with the following structure: 
                ///
                /// ```ebnf
                /// NamedImport = (* asterisk: *) ASTERISK
                ///               (* alias: *) ImportAlias
                ///               (* from_keyword: *) FROM_KEYWORD
                ///               (* path: *) StringLiteral;
                /// ```
                %named-import,
                /// This kind represents a `NewExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// NewExpression = (* new_keyword: *) NEW_KEYWORD
                ///                 (* type_name: *) TypeName;
                /// ```
                %new-expression,
                /// This kind represents a `NumberUnit` node, with the following structure: 
                ///
                /// ```ebnf
                /// NumberUnit = (* variant: *) WEI_KEYWORD
                ///            | (* variant: *) GWEI_KEYWORD (* Introduced in 0.6.11 *)
                ///            | (* variant: *) SZABO_KEYWORD (* Deprecated in 0.7.0 *)
                ///            | (* variant: *) FINNEY_KEYWORD (* Deprecated in 0.7.0 *)
                ///            | (* variant: *) ETHER_KEYWORD
                ///            | (* variant: *) SECONDS_KEYWORD
                ///            | (* variant: *) MINUTES_KEYWORD
                ///            | (* variant: *) HOURS_KEYWORD
                ///            | (* variant: *) DAYS_KEYWORD
                ///            | (* variant: *) WEEKS_KEYWORD
                ///            | (* variant: *) YEARS_KEYWORD; (* Deprecated in 0.5.0 *)
                /// ```
                %number-unit,
                /// This kind represents a `OrExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// OrExpression = (* left_operand: *) Expression
                ///                (* operator: *) BAR_BAR
                ///                (* right_operand: *) Expression;
                /// ```
                %or-expression,
                /// This kind represents a `OverridePaths` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// OverridePaths = (* item: *) IdentifierPath ((* separator: *) COMMA (* item: *) IdentifierPath)*;
                /// ```
                %override-paths,
                /// This kind represents a `OverridePathsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// OverridePathsDeclaration = (* open_paren: *) OPEN_PAREN
                ///                            (* paths: *) OverridePaths
                ///                            (* close_paren: *) CLOSE_PAREN;
                /// ```
                %override-paths-declaration,
                /// This kind represents a `OverrideSpecifier` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// OverrideSpecifier = (* override_keyword: *) OVERRIDE_KEYWORD
                ///                     (* overridden: *) OverridePathsDeclaration?;
                /// ```
                %override-specifier,
                /// This kind represents a `Parameter` node, with the following structure: 
                ///
                /// ```ebnf
                /// Parameter = (* type_name: *) TypeName
                ///             (* storage_location: *) StorageLocation?
                ///             (* name: *) IDENTIFIER?;
                /// ```
                %parameter,
                /// This kind represents a `Parameters` node, with the following structure: 
                ///
                /// ```ebnf
                /// Parameters = ((* item: *) Parameter ((* separator: *) COMMA (* item: *) Parameter)*)?;
                /// ```
                %parameters,
                /// This kind represents a `ParametersDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// ParametersDeclaration = (* open_paren: *) OPEN_PAREN
                ///                         (* parameters: *) Parameters
                ///                         (* close_paren: *) CLOSE_PAREN;
                /// ```
                %parameters-declaration,
                /// This kind represents a `PathImport` node, with the following structure: 
                ///
                /// ```ebnf
                /// PathImport = (* path: *) StringLiteral
                ///              (* alias: *) ImportAlias?;
                /// ```
                %path-import,
                /// This kind represents a `PositionalArguments` node, with the following structure: 
                ///
                /// ```ebnf
                /// PositionalArguments = ((* item: *) Expression ((* separator: *) COMMA (* item: *) Expression)*)?;
                /// ```
                %positional-arguments,
                /// This kind represents a `PositionalArgumentsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// PositionalArgumentsDeclaration = (* open_paren: *) OPEN_PAREN
                ///                                  (* arguments: *) PositionalArguments
                ///                                  (* close_paren: *) CLOSE_PAREN;
                /// ```
                %positional-arguments-declaration,
                /// This kind represents a `PostfixExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// PostfixExpression = (* operand: *) Expression
                ///                     (* operator: *) PLUS_PLUS;
                /// 
                /// (* Postfix unary operator *)
                /// PostfixExpression = (* operand: *) Expression
                ///                     (* operator: *) MINUS_MINUS;
                /// ```
                %postfix-expression,
                /// This kind represents a `Pragma` node, with the following structure: 
                ///
                /// ```ebnf
                /// Pragma = (* variant: *) AbicoderPragma
                ///        | (* variant: *) ExperimentalPragma
                ///        | (* variant: *) VersionPragma;
                /// ```
                %pragma,
                /// This kind represents a `PragmaDirective` node, with the following structure: 
                ///
                /// ```ebnf
                /// PragmaDirective = (* pragma_keyword: *) PRAGMA_KEYWORD
                ///                   (* pragma: *) Pragma
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %pragma-directive,
                /// This kind represents a `PrefixExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) PLUS_PLUS
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) MINUS_MINUS
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) TILDE
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) BANG
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) MINUS
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// (* Deprecated in 0.5.0 *)
                /// PrefixExpression = (* operator: *) PLUS
                ///                    (* operand: *) Expression;
                /// 
                /// (* Prefix unary operator *)
                /// PrefixExpression = (* operator: *) DELETE_KEYWORD
                ///                    (* operand: *) Expression;
                /// ```
                %prefix-expression,
                /// This kind represents a `ReceiveFunctionAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// ReceiveFunctionAttribute = (* variant: *) ModifierInvocation
                ///                          | (* variant: *) OverrideSpecifier
                ///                          | (* variant: *) EXTERNAL_KEYWORD
                ///                          | (* variant: *) PAYABLE_KEYWORD
                ///                          | (* variant: *) VIRTUAL_KEYWORD;
                /// ```
                %receive-function-attribute,
                /// This kind represents a `ReceiveFunctionAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// ReceiveFunctionAttributes = (* item: *) ReceiveFunctionAttribute*;
                /// ```
                %receive-function-attributes,
                /// This kind represents a `ReceiveFunctionDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// ReceiveFunctionDefinition = (* receive_keyword: *) RECEIVE_KEYWORD
                ///                             (* parameters: *) ParametersDeclaration
                ///                             (* attributes: *) ReceiveFunctionAttributes
                ///                             (* body: *) FunctionBody;
                /// ```
                %receive-function-definition,
                /// This kind represents a `ReturnStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// ReturnStatement = (* return_keyword: *) RETURN_KEYWORD
                ///                   (* expression: *) Expression?
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %return-statement,
                /// This kind represents a `ReturnsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// ReturnsDeclaration = (* returns_keyword: *) RETURNS_KEYWORD
                ///                      (* variables: *) ParametersDeclaration;
                /// ```
                %returns-declaration,
                /// This kind represents a `RevertStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// RevertStatement = (* revert_keyword: *) REVERT_KEYWORD
                ///                   (* error: *) IdentifierPath?
                ///                   (* arguments: *) ArgumentsDeclaration
                ///                   (* semicolon: *) SEMICOLON;
                /// ```
                %revert-statement,
                /// This kind represents a `ShiftExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Left-associative binary operator *)
                /// ShiftExpression = (* left_operand: *) Expression
                ///                   (* operator: *) LESS_THAN_LESS_THAN
                ///                   (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// ShiftExpression = (* left_operand: *) Expression
                ///                   (* operator: *) GREATER_THAN_GREATER_THAN
                ///                   (* right_operand: *) Expression;
                /// 
                /// (* Left-associative binary operator *)
                /// ShiftExpression = (* left_operand: *) Expression
                ///                   (* operator: *) GREATER_THAN_GREATER_THAN_GREATER_THAN
                ///                   (* right_operand: *) Expression;
                /// ```
                %shift-expression,
                /// This kind represents a `SimpleVersionLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// SimpleVersionLiteral = (* item: *) VERSION_SPECIFIER ((* separator: *) PERIOD (* item: *) VERSION_SPECIFIER)*;
                /// ```
                %simple-version-literal,
                /// This kind represents a `SourceUnit` node, with the following structure: 
                ///
                /// ```ebnf
                /// SourceUnit = (* members: *) SourceUnitMembers;
                /// ```
                %source-unit,
                /// This kind represents a `SourceUnitMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// SourceUnitMember = (* variant: *) PragmaDirective
                ///                  | (* variant: *) ImportDirective
                ///                  | (* variant: *) ContractDefinition
                ///                  | (* variant: *) InterfaceDefinition
                ///                  | (* variant: *) LibraryDefinition
                ///                  | (* variant: *) StructDefinition (* Introduced in 0.6.0 *)
                ///                  | (* variant: *) EnumDefinition (* Introduced in 0.6.0 *)
                ///                  | (* variant: *) FunctionDefinition (* Introduced in 0.7.1 *)
                ///                  | (* variant: *) ErrorDefinition (* Introduced in 0.8.4 *)
                ///                  | (* variant: *) UserDefinedValueTypeDefinition (* Introduced in 0.8.8 *)
                ///                  | (* variant: *) UsingDirective (* Introduced in 0.8.13 *)
                ///                  | (* variant: *) EventDefinition (* Introduced in 0.8.22 *)
                ///                  | (* variant: *) ConstantDefinition; (* Introduced in 0.7.4 *)
                /// ```
                %source-unit-member,
                /// This kind represents a `SourceUnitMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// SourceUnitMembers = (* item: *) SourceUnitMember*;
                /// ```
                %source-unit-members,
                /// This kind represents a `StateVariableAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// StateVariableAttribute = (* variant: *) OverrideSpecifier (* Introduced in 0.6.0 *)
                ///                        | (* variant: *) CONSTANT_KEYWORD
                ///                        | (* variant: *) INTERNAL_KEYWORD
                ///                        | (* variant: *) PRIVATE_KEYWORD
                ///                        | (* variant: *) PUBLIC_KEYWORD
                ///                        | (* variant: *) IMMUTABLE_KEYWORD (* Introduced in 0.6.5 *)
                ///                        | (* variant: *) TRANSIENT_KEYWORD; (* Introduced in 0.8.27 *)
                /// ```
                %state-variable-attribute,
                /// This kind represents a `StateVariableAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// StateVariableAttributes = (* item: *) StateVariableAttribute*;
                /// ```
                %state-variable-attributes,
                /// This kind represents a `StateVariableDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// StateVariableDefinition = (* type_name: *) TypeName
                ///                           (* attributes: *) StateVariableAttributes
                ///                           (* name: *) IDENTIFIER
                ///                           (* value: *) StateVariableDefinitionValue?
                ///                           (* semicolon: *) SEMICOLON;
                /// ```
                %state-variable-definition,
                /// This kind represents a `StateVariableDefinitionValue` node, with the following structure: 
                ///
                /// ```ebnf
                /// StateVariableDefinitionValue = (* equal: *) EQUAL
                ///                                (* value: *) Expression;
                /// ```
                %state-variable-definition-value,
                /// This kind represents a `Statement` node, with the following structure: 
                ///
                /// ```ebnf
                /// Statement = (* variant: *) IfStatement
                ///           | (* variant: *) ForStatement
                ///           | (* variant: *) WhileStatement
                ///           | (* variant: *) DoWhileStatement
                ///           | (* variant: *) ContinueStatement
                ///           | (* variant: *) BreakStatement
                ///           | (* variant: *) ReturnStatement
                ///           | (* variant: *) ThrowStatement (* Deprecated in 0.5.0 *)
                ///           | (* variant: *) EmitStatement (* Introduced in 0.4.21 *)
                ///           | (* variant: *) TryStatement (* Introduced in 0.6.0 *)
                ///           | (* variant: *) RevertStatement (* Introduced in 0.8.4 *)
                ///           | (* variant: *) AssemblyStatement
                ///           | (* variant: *) Block
                ///           | (* variant: *) UncheckedBlock (* Introduced in 0.8.0 *)
                ///           | (* variant: *) TupleDeconstructionStatement
                ///           | (* variant: *) VariableDeclarationStatement
                ///           | (* variant: *) ExpressionStatement;
                /// ```
                %statement,
                /// This kind represents a `Statements` node, with the following structure: 
                ///
                /// ```ebnf
                /// Statements = (* item: *) Statement*;
                /// ```
                %statements,
                /// This kind represents a `StorageLocation` node, with the following structure: 
                ///
                /// ```ebnf
                /// StorageLocation = (* variant: *) MEMORY_KEYWORD
                ///                 | (* variant: *) STORAGE_KEYWORD
                ///                 | (* variant: *) CALL_DATA_KEYWORD; (* Introduced in 0.5.0 *)
                /// ```
                %storage-location,
                /// This kind represents a `StringExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// StringExpression = (* variant: *) StringLiteral (* Deprecated in 0.5.14 *)
                ///                  | (* variant: *) StringLiterals (* Introduced in 0.5.14 *)
                ///                  | (* variant: *) HexStringLiteral (* Deprecated in 0.5.14 *)
                ///                  | (* variant: *) HexStringLiterals (* Introduced in 0.5.14 *)
                ///                  | (* variant: *) UnicodeStringLiterals; (* Introduced in 0.7.0 *)
                /// ```
                %string-expression,
                /// This kind represents a `StringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// StringLiteral = (* variant: *) SINGLE_QUOTED_STRING_LITERAL
                ///               | (* variant: *) DOUBLE_QUOTED_STRING_LITERAL;
                /// ```
                %string-literal,
                /// This kind represents a `StringLiterals` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.14 *)
                /// StringLiterals = (* item: *) StringLiteral+;
                /// ```
                %string-literals,
                /// This kind represents a `StructDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// StructDefinition = (* struct_keyword: *) STRUCT_KEYWORD
                ///                    (* name: *) IDENTIFIER
                ///                    (* open_brace: *) OPEN_BRACE
                ///                    (* members: *) StructMembers
                ///                    (* close_brace: *) CLOSE_BRACE;
                /// ```
                %struct-definition,
                /// This kind represents a `StructMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// StructMember = (* type_name: *) TypeName
                ///                (* name: *) IDENTIFIER
                ///                (* semicolon: *) SEMICOLON;
                /// ```
                %struct-member,
                /// This kind represents a `StructMembers` node, with the following structure: 
                ///
                /// ```ebnf
                /// StructMembers = (* item: *) StructMember*;
                /// ```
                %struct-members,
                /// This kind represents a `ThrowStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// ThrowStatement = (* throw_keyword: *) THROW_KEYWORD
                ///                  (* semicolon: *) SEMICOLON;
                /// ```
                %throw-statement,
                /// This kind represents a `TryStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// TryStatement = (* try_keyword: *) TRY_KEYWORD
                ///                (* expression: *) Expression
                ///                (* returns: *) ReturnsDeclaration?
                ///                (* body: *) Block
                ///                (* catch_clauses: *) CatchClauses;
                /// ```
                %try-statement,
                /// This kind represents a `TupleDeconstructionElement` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleDeconstructionElement = (* member: *) TupleMember?;
                /// ```
                %tuple-deconstruction-element,
                /// This kind represents a `TupleDeconstructionElements` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleDeconstructionElements = (* item: *) TupleDeconstructionElement ((* separator: *) COMMA (* item: *) TupleDeconstructionElement)*;
                /// ```
                %tuple-deconstruction-elements,
                /// This kind represents a `TupleDeconstructionStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleDeconstructionStatement = (* var_keyword: *) VAR_KEYWORD? (* Deprecated in 0.5.0 *)
                ///                                (* open_paren: *) OPEN_PAREN
                ///                                (* elements: *) TupleDeconstructionElements
                ///                                (* close_paren: *) CLOSE_PAREN
                ///                                (* equal: *) EQUAL
                ///                                (* expression: *) Expression
                ///                                (* semicolon: *) SEMICOLON;
                /// ```
                %tuple-deconstruction-statement,
                /// This kind represents a `TupleExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleExpression = (* open_paren: *) OPEN_PAREN
                ///                   (* items: *) TupleValues
                ///                   (* close_paren: *) CLOSE_PAREN;
                /// ```
                %tuple-expression,
                /// This kind represents a `TupleMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleMember = (* variant: *) TypedTupleMember
                ///             | (* variant: *) UntypedTupleMember;
                /// ```
                %tuple-member,
                /// This kind represents a `TupleValue` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleValue = (* expression: *) Expression?;
                /// ```
                %tuple-value,
                /// This kind represents a `TupleValues` node, with the following structure: 
                ///
                /// ```ebnf
                /// TupleValues = (* item: *) TupleValue ((* separator: *) COMMA (* item: *) TupleValue)*;
                /// ```
                %tuple-values,
                /// This kind represents a `TypeExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.3 *)
                /// TypeExpression = (* type_keyword: *) TYPE_KEYWORD
                ///                  (* open_paren: *) OPEN_PAREN
                ///                  (* type_name: *) TypeName
                ///                  (* close_paren: *) CLOSE_PAREN;
                /// ```
                %type-expression,
                /// This kind represents a `TypeName` node, with the following structure: 
                ///
                /// ```ebnf
                /// TypeName = (* variant: *) ArrayTypeName
                ///          | (* variant: *) FunctionType
                ///          | (* variant: *) MappingType
                ///          | (* variant: *) ElementaryType
                ///          | (* variant: *) IdentifierPath;
                /// ```
                %type-name,
                /// This kind represents a `TypedTupleMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// TypedTupleMember = (* type_name: *) TypeName
                ///                    (* storage_location: *) StorageLocation?
                ///                    (* name: *) IDENTIFIER;
                /// ```
                %typed-tuple-member,
                /// This kind represents a `UncheckedBlock` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.0 *)
                /// UncheckedBlock = (* unchecked_keyword: *) UNCHECKED_KEYWORD
                ///                  (* block: *) Block;
                /// ```
                %unchecked-block,
                /// This kind represents a `UnicodeStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.7.0 *)
                /// UnicodeStringLiteral = (* variant: *) SINGLE_QUOTED_UNICODE_STRING_LITERAL
                ///                      | (* variant: *) DOUBLE_QUOTED_UNICODE_STRING_LITERAL;
                /// ```
                %unicode-string-literal,
                /// This kind represents a `UnicodeStringLiterals` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.7.0 *)
                /// UnicodeStringLiterals = (* item: *) UnicodeStringLiteral+;
                /// ```
                %unicode-string-literals,
                /// This kind represents a `UnnamedFunctionAttribute` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.6.0 *)
                /// UnnamedFunctionAttribute = (* variant: *) ModifierInvocation
                ///                          | (* variant: *) CONSTANT_KEYWORD (* Deprecated in 0.5.0 *)
                ///                          | (* variant: *) EXTERNAL_KEYWORD
                ///                          | (* variant: *) INTERNAL_KEYWORD (* Deprecated in 0.5.0 *)
                ///                          | (* variant: *) PAYABLE_KEYWORD
                ///                          | (* variant: *) PRIVATE_KEYWORD (* Deprecated in 0.5.0 *)
                ///                          | (* variant: *) PUBLIC_KEYWORD (* Deprecated in 0.5.0 *)
                ///                          | (* variant: *) PURE_KEYWORD (* Introduced in 0.4.16 and deprecated in 0.6.0. *)
                ///                          | (* variant: *) VIEW_KEYWORD; (* Introduced in 0.4.16 and deprecated in 0.6.0. *)
                /// ```
                %unnamed-function-attribute,
                /// This kind represents a `UnnamedFunctionAttributes` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.6.0 *)
                /// UnnamedFunctionAttributes = (* item: *) UnnamedFunctionAttribute*;
                /// ```
                %unnamed-function-attributes,
                /// This kind represents a `UnnamedFunctionDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.6.0 *)
                /// UnnamedFunctionDefinition = (* function_keyword: *) FUNCTION_KEYWORD
                ///                             (* parameters: *) ParametersDeclaration
                ///                             (* attributes: *) UnnamedFunctionAttributes
                ///                             (* body: *) FunctionBody;
                /// ```
                %unnamed-function-definition,
                /// This kind represents a `UntypedTupleMember` node, with the following structure: 
                ///
                /// ```ebnf
                /// UntypedTupleMember = (* storage_location: *) StorageLocation?
                ///                      (* name: *) IDENTIFIER;
                /// ```
                %untyped-tuple-member,
                /// This kind represents a `UserDefinedValueTypeDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.8 *)
                /// UserDefinedValueTypeDefinition = (* type_keyword: *) TYPE_KEYWORD
                ///                                  (* name: *) IDENTIFIER
                ///                                  (* is_keyword: *) IS_KEYWORD
                ///                                  (* value_type: *) ElementaryType
                ///                                  (* semicolon: *) SEMICOLON;
                /// ```
                %user-defined-value-type-definition,
                /// This kind represents a `UsingAlias` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.19 *)
                /// UsingAlias = (* as_keyword: *) AS_KEYWORD
                ///              (* operator: *) UsingOperator;
                /// ```
                %using-alias,
                /// This kind represents a `UsingClause` node, with the following structure: 
                ///
                /// ```ebnf
                /// UsingClause = (* variant: *) IdentifierPath
                ///             | (* variant: *) UsingDeconstruction; (* Introduced in 0.8.13 *)
                /// ```
                %using-clause,
                /// This kind represents a `UsingDeconstruction` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.13 *)
                /// UsingDeconstruction = (* open_brace: *) OPEN_BRACE
                ///                       (* symbols: *) UsingDeconstructionSymbols
                ///                       (* close_brace: *) CLOSE_BRACE;
                /// ```
                %using-deconstruction,
                /// This kind represents a `UsingDeconstructionSymbol` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.13 *)
                /// UsingDeconstructionSymbol = (* name: *) IdentifierPath
                ///                             (* alias: *) UsingAlias?; (* Introduced in 0.8.19 *)
                /// ```
                %using-deconstruction-symbol,
                /// This kind represents a `UsingDeconstructionSymbols` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.13 *)
                /// UsingDeconstructionSymbols = (* item: *) UsingDeconstructionSymbol ((* separator: *) COMMA (* item: *) UsingDeconstructionSymbol)*;
                /// ```
                %using-deconstruction-symbols,
                /// This kind represents a `UsingDirective` node, with the following structure: 
                ///
                /// ```ebnf
                /// UsingDirective = (* using_keyword: *) USING_KEYWORD
                ///                  (* clause: *) UsingClause
                ///                  (* for_keyword: *) FOR_KEYWORD
                ///                  (* target: *) UsingTarget
                ///                  (* global_keyword: *) GLOBAL_KEYWORD? (* Introduced in 0.8.13 *)
                ///                  (* semicolon: *) SEMICOLON;
                /// ```
                %using-directive,
                /// This kind represents a `UsingOperator` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.19 *)
                /// UsingOperator = (* variant: *) AMPERSAND
                ///               | (* variant: *) ASTERISK
                ///               | (* variant: *) BANG_EQUAL
                ///               | (* variant: *) BAR
                ///               | (* variant: *) CARET
                ///               | (* variant: *) EQUAL_EQUAL
                ///               | (* variant: *) GREATER_THAN
                ///               | (* variant: *) GREATER_THAN_EQUAL
                ///               | (* variant: *) LESS_THAN
                ///               | (* variant: *) LESS_THAN_EQUAL
                ///               | (* variant: *) MINUS
                ///               | (* variant: *) PERCENT
                ///               | (* variant: *) PLUS
                ///               | (* variant: *) SLASH
                ///               | (* variant: *) TILDE;
                /// ```
                %using-operator,
                /// This kind represents a `UsingTarget` node, with the following structure: 
                ///
                /// ```ebnf
                /// UsingTarget = (* variant: *) TypeName
                ///             | (* variant: *) ASTERISK;
                /// ```
                %using-target,
                /// This kind represents a `VariableDeclarationStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// VariableDeclarationStatement = (* variable_type: *) VariableDeclarationType
                ///                                (* storage_location: *) StorageLocation?
                ///                                (* name: *) IDENTIFIER
                ///                                (* value: *) VariableDeclarationValue?
                ///                                (* semicolon: *) SEMICOLON;
                /// ```
                %variable-declaration-statement,
                /// This kind represents a `VariableDeclarationType` node, with the following structure: 
                ///
                /// ```ebnf
                /// VariableDeclarationType = (* variant: *) TypeName
                ///                         | (* variant: *) VAR_KEYWORD; (* Deprecated in 0.5.0 *)
                /// ```
                %variable-declaration-type,
                /// This kind represents a `VariableDeclarationValue` node, with the following structure: 
                ///
                /// ```ebnf
                /// VariableDeclarationValue = (* equal: *) EQUAL
                ///                            (* expression: *) Expression;
                /// ```
                %variable-declaration-value,
                /// This kind represents a `VersionExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionExpression = (* variant: *) VersionRange
                ///                   | (* variant: *) VersionTerm;
                /// ```
                %version-expression,
                /// This kind represents a `VersionExpressionSet` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionExpressionSet = (* item: *) VersionExpression+;
                /// ```
                %version-expression-set,
                /// This kind represents a `VersionExpressionSets` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionExpressionSets = (* item: *) VersionExpressionSet ((* separator: *) BAR_BAR (* item: *) VersionExpressionSet)*;
                /// ```
                %version-expression-sets,
                /// This kind represents a `VersionLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionLiteral = (* variant: *) SimpleVersionLiteral
                ///                | (* variant: *) SINGLE_QUOTED_VERSION_LITERAL
                ///                | (* variant: *) DOUBLE_QUOTED_VERSION_LITERAL;
                /// ```
                %version-literal,
                /// This kind represents a `VersionOperator` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionOperator = (* variant: *) CARET
                ///                 | (* variant: *) TILDE
                ///                 | (* variant: *) EQUAL
                ///                 | (* variant: *) LESS_THAN
                ///                 | (* variant: *) GREATER_THAN
                ///                 | (* variant: *) LESS_THAN_EQUAL
                ///                 | (* variant: *) GREATER_THAN_EQUAL;
                /// ```
                %version-operator,
                /// This kind represents a `VersionPragma` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionPragma = (* solidity_keyword: *) SOLIDITY_KEYWORD
                ///                 (* sets: *) VersionExpressionSets;
                /// ```
                %version-pragma,
                /// This kind represents a `VersionRange` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionRange = (* start: *) VersionLiteral
                ///                (* minus: *) MINUS
                ///                (* end: *) VersionLiteral;
                /// ```
                %version-range,
                /// This kind represents a `VersionTerm` node, with the following structure: 
                ///
                /// ```ebnf
                /// VersionTerm = (* operator: *) VersionOperator?
                ///               (* literal: *) VersionLiteral;
                /// ```
                %version-term,
                /// This kind represents a `WhileStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// WhileStatement = (* while_keyword: *) WHILE_KEYWORD
                ///                  (* open_paren: *) OPEN_PAREN
                ///                  (* condition: *) Expression
                ///                  (* close_paren: *) CLOSE_PAREN
                ///                  (* body: *) Statement;
                /// ```
                %while-statement,
                /// This kind represents a `YulArguments` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulArguments = ((* item: *) YulExpression ((* separator: *) COMMA (* item: *) YulExpression)*)?;
                /// ```
                %yul-arguments,
                /// This kind represents a `YulAssignmentOperator` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulAssignmentOperator = (* variant: *) COLON_EQUAL
                ///                       | (* variant: *) YulColonAndEqual; (* Deprecated in 0.5.5 *)
                /// ```
                %yul-assignment-operator,
                /// This kind represents a `YulBlock` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulBlock = (* open_brace: *) OPEN_BRACE
                ///            (* statements: *) YulStatements
                ///            (* close_brace: *) CLOSE_BRACE;
                /// ```
                %yul-block,
                /// This kind represents a `YulBreakStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulBreakStatement = (* break_keyword: *) YUL_BREAK_KEYWORD;
                /// ```
                %yul-break-statement,
                /// This kind represents a `YulBuiltInFunction` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulBuiltInFunction = (* variant: *) YUL_ADD_KEYWORD
                ///                    | (* variant: *) YUL_ADD_MOD_KEYWORD
                ///                    | (* variant: *) YUL_ADDRESS_KEYWORD
                ///                    | (* variant: *) YUL_AND_KEYWORD
                ///                    | (* variant: *) YUL_BALANCE_KEYWORD
                ///                    | (* variant: *) YUL_BLOCK_HASH_KEYWORD
                ///                    | (* variant: *) YUL_BYTE_KEYWORD
                ///                    | (* variant: *) YUL_CALL_CODE_KEYWORD
                ///                    | (* variant: *) YUL_CALL_DATA_COPY_KEYWORD
                ///                    | (* variant: *) YUL_CALL_DATA_LOAD_KEYWORD
                ///                    | (* variant: *) YUL_CALL_DATA_SIZE_KEYWORD
                ///                    | (* variant: *) YUL_CALLER_KEYWORD
                ///                    | (* variant: *) YUL_CALL_KEYWORD
                ///                    | (* variant: *) YUL_CALL_VALUE_KEYWORD
                ///                    | (* variant: *) YUL_COIN_BASE_KEYWORD
                ///                    | (* variant: *) YUL_CREATE_KEYWORD
                ///                    | (* variant: *) YUL_DELEGATE_CALL_KEYWORD
                ///                    | (* variant: *) YUL_DIV_KEYWORD
                ///                    | (* variant: *) YUL_EQ_KEYWORD
                ///                    | (* variant: *) YUL_EXP_KEYWORD
                ///                    | (* variant: *) YUL_EXT_CODE_COPY_KEYWORD
                ///                    | (* variant: *) YUL_EXT_CODE_SIZE_KEYWORD
                ///                    | (* variant: *) YUL_GAS_KEYWORD
                ///                    | (* variant: *) YUL_GAS_LIMIT_KEYWORD
                ///                    | (* variant: *) YUL_GAS_PRICE_KEYWORD
                ///                    | (* variant: *) YUL_GT_KEYWORD
                ///                    | (* variant: *) YUL_INVALID_KEYWORD
                ///                    | (* variant: *) YUL_IS_ZERO_KEYWORD
                ///                    | (* variant: *) YUL_JUMP_KEYWORD (* Deprecated in 0.5.0 *)
                ///                    | (* variant: *) YUL_JUMPI_KEYWORD (* Deprecated in 0.5.0 *)
                ///                    | (* variant: *) YUL_LOG_0_KEYWORD
                ///                    | (* variant: *) YUL_LOG_1_KEYWORD
                ///                    | (* variant: *) YUL_LOG_2_KEYWORD
                ///                    | (* variant: *) YUL_LOG_3_KEYWORD
                ///                    | (* variant: *) YUL_LOG_4_KEYWORD
                ///                    | (* variant: *) YUL_LT_KEYWORD
                ///                    | (* variant: *) YUL_M_LOAD_KEYWORD
                ///                    | (* variant: *) YUL_MOD_KEYWORD
                ///                    | (* variant: *) YUL_M_SIZE_KEYWORD
                ///                    | (* variant: *) YUL_M_STORE_8_KEYWORD
                ///                    | (* variant: *) YUL_M_STORE_KEYWORD
                ///                    | (* variant: *) YUL_MUL_KEYWORD
                ///                    | (* variant: *) YUL_MUL_MOD_KEYWORD
                ///                    | (* variant: *) YUL_NOT_KEYWORD
                ///                    | (* variant: *) YUL_NUMBER_KEYWORD
                ///                    | (* variant: *) YUL_ORIGIN_KEYWORD
                ///                    | (* variant: *) YUL_OR_KEYWORD
                ///                    | (* variant: *) YUL_POP_KEYWORD
                ///                    | (* variant: *) YUL_RETURN_KEYWORD
                ///                    | (* variant: *) YUL_REVERT_KEYWORD
                ///                    | (* variant: *) YUL_S_DIV_KEYWORD
                ///                    | (* variant: *) YUL_SELF_DESTRUCT_KEYWORD
                ///                    | (* variant: *) YUL_SGT_KEYWORD
                ///                    | (* variant: *) YUL_SIGN_EXTEND_KEYWORD
                ///                    | (* variant: *) YUL_S_LOAD_KEYWORD
                ///                    | (* variant: *) YUL_SLT_KEYWORD
                ///                    | (* variant: *) YUL_S_MOD_KEYWORD
                ///                    | (* variant: *) YUL_S_STORE_KEYWORD
                ///                    | (* variant: *) YUL_STOP_KEYWORD
                ///                    | (* variant: *) YUL_SUB_KEYWORD
                ///                    | (* variant: *) YUL_TIMESTAMP_KEYWORD
                ///                    | (* variant: *) YUL_XOR_KEYWORD
                ///                    | (* variant: *) YUL_KECCAK_256_KEYWORD (* Introduced in 0.4.12 *)
                ///                    | (* variant: *) YUL_SHA_3_KEYWORD (* Deprecated in 0.5.0 *)
                ///                    | (* variant: *) YUL_SUICIDE_KEYWORD (* Deprecated in 0.5.0 *)
                ///                    | (* variant: *) YUL_RETURN_DATA_COPY_KEYWORD (* Introduced in 0.4.12 *)
                ///                    | (* variant: *) YUL_RETURN_DATA_SIZE_KEYWORD (* Introduced in 0.4.12 *)
                ///                    | (* variant: *) YUL_STATIC_CALL_KEYWORD (* Introduced in 0.4.12 *)
                ///                    | (* variant: *) YUL_CREATE_2_KEYWORD (* Introduced in 0.4.12 *)
                ///                    | (* variant: *) YUL_EXT_CODE_HASH_KEYWORD (* Introduced in 0.5.0 *)
                ///                    | (* variant: *) YUL_SAR_KEYWORD
                ///                    | (* variant: *) YUL_SHL_KEYWORD
                ///                    | (* variant: *) YUL_SHR_KEYWORD
                ///                    | (* variant: *) YUL_CHAIN_ID_KEYWORD
                ///                    | (* variant: *) YUL_SELF_BALANCE_KEYWORD
                ///                    | (* variant: *) YUL_BASE_FEE_KEYWORD (* Introduced in 0.8.7 *)
                ///                    | (* variant: *) YUL_DIFFICULTY_KEYWORD (* Deprecated in 0.8.18 *)
                ///                    | (* variant: *) YUL_PREV_RANDAO_KEYWORD (* Introduced in 0.8.18 *)
                ///                    | (* variant: *) YUL_BLOB_BASE_FEE_KEYWORD (* Introduced in 0.8.24 *)
                ///                    | (* variant: *) YUL_BLOB_HASH_KEYWORD (* Introduced in 0.8.24 *)
                ///                    | (* variant: *) YUL_T_LOAD_KEYWORD (* Introduced in 0.8.24 *)
                ///                    | (* variant: *) YUL_T_STORE_KEYWORD (* Introduced in 0.8.24 *)
                ///                    | (* variant: *) YUL_M_COPY_KEYWORD; (* Introduced in 0.8.24 *)
                /// ```
                %yul-built-in-function,
                /// This kind represents a `YulColonAndEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.5 *)
                /// YulColonAndEqual = (* colon: *) COLON
                ///                    (* equal: *) EQUAL;
                /// ```
                %yul-colon-and-equal,
                /// This kind represents a `YulContinueStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulContinueStatement = (* continue_keyword: *) YUL_CONTINUE_KEYWORD;
                /// ```
                %yul-continue-statement,
                /// This kind represents a `YulDefaultCase` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulDefaultCase = (* default_keyword: *) YUL_DEFAULT_KEYWORD
                ///                  (* body: *) YulBlock;
                /// ```
                %yul-default-case,
                /// This kind represents a `YulEqualAndColon` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YulEqualAndColon = (* equal: *) EQUAL
                ///                    (* colon: *) COLON;
                /// ```
                %yul-equal-and-colon,
                /// This kind represents a `YulExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulExpression = (* variant: *) YulFunctionCallExpression
                ///               | (* variant: *) YulLiteral
                ///               | (* variant: *) YulBuiltInFunction
                ///               | (* variant: *) YulPath;
                /// ```
                %yul-expression,
                /// This kind represents a `YulForStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulForStatement = (* for_keyword: *) YUL_FOR_KEYWORD
                ///                   (* initialization: *) YulBlock
                ///                   (* condition: *) YulExpression
                ///                   (* iterator: *) YulBlock
                ///                   (* body: *) YulBlock;
                /// ```
                %yul-for-statement,
                /// This kind represents a `YulFunctionCallExpression` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Postfix unary operator *)
                /// YulFunctionCallExpression = (* operand: *) YulExpression
                ///                             (* open_paren: *) OPEN_PAREN
                ///                             (* arguments: *) YulArguments
                ///                             (* close_paren: *) CLOSE_PAREN;
                /// ```
                %yul-function-call-expression,
                /// This kind represents a `YulFunctionDefinition` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulFunctionDefinition = (* function_keyword: *) YUL_FUNCTION_KEYWORD
                ///                         (* name: *) YUL_IDENTIFIER
                ///                         (* parameters: *) YulParametersDeclaration
                ///                         (* returns: *) YulReturnsDeclaration?
                ///                         (* body: *) YulBlock;
                /// ```
                %yul-function-definition,
                /// This kind represents a `YulIfStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulIfStatement = (* if_keyword: *) YUL_IF_KEYWORD
                ///                  (* condition: *) YulExpression
                ///                  (* body: *) YulBlock;
                /// ```
                %yul-if-statement,
                /// This kind represents a `YulLabel` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YulLabel = (* label: *) YUL_IDENTIFIER
                ///            (* colon: *) COLON;
                /// ```
                %yul-label,
                /// This kind represents a `YulLeaveStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// YulLeaveStatement = (* leave_keyword: *) YUL_LEAVE_KEYWORD;
                /// ```
                %yul-leave-statement,
                /// This kind represents a `YulLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulLiteral = (* variant: *) YUL_TRUE_KEYWORD
                ///            | (* variant: *) YUL_FALSE_KEYWORD
                ///            | (* variant: *) YUL_DECIMAL_LITERAL
                ///            | (* variant: *) YUL_HEX_LITERAL
                ///            | (* variant: *) HexStringLiteral
                ///            | (* variant: *) StringLiteral;
                /// ```
                %yul-literal,
                /// This kind represents a `YulParameters` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulParameters = ((* item: *) YUL_IDENTIFIER ((* separator: *) COMMA (* item: *) YUL_IDENTIFIER)*)?;
                /// ```
                %yul-parameters,
                /// This kind represents a `YulParametersDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulParametersDeclaration = (* open_paren: *) OPEN_PAREN
                ///                            (* parameters: *) YulParameters
                ///                            (* close_paren: *) CLOSE_PAREN;
                /// ```
                %yul-parameters-declaration,
                /// This kind represents a `YulPath` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulPath = (* item: *) YUL_IDENTIFIER ((* separator: *) PERIOD (* item: *) YUL_IDENTIFIER)*;
                /// ```
                %yul-path,
                /// This kind represents a `YulPaths` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulPaths = (* item: *) YulPath ((* separator: *) COMMA (* item: *) YulPath)*;
                /// ```
                %yul-paths,
                /// This kind represents a `YulReturnsDeclaration` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulReturnsDeclaration = (* minus_greater_than: *) MINUS_GREATER_THAN
                ///                         (* variables: *) YulVariableNames;
                /// ```
                %yul-returns-declaration,
                /// This kind represents a `YulStackAssignmentOperator` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YulStackAssignmentOperator = (* variant: *) EQUAL_COLON
                ///                            | (* variant: *) YulEqualAndColon;
                /// ```
                %yul-stack-assignment-operator,
                /// This kind represents a `YulStackAssignmentStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YulStackAssignmentStatement = (* assignment: *) YulStackAssignmentOperator
                ///                               (* variable: *) YUL_IDENTIFIER;
                /// ```
                %yul-stack-assignment-statement,
                /// This kind represents a `YulStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulStatement = (* variant: *) YulBlock
                ///              | (* variant: *) YulFunctionDefinition
                ///              | (* variant: *) YulStackAssignmentStatement (* Deprecated in 0.5.0 *)
                ///              | (* variant: *) YulIfStatement
                ///              | (* variant: *) YulForStatement
                ///              | (* variant: *) YulSwitchStatement
                ///              | (* variant: *) YulLeaveStatement (* Introduced in 0.6.0 *)
                ///              | (* variant: *) YulBreakStatement
                ///              | (* variant: *) YulContinueStatement
                ///              | (* variant: *) YulVariableAssignmentStatement
                ///              | (* variant: *) YulLabel (* Deprecated in 0.5.0 *)
                ///              | (* variant: *) YulVariableDeclarationStatement
                ///              | (* variant: *) YulExpression;
                /// ```
                %yul-statement,
                /// This kind represents a `YulStatements` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulStatements = (* item: *) YulStatement*;
                /// ```
                %yul-statements,
                /// This kind represents a `YulSwitchCase` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulSwitchCase = (* variant: *) YulDefaultCase
                ///               | (* variant: *) YulValueCase;
                /// ```
                %yul-switch-case,
                /// This kind represents a `YulSwitchCases` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulSwitchCases = (* item: *) YulSwitchCase+;
                /// ```
                %yul-switch-cases,
                /// This kind represents a `YulSwitchStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulSwitchStatement = (* switch_keyword: *) YUL_SWITCH_KEYWORD
                ///                      (* expression: *) YulExpression
                ///                      (* cases: *) YulSwitchCases;
                /// ```
                %yul-switch-statement,
                /// This kind represents a `YulValueCase` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulValueCase = (* case_keyword: *) YUL_CASE_KEYWORD
                ///                (* value: *) YulLiteral
                ///                (* body: *) YulBlock;
                /// ```
                %yul-value-case,
                /// This kind represents a `YulVariableAssignmentStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulVariableAssignmentStatement = (* variables: *) YulPaths
                ///                                  (* assignment: *) YulAssignmentOperator
                ///                                  (* expression: *) YulExpression;
                /// ```
                %yul-variable-assignment-statement,
                /// This kind represents a `YulVariableDeclarationStatement` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulVariableDeclarationStatement = (* let_keyword: *) YUL_LET_KEYWORD
                ///                                   (* variables: *) YulVariableNames
                ///                                   (* value: *) YulVariableDeclarationValue?;
                /// ```
                %yul-variable-declaration-statement,
                /// This kind represents a `YulVariableDeclarationValue` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulVariableDeclarationValue = (* assignment: *) YulAssignmentOperator
                ///                               (* expression: *) YulExpression;
                /// ```
                %yul-variable-declaration-value,
                /// This kind represents a `YulVariableNames` node, with the following structure: 
                ///
                /// ```ebnf
                /// YulVariableNames = (* item: *) YUL_IDENTIFIER ((* separator: *) COMMA (* item: *) YUL_IDENTIFIER)*;
                /// ```
                %yul-variable-names,
    }

    /// Represents different kinds of terminal nodes in the syntax tree.
    /// These are leaf nodes that represent actual tokens in the source code.
    enum terminal-kind {
        /// This terminal is created when the parser encounters an unexpected part of the input,
        /// and it cannot recognize it as any valid syntax in this position in the grammar.
        unrecognized,
        /// This terminal is created when the parser is expecting a certain terminal, but it cannot find it.
        /// Adding the missing input in this position may allow the parser to produce a valid tree there.
        missing,
                /// This kind represents a `AbicoderKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// ABICODER_KEYWORD = "abicoder";
                /// ```
                %abicoder-keyword,
                /// This kind represents a `AbstractKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// ABSTRACT_KEYWORD = "abstract";
                /// ```
                %abstract-keyword,
                /// This kind represents a `AddressKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// ADDRESS_KEYWORD = "address";
                /// ```
                %address-keyword,
                /// This kind represents a `AfterKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// AFTER_KEYWORD = "after";
                /// ```
                %after-keyword,
                /// This kind represents a `AliasKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// ALIAS_KEYWORD = "alias";
                /// ```
                %alias-keyword,
                /// This kind represents a `Ampersand` node, with the following structure: 
                ///
                /// ```ebnf
                /// AMPERSAND = "&";
                /// ```
                %ampersand,
                /// This kind represents a `AmpersandAmpersand` node, with the following structure: 
                ///
                /// ```ebnf
                /// AMPERSAND_AMPERSAND = "&&";
                /// ```
                %ampersand-ampersand,
                /// This kind represents a `AmpersandEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// AMPERSAND_EQUAL = "&=";
                /// ```
                %ampersand-equal,
                /// This kind represents a `AnonymousKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// ANONYMOUS_KEYWORD = "anonymous";
                /// ```
                %anonymous-keyword,
                /// This kind represents a `ApplyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// APPLY_KEYWORD = "apply";
                /// ```
                %apply-keyword,
                /// This kind represents a `AsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// AS_KEYWORD = "as";
                /// ```
                %as-keyword,
                /// This kind represents a `AssemblyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// ASSEMBLY_KEYWORD = "assembly";
                /// ```
                %assembly-keyword,
                /// This kind represents a `Asterisk` node, with the following structure: 
                ///
                /// ```ebnf
                /// ASTERISK = "*";
                /// ```
                %asterisk,
                /// This kind represents a `AsteriskAsterisk` node, with the following structure: 
                ///
                /// ```ebnf
                /// ASTERISK_ASTERISK = "**";
                /// ```
                %asterisk-asterisk,
                /// This kind represents a `AsteriskEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// ASTERISK_EQUAL = "*=";
                /// ```
                %asterisk-equal,
                /// This kind represents a `AutoKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// AUTO_KEYWORD = "auto";
                /// ```
                %auto-keyword,
                /// This kind represents a `Bang` node, with the following structure: 
                ///
                /// ```ebnf
                /// BANG = "!";
                /// ```
                %bang,
                /// This kind represents a `BangEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// BANG_EQUAL = "!=";
                /// ```
                %bang-equal,
                /// This kind represents a `Bar` node, with the following structure: 
                ///
                /// ```ebnf
                /// BAR = "|";
                /// ```
                %bar,
                /// This kind represents a `BarBar` node, with the following structure: 
                ///
                /// ```ebnf
                /// BAR_BAR = "||";
                /// ```
                %bar-bar,
                /// This kind represents a `BarEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// BAR_EQUAL = "|=";
                /// ```
                %bar-equal,
                /// This kind represents a `BoolKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// BOOL_KEYWORD = "bool";
                /// ```
                %bool-keyword,
                /// This kind represents a `BreakKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// BREAK_KEYWORD = "break";
                /// ```
                %break-keyword,
                /// This kind represents a `ByteKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.8.0 *)
                /// BYTE_KEYWORD = "byte";
                /// ```
                %byte-keyword,
                /// This kind represents a `BytesKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// BYTES_KEYWORD = "bytes" ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32")?;
                /// ```
                %bytes-keyword,
                /// This kind represents a `CallDataKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.0 *)
                /// (* Reserved in 0.5.0 *)
                /// CALL_DATA_KEYWORD = "calldata";
                /// ```
                %call-data-keyword,
                /// This kind represents a `Caret` node, with the following structure: 
                ///
                /// ```ebnf
                /// CARET = "^";
                /// ```
                %caret,
                /// This kind represents a `CaretEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// CARET_EQUAL = "^=";
                /// ```
                %caret-equal,
                /// This kind represents a `CaseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// CASE_KEYWORD = "case";
                /// ```
                %case-keyword,
                /// This kind represents a `CatchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// CATCH_KEYWORD = "catch";
                /// ```
                %catch-keyword,
                /// This kind represents a `CloseBrace` node, with the following structure: 
                ///
                /// ```ebnf
                /// CLOSE_BRACE = "}";
                /// ```
                %close-brace,
                /// This kind represents a `CloseBracket` node, with the following structure: 
                ///
                /// ```ebnf
                /// CLOSE_BRACKET = "]";
                /// ```
                %close-bracket,
                /// This kind represents a `CloseParen` node, with the following structure: 
                ///
                /// ```ebnf
                /// CLOSE_PAREN = ")";
                /// ```
                %close-paren,
                /// This kind represents a `Colon` node, with the following structure: 
                ///
                /// ```ebnf
                /// COLON = ":";
                /// ```
                %colon,
                /// This kind represents a `ColonEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// COLON_EQUAL = ":=";
                /// ```
                %colon-equal,
                /// This kind represents a `Comma` node, with the following structure: 
                ///
                /// ```ebnf
                /// COMMA = ",";
                /// ```
                %comma,
                /// This kind represents a `ConstantKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// CONSTANT_KEYWORD = "constant";
                /// ```
                %constant-keyword,
                /// This kind represents a `ConstructorKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.22 *)
                /// (* Reserved in 0.5.0 *)
                /// CONSTRUCTOR_KEYWORD = "constructor";
                /// ```
                %constructor-keyword,
                /// This kind represents a `ContinueKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// CONTINUE_KEYWORD = "continue";
                /// ```
                %continue-keyword,
                /// This kind represents a `ContractKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// CONTRACT_KEYWORD = "contract";
                /// ```
                %contract-keyword,
                /// This kind represents a `CopyOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// COPY_OF_KEYWORD = "copyof";
                /// ```
                %copy-of-keyword,
                /// This kind represents a `DaysKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// DAYS_KEYWORD = "days";
                /// ```
                %days-keyword,
                /// This kind represents a `DecimalLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// DECIMAL_LITERAL = "." «DECIMAL_DIGITS» «DECIMAL_EXPONENT»?;
                /// 
                /// DECIMAL_LITERAL = «DECIMAL_DIGITS» «DECIMAL_EXPONENT»?;
                /// 
                /// (* Deprecated in 0.5.0 *)
                /// DECIMAL_LITERAL = «DECIMAL_DIGITS» "." «DECIMAL_EXPONENT»?;
                /// 
                /// (* Deprecated in 0.5.0 *)
                /// DECIMAL_LITERAL = «DECIMAL_DIGITS» "." «DECIMAL_DIGITS» «DECIMAL_EXPONENT»?;
                /// 
                /// (* Introduced in 0.5.0 *)
                /// DECIMAL_LITERAL = «DECIMAL_DIGITS» ("." «DECIMAL_DIGITS»)? «DECIMAL_EXPONENT»?;
                /// ```
                %decimal-literal,
                /// This kind represents a `DefaultKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// DEFAULT_KEYWORD = "default";
                /// ```
                %default-keyword,
                /// This kind represents a `DefineKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// DEFINE_KEYWORD = "define";
                /// ```
                %define-keyword,
                /// This kind represents a `DeleteKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// DELETE_KEYWORD = "delete";
                /// ```
                %delete-keyword,
                /// This kind represents a `DoKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// DO_KEYWORD = "do";
                /// ```
                %do-keyword,
                /// This kind represents a `DoubleQuotedHexStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// DOUBLE_QUOTED_HEX_STRING_LITERAL = 'hex"' «HEX_STRING_CONTENTS»? '"';
                /// ```
                %double-quoted-hex-string-literal,
                /// This kind represents a `DoubleQuotedStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.4.25 *)
                /// DOUBLE_QUOTED_STRING_LITERAL = '"' («ESCAPE_SEQUENCE_ARBITRARY» | !('"' "\\" "\r" "\n"))* '"';
                /// 
                /// (* Introduced in 0.4.25 and deprecated in 0.7.0. *)
                /// DOUBLE_QUOTED_STRING_LITERAL = '"' («ESCAPE_SEQUENCE» | !('"' "\\" "\r" "\n"))* '"';
                /// 
                /// DOUBLE_QUOTED_STRING_LITERAL = '"' («ESCAPE_SEQUENCE» | (" "…"!") | ("#"…"[") | ("]"…"~"))* '"';
                /// ```
                %double-quoted-string-literal,
                /// This kind represents a `DoubleQuotedUnicodeStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.7.0 *)
                /// DOUBLE_QUOTED_UNICODE_STRING_LITERAL = 'unicode"' («ESCAPE_SEQUENCE» | !('"' "\\" "\r" "\n"))* '"';
                /// ```
                %double-quoted-unicode-string-literal,
                /// This kind represents a `DoubleQuotedVersionLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// DOUBLE_QUOTED_VERSION_LITERAL = '"' «VERSION_SPECIFIER_FRAGMENT» ("." «VERSION_SPECIFIER_FRAGMENT»)* '"';
                /// ```
                %double-quoted-version-literal,
                /// This kind represents a `ElseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// ELSE_KEYWORD = "else";
                /// ```
                %else-keyword,
                /// This kind represents a `EmitKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.21 *)
                /// (* Reserved in 0.5.0 *)
                /// EMIT_KEYWORD = "emit";
                /// ```
                %emit-keyword,
                /// This kind represents a `EndOfLine` node, with the following structure: 
                ///
                /// ```ebnf
                /// END_OF_LINE = "\n" | ("\r" "\n"?);
                /// ```
                %end-of-line,
                /// This kind represents a `EnumKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// ENUM_KEYWORD = "enum";
                /// ```
                %enum-keyword,
                /// This kind represents a `Equal` node, with the following structure: 
                ///
                /// ```ebnf
                /// EQUAL = "=";
                /// ```
                %equal,
                /// This kind represents a `EqualColon` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// EQUAL_COLON = "=:";
                /// ```
                %equal-colon,
                /// This kind represents a `EqualEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// EQUAL_EQUAL = "==";
                /// ```
                %equal-equal,
                /// This kind represents a `EqualGreaterThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// EQUAL_GREATER_THAN = "=>";
                /// ```
                %equal-greater-than,
                /// This kind represents a `ErrorKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// (* Never reserved *)
                /// ERROR_KEYWORD = "error";
                /// ```
                %error-keyword,
                /// This kind represents a `EtherKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// ETHER_KEYWORD = "ether";
                /// ```
                %ether-keyword,
                /// This kind represents a `EventKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// EVENT_KEYWORD = "event";
                /// ```
                %event-keyword,
                /// This kind represents a `ExperimentalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// EXPERIMENTAL_KEYWORD = "experimental";
                /// ```
                %experimental-keyword,
                /// This kind represents a `ExternalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// EXTERNAL_KEYWORD = "external";
                /// ```
                %external-keyword,
                /// This kind represents a `FallbackKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.6.0 *)
                /// FALLBACK_KEYWORD = "fallback";
                /// ```
                %fallback-keyword,
                /// This kind represents a `FalseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// FALSE_KEYWORD = "false";
                /// ```
                %false-keyword,
                /// This kind represents a `FinalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// FINAL_KEYWORD = "final";
                /// ```
                %final-keyword,
                /// This kind represents a `FinneyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.7.0 *)
                /// (* Reserved until 0.7.0 *)
                /// FINNEY_KEYWORD = "finney";
                /// ```
                %finney-keyword,
                /// This kind represents a `FixedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// FIXED_KEYWORD = "fixed";
                /// 
                /// FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");
                /// 
                /// FIXED_KEYWORD = "fixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");
                /// 
                /// (* Reserved in 0.4.14 *)
                /// FIXED_KEYWORD = "fixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");
                /// 
                /// (* Reserved in 0.4.14 *)
                /// FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");
                /// ```
                %fixed-keyword,
                /// This kind represents a `ForKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// FOR_KEYWORD = "for";
                /// ```
                %for-keyword,
                /// This kind represents a `FromKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// FROM_KEYWORD = "from";
                /// ```
                %from-keyword,
                /// This kind represents a `FunctionKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// FUNCTION_KEYWORD = "function";
                /// ```
                %function-keyword,
                /// This kind represents a `GlobalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.13 *)
                /// (* Never reserved *)
                /// GLOBAL_KEYWORD = "global";
                /// ```
                %global-keyword,
                /// This kind represents a `GreaterThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN = ">";
                /// ```
                %greater-than,
                /// This kind represents a `GreaterThanEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN_EQUAL = ">=";
                /// ```
                %greater-than-equal,
                /// This kind represents a `GreaterThanGreaterThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN_GREATER_THAN = ">>";
                /// ```
                %greater-than-greater-than,
                /// This kind represents a `GreaterThanGreaterThanEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN_GREATER_THAN_EQUAL = ">>=";
                /// ```
                %greater-than-greater-than-equal,
                /// This kind represents a `GreaterThanGreaterThanGreaterThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN_GREATER_THAN_GREATER_THAN = ">>>";
                /// ```
                %greater-than-greater-than-greater-than,
                /// This kind represents a `GreaterThanGreaterThanGreaterThanEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// GREATER_THAN_GREATER_THAN_GREATER_THAN_EQUAL = ">>>=";
                /// ```
                %greater-than-greater-than-greater-than-equal,
                /// This kind represents a `GweiKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.11 *)
                /// (* Reserved in 0.7.0 *)
                /// GWEI_KEYWORD = "gwei";
                /// ```
                %gwei-keyword,
                /// This kind represents a `HexKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// HEX_KEYWORD = "hex";
                /// ```
                %hex-keyword,
                /// This kind represents a `HexLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// HEX_LITERAL = "0x" «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
                /// 
                /// (* Deprecated in 0.5.0 *)
                /// HEX_LITERAL = "0X" «HEX_CHARACTER»+ ("_" «HEX_CHARACTER»+)*;
                /// ```
                %hex-literal,
                /// This kind represents a `HoursKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// HOURS_KEYWORD = "hours";
                /// ```
                %hours-keyword,
                /// This kind represents a `Identifier` node, with the following structure: 
                ///
                /// ```ebnf
                /// IDENTIFIER = «IDENTIFIER_START» «IDENTIFIER_PART»*;
                /// ```
                %identifier,
                /// This kind represents a `IfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// IF_KEYWORD = "if";
                /// ```
                %if-keyword,
                /// This kind represents a `ImmutableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.5 *)
                /// (* Reserved in 0.5.0 *)
                /// IMMUTABLE_KEYWORD = "immutable";
                /// ```
                %immutable-keyword,
                /// This kind represents a `ImplementsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// IMPLEMENTS_KEYWORD = "implements";
                /// ```
                %implements-keyword,
                /// This kind represents a `ImportKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// IMPORT_KEYWORD = "import";
                /// ```
                %import-keyword,
                /// This kind represents a `InKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// IN_KEYWORD = "in";
                /// ```
                %in-keyword,
                /// This kind represents a `IndexedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// INDEXED_KEYWORD = "indexed";
                /// ```
                %indexed-keyword,
                /// This kind represents a `InlineKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// INLINE_KEYWORD = "inline";
                /// ```
                %inline-keyword,
                /// This kind represents a `IntKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// INT_KEYWORD = "int" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;
                /// ```
                %int-keyword,
                /// This kind represents a `InterfaceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// INTERFACE_KEYWORD = "interface";
                /// ```
                %interface-keyword,
                /// This kind represents a `InternalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// INTERNAL_KEYWORD = "internal";
                /// ```
                %internal-keyword,
                /// This kind represents a `IsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// IS_KEYWORD = "is";
                /// ```
                %is-keyword,
                /// This kind represents a `LessThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// LESS_THAN = "<";
                /// ```
                %less-than,
                /// This kind represents a `LessThanEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// LESS_THAN_EQUAL = "<=";
                /// ```
                %less-than-equal,
                /// This kind represents a `LessThanLessThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// LESS_THAN_LESS_THAN = "<<";
                /// ```
                %less-than-less-than,
                /// This kind represents a `LessThanLessThanEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// LESS_THAN_LESS_THAN_EQUAL = "<<=";
                /// ```
                %less-than-less-than-equal,
                /// This kind represents a `LetKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// LET_KEYWORD = "let";
                /// ```
                %let-keyword,
                /// This kind represents a `LibraryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// LIBRARY_KEYWORD = "library";
                /// ```
                %library-keyword,
                /// This kind represents a `MacroKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// MACRO_KEYWORD = "macro";
                /// ```
                %macro-keyword,
                /// This kind represents a `MappingKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// MAPPING_KEYWORD = "mapping";
                /// ```
                %mapping-keyword,
                /// This kind represents a `MatchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// MATCH_KEYWORD = "match";
                /// ```
                %match-keyword,
                /// This kind represents a `MemoryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// MEMORY_KEYWORD = "memory";
                /// ```
                %memory-keyword,
                /// This kind represents a `Minus` node, with the following structure: 
                ///
                /// ```ebnf
                /// MINUS = "-";
                /// ```
                %minus,
                /// This kind represents a `MinusEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// MINUS_EQUAL = "-=";
                /// ```
                %minus-equal,
                /// This kind represents a `MinusGreaterThan` node, with the following structure: 
                ///
                /// ```ebnf
                /// MINUS_GREATER_THAN = "->";
                /// ```
                %minus-greater-than,
                /// This kind represents a `MinusMinus` node, with the following structure: 
                ///
                /// ```ebnf
                /// MINUS_MINUS = "--";
                /// ```
                %minus-minus,
                /// This kind represents a `MinutesKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// MINUTES_KEYWORD = "minutes";
                /// ```
                %minutes-keyword,
                /// This kind represents a `ModifierKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// MODIFIER_KEYWORD = "modifier";
                /// ```
                %modifier-keyword,
                /// This kind represents a `MultiLineComment` node, with the following structure: 
                ///
                /// ```ebnf
                /// MULTI_LINE_COMMENT = "/*" (!"*" | "*")* "*/";
                /// ```
                %multi-line-comment,
                /// This kind represents a `MultiLineNatSpecComment` node, with the following structure: 
                ///
                /// ```ebnf
                /// MULTI_LINE_NAT_SPEC_COMMENT = "/**" (!"*" | "*")* "*/";
                /// ```
                %multi-line-nat-spec-comment,
                /// This kind represents a `MutableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// MUTABLE_KEYWORD = "mutable";
                /// ```
                %mutable-keyword,
                /// This kind represents a `NewKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// NEW_KEYWORD = "new";
                /// ```
                %new-keyword,
                /// This kind represents a `NullKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// NULL_KEYWORD = "null";
                /// ```
                %null-keyword,
                /// This kind represents a `OfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// OF_KEYWORD = "of";
                /// ```
                %of-keyword,
                /// This kind represents a `OpenBrace` node, with the following structure: 
                ///
                /// ```ebnf
                /// OPEN_BRACE = "{";
                /// ```
                %open-brace,
                /// This kind represents a `OpenBracket` node, with the following structure: 
                ///
                /// ```ebnf
                /// OPEN_BRACKET = "[";
                /// ```
                %open-bracket,
                /// This kind represents a `OpenParen` node, with the following structure: 
                ///
                /// ```ebnf
                /// OPEN_PAREN = "(";
                /// ```
                %open-paren,
                /// This kind represents a `OverrideKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// (* Reserved in 0.5.0 *)
                /// OVERRIDE_KEYWORD = "override";
                /// ```
                %override-keyword,
                /// This kind represents a `PartialKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// PARTIAL_KEYWORD = "partial";
                /// ```
                %partial-keyword,
                /// This kind represents a `PayableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// PAYABLE_KEYWORD = "payable";
                /// ```
                %payable-keyword,
                /// This kind represents a `Percent` node, with the following structure: 
                ///
                /// ```ebnf
                /// PERCENT = "%";
                /// ```
                %percent,
                /// This kind represents a `PercentEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// PERCENT_EQUAL = "%=";
                /// ```
                %percent-equal,
                /// This kind represents a `Period` node, with the following structure: 
                ///
                /// ```ebnf
                /// PERIOD = ".";
                /// ```
                %period,
                /// This kind represents a `Plus` node, with the following structure: 
                ///
                /// ```ebnf
                /// PLUS = "+";
                /// ```
                %plus,
                /// This kind represents a `PlusEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// PLUS_EQUAL = "+=";
                /// ```
                %plus-equal,
                /// This kind represents a `PlusPlus` node, with the following structure: 
                ///
                /// ```ebnf
                /// PLUS_PLUS = "++";
                /// ```
                %plus-plus,
                /// This kind represents a `PragmaKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// PRAGMA_KEYWORD = "pragma";
                /// ```
                %pragma-keyword,
                /// This kind represents a `PrivateKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// PRIVATE_KEYWORD = "private";
                /// ```
                %private-keyword,
                /// This kind represents a `PromiseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// PROMISE_KEYWORD = "promise";
                /// ```
                %promise-keyword,
                /// This kind represents a `PublicKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// PUBLIC_KEYWORD = "public";
                /// ```
                %public-keyword,
                /// This kind represents a `PureKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.16 *)
                /// PURE_KEYWORD = "pure";
                /// ```
                %pure-keyword,
                /// This kind represents a `QuestionMark` node, with the following structure: 
                ///
                /// ```ebnf
                /// QUESTION_MARK = "?";
                /// ```
                %question-mark,
                /// This kind represents a `ReceiveKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.6.0 *)
                /// RECEIVE_KEYWORD = "receive";
                /// ```
                %receive-keyword,
                /// This kind represents a `ReferenceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// REFERENCE_KEYWORD = "reference";
                /// ```
                %reference-keyword,
                /// This kind represents a `RelocatableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// RELOCATABLE_KEYWORD = "relocatable";
                /// ```
                %relocatable-keyword,
                /// This kind represents a `ReturnKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// RETURN_KEYWORD = "return";
                /// ```
                %return-keyword,
                /// This kind represents a `ReturnsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// RETURNS_KEYWORD = "returns";
                /// ```
                %returns-keyword,
                /// This kind represents a `RevertKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.4 *)
                /// (* Never reserved *)
                /// REVERT_KEYWORD = "revert";
                /// ```
                %revert-keyword,
                /// This kind represents a `SealedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// SEALED_KEYWORD = "sealed";
                /// ```
                %sealed-keyword,
                /// This kind represents a `SecondsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// SECONDS_KEYWORD = "seconds";
                /// ```
                %seconds-keyword,
                /// This kind represents a `Semicolon` node, with the following structure: 
                ///
                /// ```ebnf
                /// SEMICOLON = ";";
                /// ```
                %semicolon,
                /// This kind represents a `SingleLineComment` node, with the following structure: 
                ///
                /// ```ebnf
                /// SINGLE_LINE_COMMENT = "//" (!("\r" "\n"))*;
                /// ```
                %single-line-comment,
                /// This kind represents a `SingleLineNatSpecComment` node, with the following structure: 
                ///
                /// ```ebnf
                /// SINGLE_LINE_NAT_SPEC_COMMENT = "///" (!("\r" "\n"))*;
                /// ```
                %single-line-nat-spec-comment,
                /// This kind represents a `SingleQuotedHexStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// SINGLE_QUOTED_HEX_STRING_LITERAL = "hex'" «HEX_STRING_CONTENTS»? "'";
                /// ```
                %single-quoted-hex-string-literal,
                /// This kind represents a `SingleQuotedStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.4.25 *)
                /// SINGLE_QUOTED_STRING_LITERAL = "'" («ESCAPE_SEQUENCE_ARBITRARY» | !("'" "\\" "\r" "\n"))* "'";
                /// 
                /// (* Introduced in 0.4.25 and deprecated in 0.7.0. *)
                /// SINGLE_QUOTED_STRING_LITERAL = "'" («ESCAPE_SEQUENCE» | !("'" "\\" "\r" "\n"))* "'";
                /// 
                /// SINGLE_QUOTED_STRING_LITERAL = "'" («ESCAPE_SEQUENCE» | (" "…"&") | ("("…"[") | ("]"…"~"))* "'";
                /// ```
                %single-quoted-string-literal,
                /// This kind represents a `SingleQuotedUnicodeStringLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.7.0 *)
                /// SINGLE_QUOTED_UNICODE_STRING_LITERAL = "unicode'" («ESCAPE_SEQUENCE» | !("'" "\\" "\r" "\n"))* "'";
                /// ```
                %single-quoted-unicode-string-literal,
                /// This kind represents a `SingleQuotedVersionLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// SINGLE_QUOTED_VERSION_LITERAL = "'" «VERSION_SPECIFIER_FRAGMENT» ("." «VERSION_SPECIFIER_FRAGMENT»)* "'";
                /// ```
                %single-quoted-version-literal,
                /// This kind represents a `SizeOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// SIZE_OF_KEYWORD = "sizeof";
                /// ```
                %size-of-keyword,
                /// This kind represents a `Slash` node, with the following structure: 
                ///
                /// ```ebnf
                /// SLASH = "/";
                /// ```
                %slash,
                /// This kind represents a `SlashEqual` node, with the following structure: 
                ///
                /// ```ebnf
                /// SLASH_EQUAL = "/=";
                /// ```
                %slash-equal,
                /// This kind represents a `SolidityKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// SOLIDITY_KEYWORD = "solidity";
                /// ```
                %solidity-keyword,
                /// This kind represents a `StaticKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// STATIC_KEYWORD = "static";
                /// ```
                %static-keyword,
                /// This kind represents a `StorageKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// STORAGE_KEYWORD = "storage";
                /// ```
                %storage-keyword,
                /// This kind represents a `StringKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// STRING_KEYWORD = "string";
                /// ```
                %string-keyword,
                /// This kind represents a `StructKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// STRUCT_KEYWORD = "struct";
                /// ```
                %struct-keyword,
                /// This kind represents a `SuperKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// SUPER_KEYWORD = "super";
                /// ```
                %super-keyword,
                /// This kind represents a `SupportsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// SUPPORTS_KEYWORD = "supports";
                /// ```
                %supports-keyword,
                /// This kind represents a `SwitchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// SWITCH_KEYWORD = "switch";
                /// ```
                %switch-keyword,
                /// This kind represents a `SzaboKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.7.0 *)
                /// (* Reserved until 0.7.0 *)
                /// SZABO_KEYWORD = "szabo";
                /// ```
                %szabo-keyword,
                /// This kind represents a `ThisKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// THIS_KEYWORD = "this";
                /// ```
                %this-keyword,
                /// This kind represents a `ThrowKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// THROW_KEYWORD = "throw";
                /// ```
                %throw-keyword,
                /// This kind represents a `Tilde` node, with the following structure: 
                ///
                /// ```ebnf
                /// TILDE = "~";
                /// ```
                %tilde,
                /// This kind represents a `TransientKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.27 *)
                /// (* Never reserved *)
                /// TRANSIENT_KEYWORD = "transient";
                /// ```
                %transient-keyword,
                /// This kind represents a `TrueKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// TRUE_KEYWORD = "true";
                /// ```
                %true-keyword,
                /// This kind represents a `TryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// TRY_KEYWORD = "try";
                /// ```
                %try-keyword,
                /// This kind represents a `TypeDefKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.0 *)
                /// TYPE_DEF_KEYWORD = "typedef";
                /// ```
                %type-def-keyword,
                /// This kind represents a `TypeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.3 *)
                /// TYPE_KEYWORD = "type";
                /// ```
                %type-keyword,
                /// This kind represents a `TypeOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// TYPE_OF_KEYWORD = "typeof";
                /// ```
                %type-of-keyword,
                /// This kind represents a `UfixedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// UFIXED_KEYWORD = "ufixed";
                /// 
                /// UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");
                /// 
                /// UFIXED_KEYWORD = "ufixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");
                /// 
                /// (* Reserved in 0.4.14 *)
                /// UFIXED_KEYWORD = "ufixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");
                /// 
                /// (* Reserved in 0.4.14 *)
                /// UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");
                /// ```
                %ufixed-keyword,
                /// This kind represents a `UintKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// UINT_KEYWORD = "uint" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;
                /// ```
                %uint-keyword,
                /// This kind represents a `UncheckedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.0 *)
                /// (* Reserved in 0.5.0 *)
                /// UNCHECKED_KEYWORD = "unchecked";
                /// ```
                %unchecked-keyword,
                /// This kind represents a `UsingKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// USING_KEYWORD = "using";
                /// ```
                %using-keyword,
                /// This kind represents a `VarKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// VAR_KEYWORD = "var";
                /// ```
                %var-keyword,
                /// This kind represents a `VersionSpecifier` node, with the following structure: 
                ///
                /// ```ebnf
                /// VERSION_SPECIFIER = «VERSION_SPECIFIER_FRAGMENT»;
                /// ```
                %version-specifier,
                /// This kind represents a `ViewKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.16 *)
                /// VIEW_KEYWORD = "view";
                /// ```
                %view-keyword,
                /// This kind represents a `VirtualKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// (* Reserved in 0.6.0 *)
                /// VIRTUAL_KEYWORD = "virtual";
                /// ```
                %virtual-keyword,
                /// This kind represents a `WeeksKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// WEEKS_KEYWORD = "weeks";
                /// ```
                %weeks-keyword,
                /// This kind represents a `WeiKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// WEI_KEYWORD = "wei";
                /// ```
                %wei-keyword,
                /// This kind represents a `WhileKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// WHILE_KEYWORD = "while";
                /// ```
                %while-keyword,
                /// This kind represents a `Whitespace` node, with the following structure: 
                ///
                /// ```ebnf
                /// WHITESPACE = (" " | "\t")+;
                /// ```
                %whitespace,
                /// This kind represents a `YearsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YEARS_KEYWORD = "years";
                /// ```
                %years-keyword,
                /// This kind represents a `YulAbstractKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ABSTRACT_KEYWORD = "abstract";
                /// ```
                %yul-abstract-keyword,
                /// This kind represents a `YulAddKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_ADD_KEYWORD = "add";
                /// ```
                %yul-add-keyword,
                /// This kind represents a `YulAddModKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_ADD_MOD_KEYWORD = "addmod";
                /// ```
                %yul-add-mod-keyword,
                /// This kind represents a `YulAddressKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Never reserved *)
                /// YUL_ADDRESS_KEYWORD = "address";
                /// ```
                %yul-address-keyword,
                /// This kind represents a `YulAfterKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_AFTER_KEYWORD = "after";
                /// ```
                %yul-after-keyword,
                /// This kind represents a `YulAliasKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_ALIAS_KEYWORD = "alias";
                /// ```
                %yul-alias-keyword,
                /// This kind represents a `YulAndKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_AND_KEYWORD = "and";
                /// ```
                %yul-and-keyword,
                /// This kind represents a `YulAnonymousKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ANONYMOUS_KEYWORD = "anonymous";
                /// ```
                %yul-anonymous-keyword,
                /// This kind represents a `YulApplyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_APPLY_KEYWORD = "apply";
                /// ```
                %yul-apply-keyword,
                /// This kind represents a `YulAsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_AS_KEYWORD = "as";
                /// ```
                %yul-as-keyword,
                /// This kind represents a `YulAssemblyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ASSEMBLY_KEYWORD = "assembly";
                /// ```
                %yul-assembly-keyword,
                /// This kind represents a `YulAutoKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_AUTO_KEYWORD = "auto";
                /// ```
                %yul-auto-keyword,
                /// This kind represents a `YulBalanceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_BALANCE_KEYWORD = "balance";
                /// ```
                %yul-balance-keyword,
                /// This kind represents a `YulBaseFeeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.7 *)
                /// (* Reserved in 0.8.7 *)
                /// YUL_BASE_FEE_KEYWORD = "basefee";
                /// ```
                %yul-base-fee-keyword,
                /// This kind represents a `YulBlobBaseFeeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.24 *)
                /// (* Reserved in 0.8.25 *)
                /// YUL_BLOB_BASE_FEE_KEYWORD = "blobbasefee";
                /// ```
                %yul-blob-base-fee-keyword,
                /// This kind represents a `YulBlobHashKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.24 *)
                /// (* Reserved in 0.8.25 *)
                /// YUL_BLOB_HASH_KEYWORD = "blobhash";
                /// ```
                %yul-blob-hash-keyword,
                /// This kind represents a `YulBlockHashKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_BLOCK_HASH_KEYWORD = "blockhash";
                /// ```
                %yul-block-hash-keyword,
                /// This kind represents a `YulBoolKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.5.10 *)
                /// YUL_BOOL_KEYWORD = "bool";
                /// ```
                %yul-bool-keyword,
                /// This kind represents a `YulBreakKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_BREAK_KEYWORD = "break";
                /// ```
                %yul-break-keyword,
                /// This kind represents a `YulByteKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_BYTE_KEYWORD = "byte";
                /// ```
                %yul-byte-keyword,
                /// This kind represents a `YulBytesKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_BYTES_KEYWORD = "bytes" ("1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32")?;
                /// ```
                %yul-bytes-keyword,
                /// This kind represents a `YulCallCodeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_CODE_KEYWORD = "callcode";
                /// ```
                %yul-call-code-keyword,
                /// This kind represents a `YulCallDataCopyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_DATA_COPY_KEYWORD = "calldatacopy";
                /// ```
                %yul-call-data-copy-keyword,
                /// This kind represents a `YulCallDataKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_CALL_DATA_KEYWORD = "calldata";
                /// ```
                %yul-call-data-keyword,
                /// This kind represents a `YulCallDataLoadKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_DATA_LOAD_KEYWORD = "calldataload";
                /// ```
                %yul-call-data-load-keyword,
                /// This kind represents a `YulCallDataSizeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_DATA_SIZE_KEYWORD = "calldatasize";
                /// ```
                %yul-call-data-size-keyword,
                /// This kind represents a `YulCallKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_KEYWORD = "call";
                /// ```
                %yul-call-keyword,
                /// This kind represents a `YulCallValueKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALL_VALUE_KEYWORD = "callvalue";
                /// ```
                %yul-call-value-keyword,
                /// This kind represents a `YulCallerKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CALLER_KEYWORD = "caller";
                /// ```
                %yul-caller-keyword,
                /// This kind represents a `YulCaseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CASE_KEYWORD = "case";
                /// ```
                %yul-case-keyword,
                /// This kind represents a `YulCatchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_CATCH_KEYWORD = "catch";
                /// ```
                %yul-catch-keyword,
                /// This kind represents a `YulChainIdKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.12 *)
                /// YUL_CHAIN_ID_KEYWORD = "chainid";
                /// ```
                %yul-chain-id-keyword,
                /// This kind represents a `YulCoinBaseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_COIN_BASE_KEYWORD = "coinbase";
                /// ```
                %yul-coin-base-keyword,
                /// This kind represents a `YulConstantKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_CONSTANT_KEYWORD = "constant";
                /// ```
                %yul-constant-keyword,
                /// This kind represents a `YulConstructorKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_CONSTRUCTOR_KEYWORD = "constructor";
                /// ```
                %yul-constructor-keyword,
                /// This kind represents a `YulContinueKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CONTINUE_KEYWORD = "continue";
                /// ```
                %yul-continue-keyword,
                /// This kind represents a `YulContractKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_CONTRACT_KEYWORD = "contract";
                /// ```
                %yul-contract-keyword,
                /// This kind represents a `YulCopyOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_COPY_OF_KEYWORD = "copyof";
                /// ```
                %yul-copy-of-keyword,
                /// This kind represents a `YulCreate2Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.12 *)
                /// (* Reserved in 0.4.12 *)
                /// YUL_CREATE_2_KEYWORD = "create2";
                /// ```
                %yul-create2-keyword,
                /// This kind represents a `YulCreateKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_CREATE_KEYWORD = "create";
                /// ```
                %yul-create-keyword,
                /// This kind represents a `YulDaysKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_DAYS_KEYWORD = "days";
                /// ```
                %yul-days-keyword,
                /// This kind represents a `YulDecimalLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_DECIMAL_LITERAL = "0" | (("1"…"9") ("0"…"9")*);
                /// ```
                %yul-decimal-literal,
                /// This kind represents a `YulDefaultKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_DEFAULT_KEYWORD = "default";
                /// ```
                %yul-default-keyword,
                /// This kind represents a `YulDefineKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_DEFINE_KEYWORD = "define";
                /// ```
                %yul-define-keyword,
                /// This kind represents a `YulDelegateCallKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_DELEGATE_CALL_KEYWORD = "delegatecall";
                /// ```
                %yul-delegate-call-keyword,
                /// This kind represents a `YulDeleteKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_DELETE_KEYWORD = "delete";
                /// ```
                %yul-delete-keyword,
                /// This kind represents a `YulDifficultyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.8.18 *)
                /// YUL_DIFFICULTY_KEYWORD = "difficulty";
                /// ```
                %yul-difficulty-keyword,
                /// This kind represents a `YulDivKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_DIV_KEYWORD = "div";
                /// ```
                %yul-div-keyword,
                /// This kind represents a `YulDoKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_DO_KEYWORD = "do";
                /// ```
                %yul-do-keyword,
                /// This kind represents a `YulElseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ELSE_KEYWORD = "else";
                /// ```
                %yul-else-keyword,
                /// This kind represents a `YulEmitKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_EMIT_KEYWORD = "emit";
                /// ```
                %yul-emit-keyword,
                /// This kind represents a `YulEnumKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ENUM_KEYWORD = "enum";
                /// ```
                %yul-enum-keyword,
                /// This kind represents a `YulEqKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_EQ_KEYWORD = "eq";
                /// ```
                %yul-eq-keyword,
                /// This kind represents a `YulEtherKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_ETHER_KEYWORD = "ether";
                /// ```
                %yul-ether-keyword,
                /// This kind represents a `YulEventKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_EVENT_KEYWORD = "event";
                /// ```
                %yul-event-keyword,
                /// This kind represents a `YulExpKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_EXP_KEYWORD = "exp";
                /// ```
                %yul-exp-keyword,
                /// This kind represents a `YulExtCodeCopyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_EXT_CODE_COPY_KEYWORD = "extcodecopy";
                /// ```
                %yul-ext-code-copy-keyword,
                /// This kind represents a `YulExtCodeHashKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.0 *)
                /// (* Reserved in 0.5.0 *)
                /// YUL_EXT_CODE_HASH_KEYWORD = "extcodehash";
                /// ```
                %yul-ext-code-hash-keyword,
                /// This kind represents a `YulExtCodeSizeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_EXT_CODE_SIZE_KEYWORD = "extcodesize";
                /// ```
                %yul-ext-code-size-keyword,
                /// This kind represents a `YulExternalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_EXTERNAL_KEYWORD = "external";
                /// ```
                %yul-external-keyword,
                /// This kind represents a `YulFallbackKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.6.0 until 0.7.1 *)
                /// YUL_FALLBACK_KEYWORD = "fallback";
                /// ```
                %yul-fallback-keyword,
                /// This kind represents a `YulFalseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_FALSE_KEYWORD = "false";
                /// ```
                %yul-false-keyword,
                /// This kind represents a `YulFinalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_FINAL_KEYWORD = "final";
                /// ```
                %yul-final-keyword,
                /// This kind represents a `YulFinneyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.0 *)
                /// YUL_FINNEY_KEYWORD = "finney";
                /// ```
                %yul-finney-keyword,
                /// This kind represents a `YulFixedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_FIXED_KEYWORD = "fixed";
                /// 
                /// (* Reserved until 0.7.1 *)
                /// YUL_FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");
                /// 
                /// (* Reserved until 0.7.1 *)
                /// YUL_FIXED_KEYWORD = "fixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");
                /// 
                /// (* Reserved from 0.4.14 until 0.7.1 *)
                /// YUL_FIXED_KEYWORD = "fixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");
                /// 
                /// (* Reserved from 0.4.14 until 0.7.1 *)
                /// YUL_FIXED_KEYWORD = "fixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");
                /// ```
                %yul-fixed-keyword,
                /// This kind represents a `YulForKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_FOR_KEYWORD = "for";
                /// ```
                %yul-for-keyword,
                /// This kind represents a `YulFunctionKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_FUNCTION_KEYWORD = "function";
                /// ```
                %yul-function-keyword,
                /// This kind represents a `YulGasKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_GAS_KEYWORD = "gas";
                /// ```
                %yul-gas-keyword,
                /// This kind represents a `YulGasLimitKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_GAS_LIMIT_KEYWORD = "gaslimit";
                /// ```
                %yul-gas-limit-keyword,
                /// This kind represents a `YulGasPriceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_GAS_PRICE_KEYWORD = "gasprice";
                /// ```
                %yul-gas-price-keyword,
                /// This kind represents a `YulGtKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_GT_KEYWORD = "gt";
                /// ```
                %yul-gt-keyword,
                /// This kind represents a `YulGweiKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.7.0 until 0.7.1 *)
                /// YUL_GWEI_KEYWORD = "gwei";
                /// ```
                %yul-gwei-keyword,
                /// This kind represents a `YulHexKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_HEX_KEYWORD = "hex";
                /// ```
                %yul-hex-keyword,
                /// This kind represents a `YulHexLiteral` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_HEX_LITERAL = "0x" «HEX_CHARACTER»+;
                /// ```
                %yul-hex-literal,
                /// This kind represents a `YulHoursKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_HOURS_KEYWORD = "hours";
                /// ```
                %yul-hours-keyword,
                /// This kind represents a `YulIdentifier` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.5.8 and deprecated in 0.7.0. *)
                /// YUL_IDENTIFIER = «IDENTIFIER_START» («IDENTIFIER_PART» | ".")*;
                /// 
                /// YUL_IDENTIFIER = «IDENTIFIER_START» «IDENTIFIER_PART»*;
                /// ```
                %yul-identifier,
                /// This kind represents a `YulIfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_IF_KEYWORD = "if";
                /// ```
                %yul-if-keyword,
                /// This kind represents a `YulImmutableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_IMMUTABLE_KEYWORD = "immutable";
                /// ```
                %yul-immutable-keyword,
                /// This kind represents a `YulImplementsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_IMPLEMENTS_KEYWORD = "implements";
                /// ```
                %yul-implements-keyword,
                /// This kind represents a `YulImportKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_IMPORT_KEYWORD = "import";
                /// ```
                %yul-import-keyword,
                /// This kind represents a `YulInKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.6.8 *)
                /// YUL_IN_KEYWORD = "in";
                /// ```
                %yul-in-keyword,
                /// This kind represents a `YulIndexedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_INDEXED_KEYWORD = "indexed";
                /// ```
                %yul-indexed-keyword,
                /// This kind represents a `YulInlineKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_INLINE_KEYWORD = "inline";
                /// ```
                %yul-inline-keyword,
                /// This kind represents a `YulIntKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_INT_KEYWORD = "int" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;
                /// ```
                %yul-int-keyword,
                /// This kind represents a `YulInterfaceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_INTERFACE_KEYWORD = "interface";
                /// ```
                %yul-interface-keyword,
                /// This kind represents a `YulInternalKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_INTERNAL_KEYWORD = "internal";
                /// ```
                %yul-internal-keyword,
                /// This kind represents a `YulInvalidKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_INVALID_KEYWORD = "invalid";
                /// ```
                %yul-invalid-keyword,
                /// This kind represents a `YulIsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_IS_KEYWORD = "is";
                /// ```
                %yul-is-keyword,
                /// This kind represents a `YulIsZeroKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_IS_ZERO_KEYWORD = "iszero";
                /// ```
                %yul-is-zero-keyword,
                /// This kind represents a `YulJumpKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YUL_JUMP_KEYWORD = "jump";
                /// ```
                %yul-jump-keyword,
                /// This kind represents a `YulJumpiKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// YUL_JUMPI_KEYWORD = "jumpi";
                /// ```
                %yul-jumpi-keyword,
                /// This kind represents a `YulKeccak256Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.12 *)
                /// (* Reserved in 0.4.12 *)
                /// YUL_KECCAK_256_KEYWORD = "keccak256";
                /// ```
                %yul-keccak256-keyword,
                /// This kind represents a `YulLeaveKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.6.0 *)
                /// (* Reserved in 0.7.1 *)
                /// YUL_LEAVE_KEYWORD = "leave";
                /// ```
                %yul-leave-keyword,
                /// This kind represents a `YulLetKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LET_KEYWORD = "let";
                /// ```
                %yul-let-keyword,
                /// This kind represents a `YulLibraryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_LIBRARY_KEYWORD = "library";
                /// ```
                %yul-library-keyword,
                /// This kind represents a `YulLog0Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LOG_0_KEYWORD = "log0";
                /// ```
                %yul-log0-keyword,
                /// This kind represents a `YulLog1Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LOG_1_KEYWORD = "log1";
                /// ```
                %yul-log1-keyword,
                /// This kind represents a `YulLog2Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LOG_2_KEYWORD = "log2";
                /// ```
                %yul-log2-keyword,
                /// This kind represents a `YulLog3Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LOG_3_KEYWORD = "log3";
                /// ```
                %yul-log3-keyword,
                /// This kind represents a `YulLog4Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LOG_4_KEYWORD = "log4";
                /// ```
                %yul-log4-keyword,
                /// This kind represents a `YulLtKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_LT_KEYWORD = "lt";
                /// ```
                %yul-lt-keyword,
                /// This kind represents a `YulMCopyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.24 *)
                /// (* Reserved in 0.8.25 *)
                /// YUL_M_COPY_KEYWORD = "mcopy";
                /// ```
                %yul-mcopy-keyword,
                /// This kind represents a `YulMLoadKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_M_LOAD_KEYWORD = "mload";
                /// ```
                %yul-mload-keyword,
                /// This kind represents a `YulMSizeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_M_SIZE_KEYWORD = "msize";
                /// ```
                %yul-msize-keyword,
                /// This kind represents a `YulMStore8Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_M_STORE_8_KEYWORD = "mstore8";
                /// ```
                %yul-mstore8-keyword,
                /// This kind represents a `YulMStoreKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_M_STORE_KEYWORD = "mstore";
                /// ```
                %yul-mstore-keyword,
                /// This kind represents a `YulMacroKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_MACRO_KEYWORD = "macro";
                /// ```
                %yul-macro-keyword,
                /// This kind represents a `YulMappingKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_MAPPING_KEYWORD = "mapping";
                /// ```
                %yul-mapping-keyword,
                /// This kind represents a `YulMatchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_MATCH_KEYWORD = "match";
                /// ```
                %yul-match-keyword,
                /// This kind represents a `YulMemoryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_MEMORY_KEYWORD = "memory";
                /// ```
                %yul-memory-keyword,
                /// This kind represents a `YulMinutesKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_MINUTES_KEYWORD = "minutes";
                /// ```
                %yul-minutes-keyword,
                /// This kind represents a `YulModKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_MOD_KEYWORD = "mod";
                /// ```
                %yul-mod-keyword,
                /// This kind represents a `YulModifierKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_MODIFIER_KEYWORD = "modifier";
                /// ```
                %yul-modifier-keyword,
                /// This kind represents a `YulMulKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_MUL_KEYWORD = "mul";
                /// ```
                %yul-mul-keyword,
                /// This kind represents a `YulMulModKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_MUL_MOD_KEYWORD = "mulmod";
                /// ```
                %yul-mul-mod-keyword,
                /// This kind represents a `YulMutableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_MUTABLE_KEYWORD = "mutable";
                /// ```
                %yul-mutable-keyword,
                /// This kind represents a `YulNewKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_NEW_KEYWORD = "new";
                /// ```
                %yul-new-keyword,
                /// This kind represents a `YulNotKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_NOT_KEYWORD = "not";
                /// ```
                %yul-not-keyword,
                /// This kind represents a `YulNullKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_NULL_KEYWORD = "null";
                /// ```
                %yul-null-keyword,
                /// This kind represents a `YulNumberKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_NUMBER_KEYWORD = "number";
                /// ```
                %yul-number-keyword,
                /// This kind represents a `YulOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_OF_KEYWORD = "of";
                /// ```
                %yul-of-keyword,
                /// This kind represents a `YulOrKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_OR_KEYWORD = "or";
                /// ```
                %yul-or-keyword,
                /// This kind represents a `YulOriginKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_ORIGIN_KEYWORD = "origin";
                /// ```
                %yul-origin-keyword,
                /// This kind represents a `YulOverrideKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_OVERRIDE_KEYWORD = "override";
                /// ```
                %yul-override-keyword,
                /// This kind represents a `YulPartialKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_PARTIAL_KEYWORD = "partial";
                /// ```
                %yul-partial-keyword,
                /// This kind represents a `YulPayableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_PAYABLE_KEYWORD = "payable";
                /// ```
                %yul-payable-keyword,
                /// This kind represents a `YulPopKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_POP_KEYWORD = "pop";
                /// ```
                %yul-pop-keyword,
                /// This kind represents a `YulPragmaKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_PRAGMA_KEYWORD = "pragma";
                /// ```
                %yul-pragma-keyword,
                /// This kind represents a `YulPrevRandaoKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.18 *)
                /// (* Reserved in 0.8.18 *)
                /// YUL_PREV_RANDAO_KEYWORD = "prevrandao";
                /// ```
                %yul-prev-randao-keyword,
                /// This kind represents a `YulPrivateKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_PRIVATE_KEYWORD = "private";
                /// ```
                %yul-private-keyword,
                /// This kind represents a `YulPromiseKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_PROMISE_KEYWORD = "promise";
                /// ```
                %yul-promise-keyword,
                /// This kind represents a `YulPublicKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_PUBLIC_KEYWORD = "public";
                /// ```
                %yul-public-keyword,
                /// This kind represents a `YulPureKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_PURE_KEYWORD = "pure";
                /// ```
                %yul-pure-keyword,
                /// This kind represents a `YulReceiveKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.6.0 until 0.7.1 *)
                /// YUL_RECEIVE_KEYWORD = "receive";
                /// ```
                %yul-receive-keyword,
                /// This kind represents a `YulReferenceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_REFERENCE_KEYWORD = "reference";
                /// ```
                %yul-reference-keyword,
                /// This kind represents a `YulRelocatableKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_RELOCATABLE_KEYWORD = "relocatable";
                /// ```
                %yul-relocatable-keyword,
                /// This kind represents a `YulReturnDataCopyKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.12 *)
                /// (* Reserved in 0.4.12 *)
                /// YUL_RETURN_DATA_COPY_KEYWORD = "returndatacopy";
                /// ```
                %yul-return-data-copy-keyword,
                /// This kind represents a `YulReturnDataSizeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.12 *)
                /// (* Reserved in 0.4.12 *)
                /// YUL_RETURN_DATA_SIZE_KEYWORD = "returndatasize";
                /// ```
                %yul-return-data-size-keyword,
                /// This kind represents a `YulReturnKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_RETURN_KEYWORD = "return";
                /// ```
                %yul-return-keyword,
                /// This kind represents a `YulReturnsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_RETURNS_KEYWORD = "returns";
                /// ```
                %yul-returns-keyword,
                /// This kind represents a `YulRevertKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_REVERT_KEYWORD = "revert";
                /// ```
                %yul-revert-keyword,
                /// This kind represents a `YulSDivKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_S_DIV_KEYWORD = "sdiv";
                /// ```
                %yul-sdiv-keyword,
                /// This kind represents a `YulSLoadKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_S_LOAD_KEYWORD = "sload";
                /// ```
                %yul-sload-keyword,
                /// This kind represents a `YulSModKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_S_MOD_KEYWORD = "smod";
                /// ```
                %yul-smod-keyword,
                /// This kind represents a `YulSStoreKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_S_STORE_KEYWORD = "sstore";
                /// ```
                %yul-sstore-keyword,
                /// This kind represents a `YulSarKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.4.21 *)
                /// YUL_SAR_KEYWORD = "sar";
                /// ```
                %yul-sar-keyword,
                /// This kind represents a `YulSealedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_SEALED_KEYWORD = "sealed";
                /// ```
                %yul-sealed-keyword,
                /// This kind represents a `YulSecondsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_SECONDS_KEYWORD = "seconds";
                /// ```
                %yul-seconds-keyword,
                /// This kind represents a `YulSelfBalanceKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.5.12 *)
                /// YUL_SELF_BALANCE_KEYWORD = "selfbalance";
                /// ```
                %yul-self-balance-keyword,
                /// This kind represents a `YulSelfDestructKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SELF_DESTRUCT_KEYWORD = "selfdestruct";
                /// ```
                %yul-self-destruct-keyword,
                /// This kind represents a `YulSgtKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SGT_KEYWORD = "sgt";
                /// ```
                %yul-sgt-keyword,
                /// This kind represents a `YulSha3Keyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// (* Reserved until 0.5.0 *)
                /// YUL_SHA_3_KEYWORD = "sha3";
                /// ```
                %yul-sha3-keyword,
                /// This kind represents a `YulShlKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.4.21 *)
                /// YUL_SHL_KEYWORD = "shl";
                /// ```
                %yul-shl-keyword,
                /// This kind represents a `YulShrKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved in 0.4.21 *)
                /// YUL_SHR_KEYWORD = "shr";
                /// ```
                %yul-shr-keyword,
                /// This kind represents a `YulSignExtendKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SIGN_EXTEND_KEYWORD = "signextend";
                /// ```
                %yul-sign-extend-keyword,
                /// This kind represents a `YulSizeOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_SIZE_OF_KEYWORD = "sizeof";
                /// ```
                %yul-size-of-keyword,
                /// This kind represents a `YulSltKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SLT_KEYWORD = "slt";
                /// ```
                %yul-slt-keyword,
                /// This kind represents a `YulStaticCallKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.4.12 *)
                /// (* Reserved in 0.4.12 *)
                /// YUL_STATIC_CALL_KEYWORD = "staticcall";
                /// ```
                %yul-static-call-keyword,
                /// This kind represents a `YulStaticKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_STATIC_KEYWORD = "static";
                /// ```
                %yul-static-keyword,
                /// This kind represents a `YulStopKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_STOP_KEYWORD = "stop";
                /// ```
                %yul-stop-keyword,
                /// This kind represents a `YulStorageKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_STORAGE_KEYWORD = "storage";
                /// ```
                %yul-storage-keyword,
                /// This kind represents a `YulStringKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_STRING_KEYWORD = "string";
                /// ```
                %yul-string-keyword,
                /// This kind represents a `YulStructKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_STRUCT_KEYWORD = "struct";
                /// ```
                %yul-struct-keyword,
                /// This kind represents a `YulSubKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SUB_KEYWORD = "sub";
                /// ```
                %yul-sub-keyword,
                /// This kind represents a `YulSuicideKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Deprecated in 0.5.0 *)
                /// (* Reserved until 0.5.0 *)
                /// YUL_SUICIDE_KEYWORD = "suicide";
                /// ```
                %yul-suicide-keyword,
                /// This kind represents a `YulSuperKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SUPER_KEYWORD = "super";
                /// ```
                %yul-super-keyword,
                /// This kind represents a `YulSupportsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_SUPPORTS_KEYWORD = "supports";
                /// ```
                %yul-supports-keyword,
                /// This kind represents a `YulSwitchKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_SWITCH_KEYWORD = "switch";
                /// ```
                %yul-switch-keyword,
                /// This kind represents a `YulSzaboKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.0 *)
                /// YUL_SZABO_KEYWORD = "szabo";
                /// ```
                %yul-szabo-keyword,
                /// This kind represents a `YulTLoadKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.24 *)
                /// (* Reserved in 0.8.25 *)
                /// YUL_T_LOAD_KEYWORD = "tload";
                /// ```
                %yul-tload-keyword,
                /// This kind represents a `YulTStoreKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Introduced in 0.8.24 *)
                /// (* Reserved in 0.8.25 *)
                /// YUL_T_STORE_KEYWORD = "tstore";
                /// ```
                %yul-tstore-keyword,
                /// This kind represents a `YulThisKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_THIS_KEYWORD = "this";
                /// ```
                %yul-this-keyword,
                /// This kind represents a `YulThrowKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_THROW_KEYWORD = "throw";
                /// ```
                %yul-throw-keyword,
                /// This kind represents a `YulTimestampKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_TIMESTAMP_KEYWORD = "timestamp";
                /// ```
                %yul-timestamp-keyword,
                /// This kind represents a `YulTrueKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_TRUE_KEYWORD = "true";
                /// ```
                %yul-true-keyword,
                /// This kind represents a `YulTryKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_TRY_KEYWORD = "try";
                /// ```
                %yul-try-keyword,
                /// This kind represents a `YulTypeDefKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_TYPE_DEF_KEYWORD = "typedef";
                /// ```
                %yul-type-def-keyword,
                /// This kind represents a `YulTypeKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_TYPE_KEYWORD = "type";
                /// ```
                %yul-type-keyword,
                /// This kind represents a `YulTypeOfKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_TYPE_OF_KEYWORD = "typeof";
                /// ```
                %yul-type-of-keyword,
                /// This kind represents a `YulUfixedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_UFIXED_KEYWORD = "ufixed";
                /// 
                /// (* Reserved until 0.7.1 *)
                /// YUL_UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176") "x" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80");
                /// 
                /// (* Reserved until 0.7.1 *)
                /// YUL_UFIXED_KEYWORD = "ufixed" ("184x8" | "184x16" | "184x24" | "184x32" | "184x40" | "184x48" | "184x56" | "184x64" | "184x72" | "192x8" | "192x16" | "192x24" | "192x32" | "192x40" | "192x48" | "192x56" | "192x64" | "200x8" | "200x16" | "200x24" | "200x32" | "200x40" | "200x48" | "200x56" | "208x8" | "208x16" | "208x24" | "208x32" | "208x40" | "208x48" | "216x8" | "216x16" | "216x24" | "216x32" | "216x40" | "224x8" | "224x16" | "224x24" | "224x32" | "232x8" | "232x16" | "232x24" | "240x8" | "240x16" | "248x8");
                /// 
                /// (* Reserved from 0.4.14 until 0.7.1 *)
                /// YUL_UFIXED_KEYWORD = "ufixed" ("184x80" | "192x72" | "192x80" | "200x64" | "200x72" | "200x80" | "208x56" | "208x64" | "208x72" | "208x80" | "216x48" | "216x56" | "216x64" | "216x72" | "216x80" | "224x40" | "224x48" | "224x56" | "224x64" | "224x72" | "224x80" | "232x32" | "232x40" | "232x48" | "232x56" | "232x64" | "232x72" | "232x80" | "240x24" | "240x32" | "240x40" | "240x48" | "240x56" | "240x64" | "240x72" | "240x80" | "248x16" | "248x24" | "248x32" | "248x40" | "248x48" | "248x56" | "248x64" | "248x72" | "248x80" | "256x8" | "256x16" | "256x24" | "256x32" | "256x40" | "256x48" | "256x56" | "256x64" | "256x72" | "256x80");
                /// 
                /// (* Reserved from 0.4.14 until 0.7.1 *)
                /// YUL_UFIXED_KEYWORD = "ufixed" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256") "x" ("0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "41" | "42" | "43" | "44" | "45" | "46" | "47" | "49" | "50" | "51" | "52" | "53" | "54" | "55" | "57" | "58" | "59" | "60" | "61" | "62" | "63" | "65" | "66" | "67" | "68" | "69" | "70" | "71" | "73" | "74" | "75" | "76" | "77" | "78" | "79");
                /// ```
                %yul-ufixed-keyword,
                /// This kind represents a `YulUintKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_UINT_KEYWORD = "uint" ("8" | "16" | "24" | "32" | "40" | "48" | "56" | "64" | "72" | "80" | "88" | "96" | "104" | "112" | "120" | "128" | "136" | "144" | "152" | "160" | "168" | "176" | "184" | "192" | "200" | "208" | "216" | "224" | "232" | "240" | "248" | "256")?;
                /// ```
                %yul-uint-keyword,
                /// This kind represents a `YulUncheckedKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.5.0 until 0.7.1 *)
                /// YUL_UNCHECKED_KEYWORD = "unchecked";
                /// ```
                %yul-unchecked-keyword,
                /// This kind represents a `YulUsingKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_USING_KEYWORD = "using";
                /// ```
                %yul-using-keyword,
                /// This kind represents a `YulVarKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.6.5 *)
                /// YUL_VAR_KEYWORD = "var";
                /// ```
                %yul-var-keyword,
                /// This kind represents a `YulViewKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_VIEW_KEYWORD = "view";
                /// ```
                %yul-view-keyword,
                /// This kind represents a `YulVirtualKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved from 0.6.0 until 0.7.1 *)
                /// YUL_VIRTUAL_KEYWORD = "virtual";
                /// ```
                %yul-virtual-keyword,
                /// This kind represents a `YulWeeksKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_WEEKS_KEYWORD = "weeks";
                /// ```
                %yul-weeks-keyword,
                /// This kind represents a `YulWeiKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_WEI_KEYWORD = "wei";
                /// ```
                %yul-wei-keyword,
                /// This kind represents a `YulWhileKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_WHILE_KEYWORD = "while";
                /// ```
                %yul-while-keyword,
                /// This kind represents a `YulXorKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// YUL_XOR_KEYWORD = "xor";
                /// ```
                %yul-xor-keyword,
                /// This kind represents a `YulYearsKeyword` node, with the following structure: 
                ///
                /// ```ebnf
                /// (* Reserved until 0.7.1 *)
                /// YUL_YEARS_KEYWORD = "years";
                /// ```
                %yul-years-keyword,
    }

    //// Useful extension methods for working with terminals and terminal kinds.
    resource terminal-kind-extensions {
        /// Returns true if the terminal is a trivia token. i.e. whitespace, comments, etc... 
        is-trivia: static func(kind: terminal-kind) -> bool;
        /// Returns true if the terminal is a valid token in the language grammar.
        is-valid: static func(kind: terminal-kind) -> bool;
    }

    /// Represents the different types of relationships between nodes in the syntax tree.
    enum edge-label {
            %item,
            %variant,
            %separator,
            %operand,
            %left-operand,
            %right-operand,
            %leading-trivia,
            %trailing-trivia,
                %abicoder-keyword,
                %abstract-keyword,
                %address-keyword,
                %alias,
                %anonymous-keyword,
                %arguments,
                %as-keyword,
                %assembly-keyword,
                %assignment,
                %asterisk,
                %attributes,
                %block,
                %body,
                %break-keyword,
                %case-keyword,
                %cases,
                %catch-clauses,
                %catch-keyword,
                %clause,
                %close-brace,
                %close-bracket,
                %close-paren,
                %colon,
                %condition,
                %constant-keyword,
                %constructor-keyword,
                %continue-keyword,
                %contract-keyword,
                %default-keyword,
                %do-keyword,
                %elements,
                %else-branch,
                %else-keyword,
                %emit-keyword,
                %end,
                %enum-keyword,
                %equal,
                %equal-greater-than,
                %error,
                %error-keyword,
                %event,
                %event-keyword,
                %experimental-keyword,
                %expression,
                %fallback-keyword,
                %false-expression,
                %feature,
                %flags,
                %for-keyword,
                %from-keyword,
                %function-keyword,
                %global-keyword,
                %identifier,
                %if-keyword,
                %import-keyword,
                %index,
                %indexed-keyword,
                %inheritance,
                %initialization,
                %interface-keyword,
                %is-keyword,
                %items,
                %iterator,
                %key-type,
                %label,
                %leave-keyword,
                %let-keyword,
                %library-keyword,
                %literal,
                %mapping-keyword,
                %member,
                %members,
                %minus,
                %minus-greater-than,
                %modifier-keyword,
                %name,
                %new-keyword,
                %open-brace,
                %open-bracket,
                %open-paren,
                %operator,
                %options,
                %overridden,
                %override-keyword,
                %parameters,
                %path,
                %paths,
                %payable-keyword,
                %period,
                %pragma,
                %pragma-keyword,
                %question-mark,
                %receive-keyword,
                %return-keyword,
                %returns,
                %returns-keyword,
                %revert-keyword,
                %semicolon,
                %sets,
                %solidity-keyword,
                %start,
                %statements,
                %storage-location,
                %struct-keyword,
                %switch-keyword,
                %symbols,
                %target,
                %throw-keyword,
                %true-expression,
                %try-keyword,
                %type-keyword,
                %type-name,
                %types,
                %unchecked-keyword,
                %unit,
                %using-keyword,
                %value,
                %value-type,
                %var-keyword,
                %variable,
                %variable-type,
                %variables,
                %version,
                %while-keyword,
    }

    /// The super type of all nodes in a tree.
    variant node {
        /// A nonterminal node that may contain other children nodes.
        nonterminal(nonterminal-node),
        /// A terminal node that represents a recognized part of the source string.
        terminal(terminal-node)
    }

    /// Represents a non-terminal node in the syntax tree.
    /// These nodes can have child nodes and represent language constructs.
    resource nonterminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this nonterminal node.
        kind: func() -> nonterminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of the current node in pre-order traversal.
        descendants: func() -> cursor-iterator;

        /// Converts the node and its children back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;

        /// Creates a cursor positioned at the given text offset within this node.
        create-cursor: func(text-offset: text-index) -> cursor;
    }

    /// Represents a terminal node in the syntax tree.
    /// These are leaf nodes that represent actual tokens from the source code.
    resource terminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this terminal node.
        kind: func() -> terminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of this node in pre-order traversal.
        descendants: func() -> cursor-iterator;

        /// Converts the node back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;
    }

    /// Represents a connection between nodes in the syntax tree.
    record edge {
        /// Optional label describing the relationship between nodes.
        label: option<edge-label>,
        /// The target node of this edge.
        node: node,
    }

    /// Provides navigation and traversal capabilities over the syntax tree.
    resource cursor {
        /// Resets the cursor to its initial position.
        reset: func();
        /// Marks the cursor as completed.
        complete: func();
        /// Returns whether the cursor has completed its traversal.
        is-completed: func() -> bool;

        /// Creates a copy of this cursor at its current position with the same ancestors.
        /// The new cursor can be moved independently without affecting the original cursor.
        clone: func() -> cursor;
        /// Creates a copy of this cursor at its current position, but without any ancestors.
        /// This is useful for limiting the scope of a search or query to the sub-tree only, without backtracking to parent nodes.
        /// The new cursor can be moved independently without affecting the original cursor.
        spawn: func() -> cursor;

        /// Returns the current node under the cursor.
        node: func() -> node;
        /// Returns the label of the edge from the parent to the current node, if any.
        label: func() -> option<edge-label>;

        /// Returns the current text offset of the cursor.
        text-offset: func() -> text-index;
        /// Returns the text range covered by the current node.
        text-range: func() -> text-range;

        /// Returns the current depth in the tree (i.e. number of ancestors).
        depth: func() -> u32;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of the current node in pre-order traversal.
        descendants: func() -> cursor-iterator;
        /// Returns an iterator over all the remaining nodes in the current tree, moving in pre-order traversal, until the tree is completed.
        remaining-nodes: func() -> cursor-iterator;
        /// Returns an iterator over all ancestors of the current node, starting with the immediate parent, and moving upwards, ending with the root node.
        ancestors: func() -> ancestors-iterator;

        /// Moves to the next node in pre-order traversal.
        go-to-next: func() -> bool;
        /// Moves to the next node that isn't a descendant of the current node.
        go-to-next-non-descendant: func() -> bool;
        /// Moves to the previous node in pre-order traversal.
        go-to-previous: func() -> bool;

        /// Moves up to the parent node.
        go-to-parent: func() -> bool;

        /// Moves to the first child of the current node.
        go-to-first-child: func() -> bool;
        /// Moves to the last child of the current node.
        go-to-last-child: func() -> bool;
        /// Moves to the nth child of the current node.
        go-to-nth-child: func(child-number: u32) -> bool;

        /// Moves to the next sibling node.
        go-to-next-sibling: func() -> bool;
        /// Moves to the previous sibling node.
        go-to-previous-sibling: func() -> bool;

        /// Moves to the next terminal node.
        go-to-next-terminal: func() -> bool;
        /// Moves to the next terminal node of a specific kind.
        go-to-next-terminal-with-kind: func(kind: terminal-kind) -> bool;
        /// Moves to the next terminal node matching any of the given kinds.
        go-to-next-terminal-with-kinds: func(kinds: list<terminal-kind>) -> bool;

        /// Nonterminal navigation methods
        /// Moves to the next nonterminal node.
        go-to-next-nonterminal: func() -> bool;
        /// Moves to the next nonterminal node of a specific kind.
        go-to-next-nonterminal-with-kind: func(kind: nonterminal-kind) -> bool;
        /// Moves to the next nonterminal node matching any of the given kinds.
        go-to-next-nonterminal-with-kinds: func(kinds: list<nonterminal-kind>) -> bool;

        /// Executes the given queries and returns an iterator over the matches.
        query: func(queries: list<borrow<query>>) -> query-match-iterator;
    }

    /// Iterator over all the remaining nodes in the current tree, moving in pre-order traversal, until the tree is completed.
    resource cursor-iterator {
        /// Returns the next edge in the iteration, or `undefined` if there are no more edges.
        next: func() -> option<edge>;
    }

    /// Iterator over all ancestors of the current node, starting with the immediate parent, and moving upwards, ending with the root node.
    resource ancestors-iterator {
        /// Returns the next nonterminal node in the iteration, or `undefined` if there are no more nodes.
        next: func() -> option<nonterminal-node>;
    }

    /// Represents a tree query for pattern matching in the syntax tree.
    resource query {
        /// Parses a query string into a query object.
        /// Throws an error if the query syntax is invalid.
        parse: static func(text: string) -> result<query, query-error>;
    }

    /// Represents an error that occurred while parsing a query.
    record query-error {
        /// The error message describing what went wrong.
        message: string,
        /// The line number where the error occurred.
        line: u32,
        /// The column number where the error occurred.
        column: u32,
    }

    /// Represents a match found by executing a query.
    record query-match {
        /// The index of the query that produced this match.
        query-number: u32,
        /// List of captured nodes and their names from the query.
        captures: list<tuple<string, list<cursor>>>,
    }

    /// Iterator over query matches in the syntax tree.
    resource query-match-iterator {
        /// Returns the next match or `undefined` if there are no more matches.
        next: func() -> option<query-match>;
    }

    /// Represents a position in the source text, with indices for different unicode encodings of the source.
    record text-index {
        /// Byte offset in UTF-8 encoding.
        /// This is useful when working with languages like Rust that use UTF-8.
        utf8: u32,
        /// Byte offset in UTF-8 encoding.
        /// This is useful when working with languages like JavaScript that use UTF-16.
        utf16: u32,
        /// Line number (0-based).
        /// Lines are separated by:
        ///
        /// - carriage return `\r`.
        /// - newline `\n`.
        /// - line separator `\u2028`.
        /// - paragraph separator `\u2029`.
        line: u32,
        /// Column number (0-based).
        /// Columns are counted in [unicode scalar values](https://www.unicode.org/glossary/#unicode_scalar_value).
        column: u32,
    }

    /// Represents a range in the source text.
    record text-range {
        /// Starting (inclusive) position of the range.
        start: text-index,
        /// Ending (exclusive) position of the range.
        end: text-index,
    }
}
