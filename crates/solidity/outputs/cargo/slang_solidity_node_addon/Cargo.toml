[package]
name = "slang_solidity_node_addon"
version.workspace = true
rust-version.workspace = true
edition.workspace = true
publish = false

description = "slang_solidity compiled as a cdylib crate, to be used as Node.js addon."

# At the time of writing, building cdylib/plugins with Cargo has limited support
# (see <https://github.com/rust-lang/cargo/issues/8628> for the general tracking issue).
# To workaround some of the issues, we create a synthetic crate that shares the same code as the original Rust crate
# but only exposes a `cdylib` library.
# There are a couple of things at play here:
# - To build a Node addon, we need to build a standalone cdylib, that's set up to expect host `napi_*` functions at runtime
# - `napi build` does that for us but only supports `cdylib` for the `lib` targets (e.g. not bin/examples)
# - expansion of #[napi] macros is enabled behind a feature flag; it expands the code that expects the host functions
# - while `napi/noop` feature exists that disables that, we test in workspace with `--all-features` and Cargo features are additive
# - thus, they get conflated and so the regular `rlib` library target gets built with the host functions expectation
# - ...which reasonably fails to link when `rlib` library is used as a regular Rust library (i.e. not in Node environment).
# Another workaround is to use an example with `cdylib` crate-type (wouldn't conflate the features in a downstream usable
# library), but napi doesn't support that yet.
# Also see <https://github.com/PyO3/pyo3/issues/771> for a similar issue with PyO3.
[lib]
path = "../slang_solidity/src/lib.rs"
crate-type = ["cdylib"]

[features]
default = ["slang_napi_interfaces"]
slang_napi_interfaces = [
  # This enables '#[napi]' attributes on the Rust types imported via [lib.path] above.
]

[build-dependencies]
napi-build = { workspace = true }
# Make sure to always rebuild the cdylib crate when the Rust code changes.
slang_solidity = { workspace = true }

[dependencies]
ariadne = { workspace = true }
napi = { workspace = true }
napi-derive = { workspace = true }
nom = { workspace = true }
semver = { workspace = true }
serde = { workspace = true }
strum = { workspace = true }
strum_macros = { workspace = true }
thiserror = { workspace = true }

[lints]
workspace = true

