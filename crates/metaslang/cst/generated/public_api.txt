# This file is generated automatically by infrastructure scripts. Please don't edit by hand.

pub mod metaslang_cst
pub mod metaslang_cst::cursor
pub struct metaslang_cst::cursor::AncestorsIterator<T: metaslang_cst::kinds::KindTypes>
impl<T: metaslang_cst::kinds::KindTypes> core::iter::traits::iterator::Iterator for metaslang_cst::cursor::AncestorsIterator<T>
pub type metaslang_cst::cursor::AncestorsIterator<T>::Item = alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>
pub fn metaslang_cst::cursor::AncestorsIterator<T>::next(&mut self) -> core::option::Option<Self::Item>
pub struct metaslang_cst::cursor::Cursor<T: metaslang_cst::kinds::KindTypes>
impl<T: metaslang_cst::kinds::KindTypes + 'static> metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::cursor::Cursor<T>::query(self, queries: alloc::vec::Vec<metaslang_cst::query::Query<T>>) -> metaslang_cst::query::QueryMatchIterator<T>
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::cursor::Cursor<T>::ancestors(&self) -> metaslang_cst::cursor::AncestorsIterator<T>
pub fn metaslang_cst::cursor::Cursor<T>::children(&self) -> &[metaslang_cst::nodes::Edge<T>]
pub fn metaslang_cst::cursor::Cursor<T>::complete(&mut self)
pub fn metaslang_cst::cursor::Cursor<T>::depth(&self) -> usize
pub fn metaslang_cst::cursor::Cursor<T>::descendants(&self) -> metaslang_cst::cursor::CursorIterator<T>
pub fn metaslang_cst::cursor::Cursor<T>::go_to_first_child(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_last_child(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_non_descendant(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_nonterminal(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_nonterminal_with_kind(&mut self, kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_nonterminal_with_kinds(&mut self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::NonterminalKind]) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_sibling(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_terminal(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_terminal_with_kind(&mut self, kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_next_terminal_with_kinds(&mut self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::TerminalKind]) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_nth_child(&mut self, child_index: usize) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_parent(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_previous(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::go_to_previous_sibling(&mut self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::has_default_label(&self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::is_completed(&self) -> bool
pub fn metaslang_cst::cursor::Cursor<T>::label(&self) -> <T as metaslang_cst::kinds::KindTypes>::EdgeLabel
pub fn metaslang_cst::cursor::Cursor<T>::node(&self) -> metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::cursor::Cursor<T>::remaining_nodes(&self) -> metaslang_cst::cursor::CursorIterator<T>
pub fn metaslang_cst::cursor::Cursor<T>::reset(&mut self)
pub fn metaslang_cst::cursor::Cursor<T>::spawn(&self) -> Self
pub fn metaslang_cst::cursor::Cursor<T>::text_offset(&self) -> metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::cursor::Cursor<T>::text_range(&self) -> metaslang_cst::text_index::TextRange
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::cursor::Cursor<T>::clone(&self) -> metaslang_cst::cursor::Cursor<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::cursor::Cursor<T>
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::cursor::Cursor<T>::eq(&self, other: &metaslang_cst::cursor::Cursor<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::cursor::Cursor<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::cursor::Cursor<T>
pub struct metaslang_cst::cursor::CursorIterator<T: metaslang_cst::kinds::KindTypes>
impl<T: metaslang_cst::kinds::KindTypes> core::iter::traits::iterator::Iterator for metaslang_cst::cursor::CursorIterator<T>
pub type metaslang_cst::cursor::CursorIterator<T>::Item = metaslang_cst::nodes::Edge<T>
pub fn metaslang_cst::cursor::CursorIterator<T>::next(&mut self) -> core::option::Option<Self::Item>
pub mod metaslang_cst::kinds
pub enum metaslang_cst::kinds::NodeKind<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::kinds::NodeKind::Nonterminal(<T as metaslang_cst::kinds::KindTypes>::NonterminalKind)
pub metaslang_cst::kinds::NodeKind::Terminal(<T as metaslang_cst::kinds::KindTypes>::TerminalKind)
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::kinds::NodeKind<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::clone::Clone, <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::clone::Clone
pub fn metaslang_cst::kinds::NodeKind<T>::clone(&self) -> metaslang_cst::kinds::NodeKind<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::kinds::NodeKind<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::cmp::Eq, <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::cmp::Eq
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::kinds::NodeKind<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::cmp::PartialEq, <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::cmp::PartialEq
pub fn metaslang_cst::kinds::NodeKind<T>::eq(&self, other: &metaslang_cst::kinds::NodeKind<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::kinds::NodeKind<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::fmt::Debug, <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::fmt::Debug
pub fn metaslang_cst::kinds::NodeKind<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: core::marker::Copy + metaslang_cst::kinds::KindTypes> core::marker::Copy for metaslang_cst::kinds::NodeKind<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::marker::Copy, <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::marker::Copy
impl<T: metaslang_cst::kinds::KindTypes> core::convert::From<metaslang_cst::kinds::NodeKind<T>> for &'static str
pub fn &'static str::from(val: metaslang_cst::kinds::NodeKind<T>) -> Self
impl<T: metaslang_cst::kinds::KindTypes> core::fmt::Display for metaslang_cst::kinds::NodeKind<T>
pub fn metaslang_cst::kinds::NodeKind<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::kinds::NodeKind<T>
pub trait metaslang_cst::kinds::BaseKind: core::marker::Sized + core::fmt::Debug + core::marker::Copy + core::cmp::PartialEq + core::cmp::Eq + serde::ser::Serialize
pub fn metaslang_cst::kinds::BaseKind::as_static_str(&self) -> &'static str
pub fn metaslang_cst::kinds::BaseKind::try_from_str(str: &str) -> core::result::Result<Self, alloc::string::String>
impl<T> metaslang_cst::kinds::BaseKind for T where T: core::marker::Sized + core::fmt::Debug + core::marker::Copy + core::cmp::Eq + serde::ser::Serialize + for<'a> core::convert::TryFrom<&'a str> + core::convert::Into<&'static str>
pub fn T::as_static_str(&self) -> &'static str
pub fn T::try_from_str(str: &str) -> core::result::Result<Self, alloc::string::String>
pub trait metaslang_cst::kinds::EdgeLabelExtensions: metaslang_cst::kinds::BaseKind + core::default::Default
pub trait metaslang_cst::kinds::KindTypes: core::fmt::Debug + core::clone::Clone + core::cmp::PartialEq
pub type metaslang_cst::kinds::KindTypes::EdgeLabel: metaslang_cst::kinds::EdgeLabelExtensions
pub type metaslang_cst::kinds::KindTypes::NonterminalKind: metaslang_cst::kinds::NonterminalKindExtensions
pub type metaslang_cst::kinds::KindTypes::TerminalKind: metaslang_cst::kinds::TerminalKindExtensions
pub trait metaslang_cst::kinds::NonterminalKindExtensions: metaslang_cst::kinds::BaseKind
pub trait metaslang_cst::kinds::TerminalKindExtensions: metaslang_cst::kinds::BaseKind
pub fn metaslang_cst::kinds::TerminalKindExtensions::is_identifier(self) -> bool
pub fn metaslang_cst::kinds::TerminalKindExtensions::is_trivia(self) -> bool
pub fn metaslang_cst::kinds::TerminalKindExtensions::is_valid(self) -> bool
pub mod metaslang_cst::nodes
pub enum metaslang_cst::nodes::Node<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::nodes::Node::Nonterminal(alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>)
pub metaslang_cst::nodes::Node::Terminal(alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>)
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::as_nonterminal(&self) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::as_nonterminal_with_kind(&self, kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::as_nonterminal_with_kinds(&self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::NonterminalKind]) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::as_terminal(&self) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::as_terminal_with_kind(&self, kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::as_terminal_with_kinds(&self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::TerminalKind]) -> core::option::Option<&alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::children(&self) -> &[metaslang_cst::nodes::Edge<T>]
pub fn metaslang_cst::nodes::Node<T>::create_cursor(self, text_offset: metaslang_cst::text_index::TextIndex) -> metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::nodes::Node<T>::descendants(self) -> metaslang_cst::cursor::CursorIterator<T>
pub fn metaslang_cst::nodes::Node<T>::id(&self) -> usize
pub fn metaslang_cst::nodes::Node<T>::into_nonterminal(self) -> core::option::Option<alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::into_terminal(self) -> core::option::Option<alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>>
pub fn metaslang_cst::nodes::Node<T>::is_nonterminal(&self) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_nonterminal_with_kind(&self, kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_nonterminal_with_kinds(&self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::NonterminalKind]) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_terminal(&self) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_terminal_with_kind(&self, kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_terminal_with_kinds(&self, kinds: &[<T as metaslang_cst::kinds::KindTypes>::TerminalKind]) -> bool
pub fn metaslang_cst::nodes::Node<T>::is_trivia(&self) -> bool
pub fn metaslang_cst::nodes::Node<T>::kind(&self) -> metaslang_cst::kinds::NodeKind<T>
pub fn metaslang_cst::nodes::Node<T>::nonterminal(kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind, children: alloc::vec::Vec<metaslang_cst::nodes::Edge<T>>) -> Self
pub fn metaslang_cst::nodes::Node<T>::terminal(kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind, text: alloc::string::String) -> Self
pub fn metaslang_cst::nodes::Node<T>::text_len(&self) -> metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::nodes::Node<T>::unparse(&self) -> alloc::string::String
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::clone(&self) -> metaslang_cst::nodes::Node<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::nodes::Node<T>
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::eq(&self, other: &metaslang_cst::nodes::Node<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::convert::From<alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>> for metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::from(nonterminal: alloc::rc::Rc<metaslang_cst::nodes::NonterminalNode<T>>) -> Self
impl<T: metaslang_cst::kinds::KindTypes> core::convert::From<alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>> for metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Node<T>::from(terminal: alloc::rc::Rc<metaslang_cst::nodes::TerminalNode<T>>) -> Self
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::nodes::Node<T>
impl<T> serde::ser::Serialize for metaslang_cst::nodes::Node<T> where T: serde::ser::Serialize + metaslang_cst::kinds::KindTypes
pub fn metaslang_cst::nodes::Node<T>::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
pub struct metaslang_cst::nodes::Edge<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::nodes::Edge::label: <T as metaslang_cst::kinds::KindTypes>::EdgeLabel
pub metaslang_cst::nodes::Edge::node: metaslang_cst::nodes::Node<T>
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::nodes::Edge<T>
pub fn metaslang_cst::nodes::Edge<T>::has_default_label(&self) -> bool
pub fn metaslang_cst::nodes::Edge<T>::root(node: metaslang_cst::nodes::Node<T>) -> Self
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::nodes::Edge<T> where <T as metaslang_cst::kinds::KindTypes>::EdgeLabel: core::clone::Clone
pub fn metaslang_cst::nodes::Edge<T>::clone(&self) -> metaslang_cst::nodes::Edge<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::nodes::Edge<T> where <T as metaslang_cst::kinds::KindTypes>::EdgeLabel: core::cmp::Eq
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::nodes::Edge<T> where <T as metaslang_cst::kinds::KindTypes>::EdgeLabel: core::cmp::PartialEq
pub fn metaslang_cst::nodes::Edge<T>::eq(&self, other: &metaslang_cst::nodes::Edge<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::nodes::Edge<T> where <T as metaslang_cst::kinds::KindTypes>::EdgeLabel: core::fmt::Debug
pub fn metaslang_cst::nodes::Edge<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::nodes::Edge<T>
impl<T: metaslang_cst::kinds::KindTypes> core::ops::deref::Deref for metaslang_cst::nodes::Edge<T>
pub type metaslang_cst::nodes::Edge<T>::Target = metaslang_cst::nodes::Node<T>
pub fn metaslang_cst::nodes::Edge<T>::deref(&self) -> &Self::Target
impl<T> serde::ser::Serialize for metaslang_cst::nodes::Edge<T> where T: serde::ser::Serialize + metaslang_cst::kinds::KindTypes, <T as metaslang_cst::kinds::KindTypes>::EdgeLabel: serde::ser::Serialize
pub fn metaslang_cst::nodes::Edge<T>::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
pub struct metaslang_cst::nodes::NonterminalNode<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::nodes::NonterminalNode::children: alloc::vec::Vec<metaslang_cst::nodes::Edge<T>>
pub metaslang_cst::nodes::NonterminalNode::kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind
pub metaslang_cst::nodes::NonterminalNode::text_len: metaslang_cst::text_index::TextIndex
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::nodes::NonterminalNode<T>
pub fn metaslang_cst::nodes::NonterminalNode<T>::children(self: &alloc::rc::Rc<Self>) -> &[metaslang_cst::nodes::Edge<T>]
pub fn metaslang_cst::nodes::NonterminalNode<T>::create(kind: <T as metaslang_cst::kinds::KindTypes>::NonterminalKind, children: alloc::vec::Vec<metaslang_cst::nodes::Edge<T>>) -> alloc::rc::Rc<Self>
pub fn metaslang_cst::nodes::NonterminalNode<T>::create_cursor(self: alloc::rc::Rc<Self>, text_offset: metaslang_cst::text_index::TextIndex) -> metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::nodes::NonterminalNode<T>::descendants(self: alloc::rc::Rc<Self>) -> metaslang_cst::cursor::CursorIterator<T>
pub fn metaslang_cst::nodes::NonterminalNode<T>::id(self: &alloc::rc::Rc<Self>) -> usize
pub fn metaslang_cst::nodes::NonterminalNode<T>::unparse(&self) -> alloc::string::String
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::nodes::NonterminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::clone::Clone
pub fn metaslang_cst::nodes::NonterminalNode<T>::clone(&self) -> metaslang_cst::nodes::NonterminalNode<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::nodes::NonterminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::cmp::Eq
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::nodes::NonterminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::cmp::PartialEq
pub fn metaslang_cst::nodes::NonterminalNode<T>::eq(&self, other: &metaslang_cst::nodes::NonterminalNode<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::nodes::NonterminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: core::fmt::Debug
pub fn metaslang_cst::nodes::NonterminalNode<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::nodes::NonterminalNode<T>
impl<T> serde::ser::Serialize for metaslang_cst::nodes::NonterminalNode<T> where T: serde::ser::Serialize + metaslang_cst::kinds::KindTypes, <T as metaslang_cst::kinds::KindTypes>::NonterminalKind: serde::ser::Serialize
pub fn metaslang_cst::nodes::NonterminalNode<T>::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
pub struct metaslang_cst::nodes::TerminalNode<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::nodes::TerminalNode::kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind
pub metaslang_cst::nodes::TerminalNode::text: alloc::string::String
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::nodes::TerminalNode<T>
pub fn metaslang_cst::nodes::TerminalNode<T>::children(self: &alloc::rc::Rc<Self>) -> &[metaslang_cst::nodes::Edge<T>]
pub fn metaslang_cst::nodes::TerminalNode<T>::create(kind: <T as metaslang_cst::kinds::KindTypes>::TerminalKind, text: alloc::string::String) -> alloc::rc::Rc<Self>
pub fn metaslang_cst::nodes::TerminalNode<T>::create_cursor(self: alloc::rc::Rc<Self>, text_offset: metaslang_cst::text_index::TextIndex) -> metaslang_cst::cursor::Cursor<T>
pub fn metaslang_cst::nodes::TerminalNode<T>::descendants(self: alloc::rc::Rc<Self>) -> metaslang_cst::cursor::CursorIterator<T>
pub fn metaslang_cst::nodes::TerminalNode<T>::id(self: &alloc::rc::Rc<Self>) -> usize
pub fn metaslang_cst::nodes::TerminalNode<T>::unparse(&self) -> alloc::string::String
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::nodes::TerminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::clone::Clone
pub fn metaslang_cst::nodes::TerminalNode<T>::clone(&self) -> metaslang_cst::nodes::TerminalNode<T>
impl<T: core::cmp::Eq + metaslang_cst::kinds::KindTypes> core::cmp::Eq for metaslang_cst::nodes::TerminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::cmp::Eq
impl<T: core::cmp::PartialEq + metaslang_cst::kinds::KindTypes> core::cmp::PartialEq for metaslang_cst::nodes::TerminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::cmp::PartialEq
pub fn metaslang_cst::nodes::TerminalNode<T>::eq(&self, other: &metaslang_cst::nodes::TerminalNode<T>) -> bool
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::nodes::TerminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::TerminalKind: core::fmt::Debug
pub fn metaslang_cst::nodes::TerminalNode<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::marker::StructuralPartialEq for metaslang_cst::nodes::TerminalNode<T>
impl<T: metaslang_cst::kinds::KindTypes> serde::ser::Serialize for metaslang_cst::nodes::TerminalNode<T> where <T as metaslang_cst::kinds::KindTypes>::TerminalKind: serde::ser::Serialize
pub fn metaslang_cst::nodes::TerminalNode<T>::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
pub mod metaslang_cst::query
pub enum metaslang_cst::query::CaptureQuantifier
pub metaslang_cst::query::CaptureQuantifier::One
pub metaslang_cst::query::CaptureQuantifier::OneOrMore
pub metaslang_cst::query::CaptureQuantifier::ZeroOrMore
pub metaslang_cst::query::CaptureQuantifier::ZeroOrOne
impl core::clone::Clone for metaslang_cst::query::CaptureQuantifier
pub fn metaslang_cst::query::CaptureQuantifier::clone(&self) -> metaslang_cst::query::CaptureQuantifier
impl core::cmp::Eq for metaslang_cst::query::CaptureQuantifier
impl core::cmp::PartialEq for metaslang_cst::query::CaptureQuantifier
pub fn metaslang_cst::query::CaptureQuantifier::eq(&self, other: &metaslang_cst::query::CaptureQuantifier) -> bool
impl core::fmt::Debug for metaslang_cst::query::CaptureQuantifier
pub fn metaslang_cst::query::CaptureQuantifier::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for metaslang_cst::query::CaptureQuantifier
impl core::marker::StructuralPartialEq for metaslang_cst::query::CaptureQuantifier
pub struct metaslang_cst::query::Query<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::query::Query::ast_node: ASTNode<T>
pub metaslang_cst::query::Query::capture_quantifiers: alloc::collections::btree::map::BTreeMap<alloc::string::String, metaslang_cst::query::CaptureQuantifier>
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::query::Query<T>
pub fn metaslang_cst::query::Query<T>::create(text: &str) -> core::result::Result<Self, metaslang_cst::query::QueryError>
impl<T: core::clone::Clone + metaslang_cst::kinds::KindTypes> core::clone::Clone for metaslang_cst::query::Query<T>
pub fn metaslang_cst::query::Query<T>::clone(&self) -> metaslang_cst::query::Query<T>
impl<T: core::fmt::Debug + metaslang_cst::kinds::KindTypes> core::fmt::Debug for metaslang_cst::query::Query<T>
pub fn metaslang_cst::query::Query<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<T: metaslang_cst::kinds::KindTypes> core::fmt::Display for metaslang_cst::query::Query<T>
pub fn metaslang_cst::query::Query<T>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub struct metaslang_cst::query::QueryError
pub metaslang_cst::query::QueryError::message: alloc::string::String
pub metaslang_cst::query::QueryError::text_range: metaslang_cst::text_index::TextRange
impl core::clone::Clone for metaslang_cst::query::QueryError
pub fn metaslang_cst::query::QueryError::clone(&self) -> metaslang_cst::query::QueryError
impl core::error::Error for metaslang_cst::query::QueryError
impl core::fmt::Debug for metaslang_cst::query::QueryError
pub fn metaslang_cst::query::QueryError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for metaslang_cst::query::QueryError
pub fn metaslang_cst::query::QueryError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub struct metaslang_cst::query::QueryMatch<T: metaslang_cst::kinds::KindTypes>
pub metaslang_cst::query::QueryMatch::captures: alloc::collections::btree::map::BTreeMap<alloc::string::String, alloc::vec::Vec<metaslang_cst::cursor::Cursor<T>>>
pub metaslang_cst::query::QueryMatch::queries: alloc::rc::Rc<alloc::vec::Vec<metaslang_cst::query::Query<T>>>
pub metaslang_cst::query::QueryMatch::query_index: usize
pub metaslang_cst::query::QueryMatch::root_cursor: metaslang_cst::cursor::Cursor<T>
impl<T: metaslang_cst::kinds::KindTypes> metaslang_cst::query::QueryMatch<T>
pub fn metaslang_cst::query::QueryMatch<T>::capture(&self, name: &str) -> core::option::Option<(metaslang_cst::query::CaptureQuantifier, impl core::iter::traits::iterator::Iterator<Item = metaslang_cst::cursor::Cursor<T>>)>
pub fn metaslang_cst::query::QueryMatch<T>::capture_names(&self) -> impl core::iter::traits::iterator::Iterator<Item = &alloc::string::String>
pub fn metaslang_cst::query::QueryMatch<T>::captures(&self) -> impl core::iter::traits::iterator::Iterator<Item = (&alloc::string::String, metaslang_cst::query::CaptureQuantifier, impl core::iter::traits::iterator::Iterator<Item = metaslang_cst::cursor::Cursor<T>>)>
pub fn metaslang_cst::query::QueryMatch<T>::query(&self) -> &metaslang_cst::query::Query<T>
pub struct metaslang_cst::query::QueryMatchIterator<T: metaslang_cst::kinds::KindTypes>
impl<T: metaslang_cst::kinds::KindTypes + 'static> core::iter::traits::iterator::Iterator for metaslang_cst::query::QueryMatchIterator<T>
pub type metaslang_cst::query::QueryMatchIterator<T>::Item = metaslang_cst::query::QueryMatch<T>
pub fn metaslang_cst::query::QueryMatchIterator<T>::next(&mut self) -> core::option::Option<Self::Item>
pub mod metaslang_cst::text_index
pub struct metaslang_cst::text_index::TextIndex
pub metaslang_cst::text_index::TextIndex::column: usize
pub metaslang_cst::text_index::TextIndex::line: usize
pub metaslang_cst::text_index::TextIndex::utf16: usize
pub metaslang_cst::text_index::TextIndex::utf8: usize
impl metaslang_cst::text_index::TextIndex
pub const metaslang_cst::text_index::TextIndex::ZERO: metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::advance(&mut self, c: char, next: core::option::Option<&char>)
pub fn metaslang_cst::text_index::TextIndex::advance_str(&mut self, text: &str)
impl core::clone::Clone for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::clone(&self) -> metaslang_cst::text_index::TextIndex
impl core::cmp::Eq for metaslang_cst::text_index::TextIndex
impl core::cmp::Ord for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialEq for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::eq(&self, other: &metaslang_cst::text_index::TextIndex) -> bool
impl core::cmp::PartialOrd for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::default() -> metaslang_cst::text_index::TextIndex
impl core::fmt::Debug for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::iter::traits::accum::Sum for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::sum<I: core::iter::traits::iterator::Iterator<Item = Self>>(iter: I) -> Self
impl core::marker::Copy for metaslang_cst::text_index::TextIndex
impl core::marker::StructuralPartialEq for metaslang_cst::text_index::TextIndex
impl core::ops::arith::Add for metaslang_cst::text_index::TextIndex
pub type metaslang_cst::text_index::TextIndex::Output = metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::add(self, rhs: Self) -> Self::Output
impl core::ops::arith::AddAssign for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::add_assign(&mut self, rhs: Self)
impl serde::ser::Serialize for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<T: core::convert::AsRef<str>> core::convert::From<T> for metaslang_cst::text_index::TextIndex
pub fn metaslang_cst::text_index::TextIndex::from(s: T) -> Self
pub trait metaslang_cst::text_index::TextRangeExtensions
pub fn metaslang_cst::text_index::TextRangeExtensions::line(&self) -> core::ops::range::Range<usize>
pub fn metaslang_cst::text_index::TextRangeExtensions::utf16(&self) -> core::ops::range::Range<usize>
pub fn metaslang_cst::text_index::TextRangeExtensions::utf8(&self) -> core::ops::range::Range<usize>
impl metaslang_cst::text_index::TextRangeExtensions for metaslang_cst::text_index::TextRange
pub fn metaslang_cst::text_index::TextRange::line(&self) -> core::ops::range::Range<usize>
pub fn metaslang_cst::text_index::TextRange::utf16(&self) -> core::ops::range::Range<usize>
pub fn metaslang_cst::text_index::TextRange::utf8(&self) -> core::ops::range::Range<usize>
pub type metaslang_cst::text_index::TextRange = core::ops::range::Range<metaslang_cst::text_index::TextIndex>
