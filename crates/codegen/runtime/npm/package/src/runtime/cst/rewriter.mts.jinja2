{%- if rendering_in_stubs -%}
  /** This is a stub. */
  export abstract class BaseRewriter { }
{%- else -%} 
  import { NonterminalKind, NonterminalNode, Node, NodeType, TerminalNode, TerminalKind, Edge } from "../index.mjs";

  /** Abstract class to rewrite a CST. */
  export abstract class BaseRewriter {
    
    /** Replaces the `node` with a new node. If the result is `undefined`, the node is removed from the tree.
        This function typically the entry point of the rewrite operation. */
    public rewriteNode(node: Node): Node | undefined {
      switch (node.type) {
        case NodeType.TerminalNode:
          return this.rewriteTerminalNode(node);
        case NodeType.NonterminalNode:
          return this.rewriteNonterminalNode(node);
      }
    }

    /** Rewrites a non-terminal node. Typically called from `rewriteNode`. */
    public rewriteNonterminalNode(node: NonterminalNode): Node | undefined {
      switch (node.kind) {
        {% for nonterminal in model.kinds.nonterminal_kinds %}
        case NonterminalKind.{{ nonterminal.id }}:
          return this.rewrite{{- nonterminal.id -}}(node);
        {% endfor %}
      }
    }

    /** Rewrites a terminal node. Typically called from `rewriteNode`. */
    public rewriteTerminalNode(node: TerminalNode): Node | undefined {
      switch (node.kind) {
        {% for terminal in model.kinds.terminal_kinds %}
        case TerminalKind.{{ terminal.id }}:
          return this.rewrite{{- terminal.id -}}(node);
        {% endfor %}
        case TerminalKind.Unrecognized:
          return this.rewriteUnrecognized(node);
        case TerminalKind.Missing:
          return this.rewriteMissing(node);
      }
    }

    {% for nonterminal in model.kinds.nonterminal_kinds %}     
      /** @virtual Rewrites a `{{- nonterminal.id -}}` node, recursively traversing the children (unless overriden). */
      public rewrite{{- nonterminal.id -}}(node: NonterminalNode): Node | undefined {
        return this.rewriteChildren(node);
      }
    {% endfor %}
    
    {% for terminal in model.kinds.terminal_kinds %}     
      /** @virtual Rewrites a `{{- terminal.id -}}` node. */
      public rewrite{{- terminal.id -}}(node: TerminalNode): Node | undefined {
        return node;
      }
    {% endfor %}
    
    /** @virtual Rewrites an `Unrecognized` node. */
    public rewriteUnrecognized(node: TerminalNode): Node | undefined {
      return node;
    }
  
    /** @virtual Rewrites a `Missing` node. */
    public rewriteMissing(node: TerminalNode): Node | undefined {
      return node;
    }
  
    /** Rewrites all the children of a given non-terminal node. */
    protected rewriteChildren(node: NonterminalNode): NonterminalNode {
      let newChildren: Map<number, Edge | "delete"> | undefined = undefined;
      const children = node.children();
      children.forEach((child, index) => {
        const newChild = this.rewriteNode(child.node);
        if (newChild == undefined) {
          // node was removed, mark the removal
          newChildren = newChildren || new Map<number, Edge | "delete">();
          newChildren.set(index, "delete");
        } else {
          let edge;
          if (newChild.id == child.node.id) {
            edge = child;
          } else {
            // node has changed, produce new edge
            switch (newChild.type) {
              case NodeType.TerminalNode:
                edge = Edge.createWithTerminal(child.label, newChild);
                break;
              case NodeType.NonterminalNode:
                edge = Edge.createWithNonterminal(child.label, newChild);
                break;
            }
          }
          newChildren = newChildren || new Map<number, Edge | "delete">();
          newChildren.set(index, edge);
        }
      });

      if (newChildren != undefined) {
        let deleted = 0;
        const map = newChildren as Map<number, Edge | "delete">;
        for (const [index, edge] of map) {
          if (edge == "delete") {
            children.splice(index - deleted, 1);
            deleted += 1;
          } else {
            children[index + deleted] = edge;
          }
        }

        const newNode = NonterminalNode.create(node.kind, children);
        return newNode;
      } else {
        return node;
      }
    }
  }
{%- endif -%}
