{%- if rendering_in_stubs -%}
  export class StubAst {}
{%- else -%}
    import * as assert from "node:assert";
    import { ast_internal } from "../../napi-bindings/generated";
    import { NonterminalNode, TerminalNode } from "../../cst";
    import { NonterminalKind, TerminalKind } from "../../kinds";

    /*
    * Sequences:
    */

    {% for sequence in model.ast.sequences %}
      export class {{ sequence.name }} {
        private readonly fetch = once(() => {
          const [
            {%- for field in sequence.fields %}
              ${{ field.name | camel_case }},
            {%- endfor %}
          ] = ast_internal.selectSequence(this.cst);

          return {
            {%- for field in sequence.fields %}
              {{ field.name | camel_case }}:
              {%- if field.is_optional -%}
                ${{ field.name | camel_case }} === null ? undefined :
              {%- endif -%}
              {%- if field.is_terminal -%}
                ${{ field.name | camel_case }} as TerminalNode,
              {%- else -%}
                new {{ field.reference }}(${{ field.name | camel_case }} as NonterminalNode),
              {%- endif -%}
            {% endfor -%}
          };
        });

        public constructor(public readonly cst: NonterminalNode) {
          assertKind(this.cst.kind, NonterminalKind.{{ sequence.name }});
        }

        {% for field in sequence.fields %}
          public get {{ field.name | camel_case }}() :
            {%- if field.is_terminal -%}
              TerminalNode
            {%- else -%}
              {{ field.reference }}
            {%- endif -%}
            {%- if field.is_optional -%}
              | undefined
            {%- endif -%}
          {
            return this.fetch().{{ field.name | camel_case }};
          }
        {% endfor %}
      }
    {% endfor %}

    /*
    * Choices:
    */

    {% for choice in model.ast.choices %}
      export class {{ choice.name }} {
        {%- set variant_types = choice.nonterminals -%}
        {%- if choice.terminals | length > 0 -%}
          {%- set variant_types = variant_types | concat(with = "TerminalNode") -%}
        {%- endif -%}
        {%- set variant_types = variant_types | join(sep = " | ") -%}

        private readonly fetch: () => {{ variant_types }} = once(() => {
          const variant = ast_internal.selectChoice(this.cst);

          switch (variant.kind) {
            {%- for nonterminal in choice.nonterminals %}
              case NonterminalKind.{{ nonterminal }}:
                return new {{ nonterminal }}(variant as NonterminalNode);
            {%- endfor %}

            {% if choice.terminals | length > 0 %}
              {%- for terminal in choice.terminals %}
                case TerminalKind.{{ terminal }}:
              {%- endfor %}
                return variant as TerminalNode;
            {%- endif %}

            default:
              assert.fail(`Unexpected variant: ${variant.kind}`);
          }
        });

        public constructor(public readonly cst: NonterminalNode) {
          assertKind(this.cst.kind, NonterminalKind.{{ choice.name }});
        }

        public get variant(): {{ variant_types }} {
          return this.fetch();
        }
      }
    {% endfor %}

    /*
    * Repeated:
    */

    {% for repeated in model.ast.repeated %}
      export class {{ repeated.name }} {
        private readonly fetch = once(() => {
          const items = ast_internal.selectRepeated(this.cst);

          {%- if repeated.is_terminal -%}
            return items as TerminalNode[];
          {%- else -%}
            return items.map((item) => new {{ repeated.reference }}(item as NonterminalNode));
          {%- endif -%}
        });
          
        public constructor(public readonly cst: NonterminalNode) {
          assertKind(this.cst.kind, NonterminalKind.{{ repeated.name }});
        }

        public get items():
          {%- if repeated.is_terminal -%}
            readonly TerminalNode[]
          {%- else -%}
            readonly {{ repeated.reference }}[]
          {%- endif -%}
        {
          return this.fetch();
        }
      }
    {% endfor %}

    /*
    * Separated:
    */

    {% for separated in model.ast.separated %}
      export class {{ separated.name }} {
        private readonly fetch = once(() => {
          const [items, separators] = ast_internal.selectSeparated(this.cst);

          return {
            {%- if separated.is_terminal -%}
              items: items as TerminalNode[],
            {%- else -%}
              items: items.map((item) => new {{ separated.reference }}(item as NonterminalNode)),
            {%- endif -%}
            separators: separators as TerminalNode[],
          };
        });

        public constructor(public readonly cst: NonterminalNode) {
          assertKind(this.cst.kind, NonterminalKind.{{ separated.name }});
        }

        public get items():
          {%- if separated.is_terminal -%}
            readonly TerminalNode[]
          {%- else -%}
            readonly {{ separated.reference }}[]
          {%- endif -%}
        {
          return this.fetch().items;
        }

        public get separators(): readonly TerminalNode[] {
          return this.fetch().separators;
        }
      }
    {% endfor %}

    /*
    * Helpers:
    */

    function once<T>(factory: () => T): () => T {
      let value: T | undefined;
      return () => {
        if (value === undefined) {
          value = factory();
        }
        return value;
      };
    }

    function assertKind(actual: NonterminalKind, expected: NonterminalKind): void {
      assert.equal(actual, expected, `${expected} can only be initialized with a CST node of the same kind.`);
    }
{%- endif %}
