{%- if rendering_in_stubs -%}
  // No Intermediate Representation visitor in stubs...
{%- else -%}
  use std::rc::Rc;
  use crate::cst::TerminalNode;
  #[allow(clippy::wildcard_imports)]
  use super::nodes::*;

  pub trait Visitor {
    {%- for parent_type, sequence in target.sequences %}
      fn enter_{{ parent_type | snake_case }}(&mut self, _node: &{{ parent_type }}) -> bool { true }
      fn leave_{{ parent_type | snake_case }}(&mut self, _node: &{{ parent_type }}) {}
    {% endfor -%}
    {%- for parent_type, choice in target.choices %}
      fn enter_{{ parent_type | snake_case }}(&mut self, _node: &{{ parent_type }}) -> bool { true }
      fn leave_{{ parent_type | snake_case }}(&mut self, _node: &{{ parent_type }}) {}
    {% endfor -%}
    {%- for parent_type, collection in target.collections %}
      fn enter_{{ parent_type | snake_case }}(&mut self, _items: &{{ parent_type }}) -> bool { true }
      fn leave_{{ parent_type | snake_case }}(&mut self, _items: &{{ parent_type }}) {}
    {% endfor -%}
  }

  //
  // Sequences:
  //

  {% for parent_type, sequence in target.sequences %}
    pub fn accept_{{ parent_type | snake_case }}(node: &{{ parent_type }}, visitor: &mut impl Visitor) {
      if !visitor.enter_{{ parent_type | snake_case }}(node) {
        return;
      }
      {% for field in sequence.fields -%}
        {%- if not field.is_terminal -%}
          {%- if field.is_optional -%}
            if let Some(ref {{ field.label | snake_case }}) = node.{{ field.label | snake_case }} {
              accept_{{ field.type | snake_case }}({{ field.label }}, visitor);
            }
          {% else -%}
            accept_{{ field.type | snake_case }}(&node.{{ field.label }}, visitor);
          {%- endif -%}
        {%- endif -%}
      {%- endfor -%}
      visitor.leave_{{ parent_type | snake_case }}(node);
    }

  {% endfor %}

  //
  // Choices:
  //

  {% for parent_type, choice in target.choices %}
    {% if choice.nonterminal_types | length == 0 %}
      pub fn accept_{{ parent_type | snake_case }}(_node: &{{ parent_type }}, _visitor: &mut impl Visitor) {}
    {% else %}
      pub fn accept_{{ parent_type | snake_case }}(node: &{{ parent_type }}, visitor: &mut impl Visitor) {
        if !visitor.enter_{{ parent_type | snake_case }}(node) {
          return;
        }
        match node {
          {% for nonterminal in choice.nonterminal_types -%}
            {{ parent_type }}::{{ nonterminal }}(ref {{ nonterminal | snake_case }}) => {
              accept_{{ nonterminal | snake_case }}({{ nonterminal | snake_case }}, visitor);
            }
          {%- endfor %}
          {%- if choice.non_unique_terminal_types | length > 0 %}
            {%- for terminal in choice.non_unique_terminal_types -%}
              {%- if not loop.first -%} | {%- endif -%}
              {{ parent_type }}::{{terminal}}(_)
            {%- endfor -%}
            => {}
          {% endif -%}
          {%- if choice.unique_terminal_types | length > 0 %}
            {%- for terminal in choice.unique_terminal_types -%}
              {%- if not loop.first -%} | {%- endif -%}
              {{ parent_type }}::{{terminal}}
            {%- endfor -%}
            => {}
          {% endif -%}
        }
        visitor.leave_{{ parent_type | snake_case }}(node);
      }
    {% endif %}
  {% endfor %}

  //
  // Repeated & Separated
  //

  {% for parent_type, collection in target.collections -%}
    {%- if collection.is_terminal %}
      #[inline]
      fn accept_{{ parent_type | snake_case }}(items: &Vec<Rc<TerminalNode>>, visitor: &mut impl Visitor) {
        if visitor.enter_{{ parent_type | snake_case }}(items) {
          visitor.leave_{{ parent_type | snake_case }}(items);
        }
      }
    {% else %}
      #[inline]
      fn accept_{{ parent_type | snake_case }}(items: &Vec<{{ collection.item_type }}>, visitor: &mut impl Visitor) {
        if !visitor.enter_{{ parent_type | snake_case }}(items) {
          return;
        }
        for item in items {
          accept_{{ collection.item_type | snake_case }}(item, visitor);
        }
        visitor.leave_{{ parent_type | snake_case }}(items);
      }
    {% endif -%}
  {% endfor %}
{%- endif %}
