{%- if rendering_in_stubs -%}
  // No Intermediate Representation building functions in stubs...
{%- elif not builder -%}
  // Not rendering builder for Intermediate Language
{%- else -%}
  #![allow(clippy::too_many_lines)]

  use std::rc::Rc;

  #[allow(clippy::wildcard_imports)]
  use super::nodes::*;
  use crate::cst::{
    Edge, EdgeLabel, Node, NodeKind, NonterminalKind, NonterminalNode, TerminalKind, TerminalNode,
  };

  //
  // Sequences:
  //

  {% for parent_type, sequence in builder.sequences %}
    {% if not sequence.has_added_fields %}
      pub fn build_{{ parent_type | snake_case }}(node: &Rc<NonterminalNode>) -> Option<{{ parent_type }}>
      {
        assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
        let mut helper = ChildrenHelper::new(&node.children);
        {% for field in sequence.fields %}
          {%- if field.is_removed -%}
            _ = helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?;
          {%- elif field.is_optional -%}
            let {{ field.label }} = if helper.at_label(EdgeLabel::{{ field.label | pascal_case }}) {
              {%- if field.is_terminal -%}
                helper.accept_label(EdgeLabel::{{ field.label | pascal_case }}).map(terminal_node_cloned)
              {%- else -%}
                helper.accept_label(EdgeLabel::{{ field.label | pascal_case }}).and_then(|node|
                  build_{{ field.type | snake_case }}(nonterminal_node(node))
                )
              {%- endif -%}
            } else {
              None
            };
          {%- else -%}
            let {{ field.label }} =
            {%- if field.is_terminal -%}
              terminal_node_cloned(helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?);
            {%- else -%}
              build_{{ field.type | snake_case }}(
                nonterminal_node(helper.accept_label(EdgeLabel::{{ field.label | pascal_case }})?),
              )?;
            {%- endif -%}
          {%- endif -%}
        {%- endfor %}
        helper.finalize();

        Some(Rc::new({{ parent_type }}Struct {
          node_id: node.id(),
          {%- for field in sequence.fields -%}
            {%- if not field.is_removed -%}
              {{ field.label }},
            {%- endif -%}
          {%- endfor %}
        }))
      }
    {% endif %}
  {% endfor %}

  //
  // Choices:
  //

  {% for parent_type, choice in builder.choices %}
    pub fn build_{{ parent_type | snake_case }}(node: &Rc<NonterminalNode>) -> Option<{{ parent_type }}> {
      assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
      let mut helper = ChildrenHelper::new(&node.children);
      let variant = helper.accept_label(EdgeLabel::Variant)?;
      let item = match variant.kind() {
        {% for type in choice.nonterminal_types -%}
          NodeKind::Nonterminal(NonterminalKind::{{ type }}) => {{ parent_type }}::{{ type | pascal_case }}(build_{{ type | snake_case }}(nonterminal_node(variant))?),
        {%- endfor -%}

        {% for type in choice.non_unique_terminal_types -%}
          NodeKind::Terminal(TerminalKind::{{ type }}) => {
            {{ parent_type }}::{{ type | pascal_case }}(terminal_node_cloned(variant))
          },
        {%- endfor -%}

        {% for type in choice.unique_terminal_types -%}
          NodeKind::Terminal(TerminalKind::{{ type }}) => {
            {{ parent_type }}::{{ type | pascal_case }}
          },
        {%- endfor -%}

        NodeKind::Nonterminal(_) | NodeKind::Terminal(_) => {
          unreachable!("unexpected variant node of kind {kind}", kind = variant.kind());
        }
      };
      helper.finalize();
      Some(item)
    }

  {% endfor %}

  //
  // Repeated & Separated
  //

  {% for parent_type, collection in builder.collections %}
    pub fn build_{{ parent_type | snake_case }}(node: &Rc<NonterminalNode>) -> Option<{{ parent_type }}> {
      assert_nonterminal_kind(node, NonterminalKind::{{ parent_type }});
      let mut items = {{ parent_type }}::new();
      let mut helper = ChildrenHelper::new(&node.children);
      while helper.at_label(EdgeLabel::Item) {
        if let Some(child) = helper.accept_label(EdgeLabel::Item) {
          {%- if collection.is_terminal -%}
            items.push(terminal_node_cloned(child));
          {%- else -%}
            if let Some(item) = build_{{ collection.item_type | snake_case }}(nonterminal_node(child)) {
              items.push(item);
            }
          {%- endif -%}
        }
        if helper.at_label(EdgeLabel::Separator) {
          _ = helper.accept_label(EdgeLabel::Separator);
        }
      }
      helper.finalize();
      Some(items)
    }
  {% endfor %}

  //
  // Common:
  //

  #[allow(dead_code)]
  #[inline]
  fn assert_nonterminal_kind(node: &Rc<NonterminalNode>, kind: NonterminalKind) {
    assert!(node.kind == kind, "expected non-terminal of kind {kind}, got {node:?}");
  }

  #[allow(dead_code)]
  #[inline]
  fn terminal_node_cloned(node: &Node) -> Rc<TerminalNode> {
    node.as_terminal().map(Rc::clone).expect("expected terminal node")
  }

  #[allow(dead_code)]
  #[inline]
  fn nonterminal_node(node: &Node) -> &Rc<NonterminalNode> {
    node.as_nonterminal().expect("expected non-terminal node")
  }

  struct ChildrenHelper<'a> {
    children: &'a Vec<Edge>,
    index: usize,
  }

  impl<'a> ChildrenHelper<'a> {
    fn new(children: &'a Vec<Edge>) -> Self {
      let mut index = 0;
      while index < children.len() {
        if !children[index].is_trivia() {
          break;
        }
        index += 1;
      }
      Self { children, index }
    }

    fn at_label(&self, label: EdgeLabel) -> bool {
      self.index < self.children.len() && self.children[self.index].label == label
    }

    fn accept_label(&mut self, label: EdgeLabel) -> Option<&Node> {
      if self.index >= self.children.len() {
        // we may end up in this case if the parser generates an incomplete CST
        // node because of a parser error
        return None;
      }
      if !self.children[self.index].is_valid() {
        // attempt to recover from an unrecognized/missing node
        loop {
          self.index += 1;
          if self.index >= self.children.len() {
            return None;
          }
          if !self.children[self.index].is_trivia() {
            break;
          }
        }
        if self.children[self.index].label != label {
          return None;
        }
      }
      assert!(
        self.children[self.index].label == label,
        "expected node with label {label}, instead got {edge:?}", edge = self.children[self.index],
      );

      let node = &self.children[self.index].node;
      loop {
        self.index += 1;
        if self.index >= self.children.len() || !self.children[self.index].is_trivia() {
          break;
        }
      }
      Some(node)
    }

    fn finalize(mut self) {
      // skip over trailing trivia and unrecognized nodes
      while self.index < self.children.len() {
        let child = &self.children[self.index];
        assert!(child.is_trivia() || !child.is_valid(), "unexpected trailing node {child:?}");
        self.index += 1;
      }
    }
  }

{%- endif %}
