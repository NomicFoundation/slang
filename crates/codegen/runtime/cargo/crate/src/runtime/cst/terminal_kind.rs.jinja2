{# This needs to stay in sync with the wit-bindgen output #}
{% if model.kinds.terminal_kinds|length <= 256 %} #[repr(u8)] {% else %} #[repr(u16)] {% endif %}
#[derive(
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    serde::Serialize,
    strum_macros::AsRefStr,
    strum_macros::Display,
    strum_macros::EnumString,
    strum_macros::IntoStaticStr,
)]
#[derive(Clone, Copy)] 
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::doc_markdown)]
#[allow(clippy::doc_link_with_quotes)]
pub enum TerminalKind {
    {# Built-in: #}

    UNRECOGNIZED,
    MISSING,

    {# Generated: #}

    {% if rendering_in_stubs -%}
        Stub1,
        Stub2,
        Stub3,
    {%- else -%}
        {%- for variant in model.kinds.terminal_kinds -%}
            /// Represents a node with kind `{{ variant.id | pascal_case }}`, having the following structure:
            ///
            /// ```ebnf
            {%- for line in variant.documentation | split(pat="\n") %}
            /// {{ line }}
            {%- endfor %}
            /// ```
            {{ variant.id | pascal_case }},
        {%- endfor -%}
    {%- endif -%}
}

impl crate::cst::TerminalKindExtensions for TerminalKind {
    {%- if not rendering_in_stubs -%}
        fn is_identifier(self) -> bool {
            matches!(
                self,
                {%- for variant in model.kinds.identifier_terminals -%}
                    | Self::{{ variant }}
                {%- endfor -%}
            )
        }

        fn is_trivia(self) -> bool {
            matches!(
                self,
                {%- for variant in model.kinds.trivia_terminals -%}
                    | Self::{{ variant }}
                {%- endfor -%}
            )
        }

        fn is_valid(self) -> bool {
            !matches!(self, Self::UNRECOGNIZED | Self::MISSING)
        }
    {%- endif -%}
}
