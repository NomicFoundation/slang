#![allow(clippy::too_many_lines)]

use std::rc::Rc;

use napi::Either;
use napi_derive::napi;

use crate::napi_interface::cst::{NAPINodeExtensions, NonTerminalNode, TerminalNode};
use crate::napi_interface::{NonTerminalKind, RustLabeledNode, RustNode, RustRuleNode, TerminalKind};

//
// Sequences:
//

#[napi(
    namespace = "ast_internal",
    ts_return_type = "Array<cst.Node | null>",
    catch_unwind,
)]
pub fn select_sequence(
    #[napi(ts_arg_type = "cst.NonTerminalNode")] node: &NonTerminalNode,
) -> Result<Vec<Option<Either<NonTerminalNode, TerminalNode>>>> {
    {%- if rendering_in_stubs -%}
        unreachable!("Invoking AST selectors in stubs: {node:#?}")
    {%- else -%}
        let mut selector = Selector::new(node);

        let result = match node.kind() {
            {%- for sequence in model.ast.sequences -%}
                NonTerminalKind::{{ sequence.name }} => {
                    selector.{{ sequence.name | snake_case }}()?
                },
            {%- endfor -%}
            _ => {
                return Error::UnexpectedParent(node.kind()).into();
            }
        };

        selector.finalize()?;
        Ok(result)
    {%- endif -%}
}

{%- if not rendering_in_stubs -%}
    {% for sequence in model.ast.sequences %}
        impl Selector {
            fn {{ sequence.name | snake_case }}(&mut self) -> Result<Vec<Option<Either<NonTerminalNode, TerminalNode>>>> {
                Ok(vec![
                    {%- for field in sequence.fields -%}
                        {%- if field.is_optional -%}

                            self.try_select(|node| {
                                {%- if field.is_terminal -%}
                                    node.is_terminal_with_kind(TerminalKind::{{ field.reference }})
                                {%- else -%}
                                    node.is_nonterminal_with_kind(NonTerminalKind::{{ field.reference }})
                                {%- endif -%}
                            })?,

                        {%- else -%}

                            Some(self.select(|node| {
                                {%- if field.is_terminal -%}
                                    node.is_terminal_with_kind(TerminalKind::{{ field.reference }})
                                {%- else -%}
                                    node.is_nonterminal_with_kind(NonTerminalKind::{{ field.reference }})
                                {%- endif -%}
                            })?),

                        {%- endif -%}
                    {%- endfor -%}
                ])
            }
        }
    {% endfor %}
{%- endif -%}

//
// Choices:
//

#[napi(
    namespace = "ast_internal",
    ts_return_type = "cst.Node",
    catch_unwind,
)]
pub fn select_choice(
    #[napi(ts_arg_type = "cst.NonTerminalNode")] node: &NonTerminalNode,
) -> Result<Either<NonTerminalNode, TerminalNode>> {
    {%- if rendering_in_stubs -%}
        unreachable!("Invoking AST selectors in stubs: {node:#?}")
    {%- else -%}
        let mut selector = Selector::new(node);

        let result = match node.kind() {
            {%- for choice in model.ast.choices -%}
                NonTerminalKind::{{ choice.name }} => {
                    selector.{{ choice.name | snake_case }}()?
                },
            {%- endfor -%}
            _ => {
                return Error::UnexpectedParent(node.kind()).into();
            }
        };

        selector.finalize()?;
        Ok(result)
    {%- endif -%}
}

{% if not rendering_in_stubs %}
    {% for choice in model.ast.choices %}
        impl Selector {
            fn {{ choice.name | snake_case }}(&mut self) -> Result<Either<NonTerminalNode, TerminalNode>> {
                self.select(|node| {
                    {%- set non_terminals_len = choice.non_terminals | length -%}
                    {%- set terminals_len = choice.terminals | length -%}

                    {%- if non_terminals_len == 1 -%}
                        node.is_nonterminal_with_kind(NonTerminalKind::{{ choice.non_terminals[0] }})
                    {%- elif non_terminals_len > 1 -%}
                        node.is_nonterminal_with_kinds(&[
                            {%- for non_terminal in choice.non_terminals -%}
                                NonTerminalKind::{{ non_terminal }},
                            {%- endfor -%}
                        ])
                    {%- endif -%}

                    {%- if non_terminals_len > 0 and terminals_len > 0 -%}
                        ||
                    {%- endif -%}

                    {%- if terminals_len == 1 -%}
                        node.is_terminal_with_kind(TerminalKind::{{ choice.terminals[0] }})
                    {%- elif terminals_len > 1 -%}
                        node.is_terminal_with_kinds(&[
                            {%- for terminal in choice.terminals -%}
                                TerminalKind::{{ terminal }},
                            {%- endfor -%}
                        ])
                    {%- endif -%}
                })
            }
        }
    {% endfor %}
{% endif %}

//
// Repeated:
//

#[napi(
    namespace = "ast_internal",
    ts_return_type = "Array<cst.Node>",
    catch_unwind,
)]
pub fn select_repeated(
    #[napi(ts_arg_type = "cst.NonTerminalNode")] node: &NonTerminalNode,
) -> Result<Vec<Either<NonTerminalNode, TerminalNode>>> {
    {%- if rendering_in_stubs -%}
        unreachable!("Invoking AST selectors in stubs: {node:#?}")
    {%- else -%}
        let mut selector = Selector::new(node);

        let result = match node.kind() {
            {%- for repeated in model.ast.repeated -%}
                NonTerminalKind::{{ repeated.name }} => {
                    selector.{{ repeated.name | snake_case }}()?
                },
            {%- endfor -%}
            _ => {
                return Error::UnexpectedParent(node.kind()).into();
            }
        };

        selector.finalize()?;
        Ok(result)
    {%- endif -%}
}

{% if not rendering_in_stubs %}
    {% for repeated in model.ast.repeated %}
        impl Selector {
            fn {{ repeated.name | snake_case }}(&mut self) -> Result<Vec<Either<NonTerminalNode, TerminalNode>>> {
                let mut items = vec![];

                while let Some(item) = self.try_select(|node| {
                    {%- if repeated.is_terminal -%}
                        node.is_terminal_with_kind(TerminalKind::{{ repeated.reference }})
                    {%- else -%}
                        node.is_nonterminal_with_kind(NonTerminalKind::{{ repeated.reference }})
                    {%- endif -%}
                })? {
                    items.push(item);
                }

                Ok(items)
            }
        }
    {% endfor %}
{% endif %}

//
// Separated:
//

#[napi(
    namespace = "ast_internal",
    ts_return_type = "[Array<cst.Node>, Array<cst.Node>]",
    catch_unwind,
)]
pub fn select_separated(
    #[napi(ts_arg_type = "cst.NonTerminalNode")] node: &NonTerminalNode,
) -> Result<Vec<Vec<Either<NonTerminalNode, TerminalNode>>>> {
    {%- if rendering_in_stubs -%}
        unreachable!("Invoking AST selectors in stubs: {node:#?}")
    {%- else -%}
        let mut selector = Selector::new(node);

        let result = match node.kind() {
            {%- for separated in model.ast.separated -%}
                NonTerminalKind::{{ separated.name }} => {
                    selector.{{ separated.name | snake_case }}()?
                },
            {%- endfor -%}
            _ => {
                return Error::UnexpectedParent(node.kind()).into();
            }
        };

        selector.finalize()?;
        Ok(result)
    {%- endif -%}
}

{% if not rendering_in_stubs %}
    {% for separated in model.ast.separated %}
        impl Selector {
            fn {{ separated.name | snake_case }}(&mut self) -> Result<Vec<Vec<Either<NonTerminalNode, TerminalNode>>>> {
                let mut separated = vec![];
                let mut separators = vec![];

                if let Some(first) = self.try_select(|node| {
                    {%- if separated.is_terminal -%}
                        node.is_terminal_with_kind(TerminalKind::{{ separated.reference }})
                    {%- else -%}
                        node.is_nonterminal_with_kind(NonTerminalKind::{{ separated.reference }})
                    {%- endif -%}
                })? {
                    separated.push(first);

                    while let Some(separator) = self.try_select(|node| node.is_terminal_with_kind(TerminalKind::{{ separated.separator }}))? {
                        separators.push(separator);

                        separated.push(self.select(|node| {
                            {%- if separated.is_terminal -%}
                                node.is_terminal_with_kind(TerminalKind::{{ separated.reference }})
                            {%- else -%}
                                node.is_nonterminal_with_kind(NonTerminalKind::{{ separated.reference }})
                            {%- endif -%}
                        })?);
                    }
                }

                Ok(vec![separated, separators])
            }
        }
    {% endfor %}
{% endif %}

//
// Common:
//

struct Selector {
    node: Rc<RustRuleNode>,
    index: usize,
}

impl Selector {
    fn new(node: &NonTerminalNode) -> Self {
        Self {
            node: Rc::clone(&node.0),
            index: 0,
        }
    }

    fn select(&mut self, filter: impl FnOnce(&RustNode) -> bool) -> Result<Either<NonTerminalNode, TerminalNode>> {
        match self.try_select(filter)? {
            Some(node) => Ok(node),
            None => Error::MissingChild(self.index).into(),
        }
    }

    fn try_select(&mut self, filter: impl FnOnce(&RustNode) -> bool) -> Result<Option<Either<NonTerminalNode, TerminalNode>>> {
        while let Some(child) = self.node.children.get(self.index) {
            match child {
                node if node.is_trivia() => {
                    // skip trivia, since it's not part of the AST
                    self.index += 1;
                    continue;
                }
                RustLabeledNode {
                    node: RustNode::Terminal(terminal),
                    ..
                } if matches!(terminal.kind, TerminalKind::SKIPPED) => {
                    return Error::SkippedToken(self.index).into();
                }
                labeled if filter(labeled) => {
                    self.index += 1;
                    return Ok(Some(labeled.node.clone().into_js_either_node()));
                }
                _ => {
                    break;
                },
            }
        }

        Ok(None)
    }

    fn finalize(mut self) -> Result<()> {
        if self.try_select(|_| true)?.is_some() {
            return Error::UnexpectedTrailing(self.index - 1).into();
        }

        Ok(())
    }
}

type Result<T> = std::result::Result<T, napi::Error>;

#[derive(Debug, thiserror::Error)]
enum Error {
    // Should not theoretically happen, since we're only called from our own generated AST types.
    #[error("Unexpected parent node with NonTerminalKind '{0}'.")]
    UnexpectedParent(NonTerminalKind),

    // Should not theoretically happen, since we're only called from our own generated AST types.
    #[error("Unexpected trailing children at index '{0}'.")]
    UnexpectedTrailing(usize),

    // Should not theoretically happen, unless AST error recovery was changed.
    #[error("Missing child node at index '{0}'.")]
    MissingChild(usize),

    // Can happen if the user decided to use an incorrect/incomplete CST node.
    #[error("Unexpected SKIPPED token at index '{0}'. Creating AST types from incorrect/incomplete CST nodes is not supported yet.")]
    SkippedToken(usize),
}

impl<T> From<Error> for Result<T>  {
    fn from(error: Error) -> Self {
        Err(napi::Error::from_reason(error.to_string()))
    }
}
