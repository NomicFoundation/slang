// This file is generated automatically by infrastructure scripts. Please don't edit by hand.

// Generated by `wit-bindgen` 0.26.0. DO NOT EDIT!
// Options used:
//   * default-bindings-module: "$crate::wit::slang"
//   * pub-export-macro
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod nomic_foundation {
        #[allow(dead_code)]
        pub mod slang {
            #[allow(dead_code, clippy::all)]
            pub mod kinds {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum NonterminalKind {
                    Stub1,
                    Stub2,
                    Stub3,
                }
                impl ::core::fmt::Debug for NonterminalKind {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            NonterminalKind::Stub1 => {
                                f.debug_tuple("NonterminalKind::Stub1").finish()
                            }
                            NonterminalKind::Stub2 => {
                                f.debug_tuple("NonterminalKind::Stub2").finish()
                            }
                            NonterminalKind::Stub3 => {
                                f.debug_tuple("NonterminalKind::Stub3").finish()
                            }
                        }
                    }
                }

                impl NonterminalKind {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> NonterminalKind {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => NonterminalKind::Stub1,
                            1 => NonterminalKind::Stub2,
                            2 => NonterminalKind::Stub3,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum EdgeLabel {
                    /// Built-in:
                    Item,
                    Variant,
                    Separator,
                    Operand,
                    LeftOperand,
                    RightOperand,
                    LeadingTrivia,
                    TrailingTrivia,
                    /// Generated:
                    Stub1,
                    Stub2,
                    Stub3,
                }
                impl ::core::fmt::Debug for EdgeLabel {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            EdgeLabel::Item => f.debug_tuple("EdgeLabel::Item").finish(),
                            EdgeLabel::Variant => f.debug_tuple("EdgeLabel::Variant").finish(),
                            EdgeLabel::Separator => f.debug_tuple("EdgeLabel::Separator").finish(),
                            EdgeLabel::Operand => f.debug_tuple("EdgeLabel::Operand").finish(),
                            EdgeLabel::LeftOperand => {
                                f.debug_tuple("EdgeLabel::LeftOperand").finish()
                            }
                            EdgeLabel::RightOperand => {
                                f.debug_tuple("EdgeLabel::RightOperand").finish()
                            }
                            EdgeLabel::LeadingTrivia => {
                                f.debug_tuple("EdgeLabel::LeadingTrivia").finish()
                            }
                            EdgeLabel::TrailingTrivia => {
                                f.debug_tuple("EdgeLabel::TrailingTrivia").finish()
                            }
                            EdgeLabel::Stub1 => f.debug_tuple("EdgeLabel::Stub1").finish(),
                            EdgeLabel::Stub2 => f.debug_tuple("EdgeLabel::Stub2").finish(),
                            EdgeLabel::Stub3 => f.debug_tuple("EdgeLabel::Stub3").finish(),
                        }
                    }
                }

                impl EdgeLabel {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> EdgeLabel {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => EdgeLabel::Item,
                            1 => EdgeLabel::Variant,
                            2 => EdgeLabel::Separator,
                            3 => EdgeLabel::Operand,
                            4 => EdgeLabel::LeftOperand,
                            5 => EdgeLabel::RightOperand,
                            6 => EdgeLabel::LeadingTrivia,
                            7 => EdgeLabel::TrailingTrivia,
                            8 => EdgeLabel::Stub1,
                            9 => EdgeLabel::Stub2,
                            10 => EdgeLabel::Stub3,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum TerminalKind {
                    /// Built-in:
                    Skipped,
                    /// Generated:
                    Stub1,
                    Stub2,
                    Stub3,
                }
                impl ::core::fmt::Debug for TerminalKind {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            TerminalKind::Skipped => {
                                f.debug_tuple("TerminalKind::Skipped").finish()
                            }
                            TerminalKind::Stub1 => f.debug_tuple("TerminalKind::Stub1").finish(),
                            TerminalKind::Stub2 => f.debug_tuple("TerminalKind::Stub2").finish(),
                            TerminalKind::Stub3 => f.debug_tuple("TerminalKind::Stub3").finish(),
                        }
                    }
                }

                impl TerminalKind {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> TerminalKind {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => TerminalKind::Skipped,
                            1 => TerminalKind::Stub1,
                            2 => TerminalKind::Stub2,
                            3 => TerminalKind::Stub3,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_kinds_0_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_kinds_0_0_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod text_index {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TextIndex {
                    pub utf8: u32,
                    pub utf16: u32,
                    pub line: u32,
                    pub column: u32,
                }
                impl ::core::fmt::Debug for TextIndex {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextIndex")
                            .field("utf8", &self.utf8)
                            .field("utf16", &self.utf16)
                            .field("line", &self.line)
                            .field("column", &self.column)
                            .finish()
                    }
                }
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TextRange {
                    pub start: TextIndex,
                    pub end: TextIndex,
                }
                impl ::core::fmt::Debug for TextRange {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextRange")
                            .field("start", &self.start)
                            .field("end", &self.end)
                            .finish()
                    }
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_text_index_0_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_text_index_0_0_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod cst {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type NonterminalKind = super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind;
                pub type TerminalKind = super::super::super::super::exports::nomic_foundation::slang::kinds::TerminalKind;
                pub type TextIndex = super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct NonterminalNode {
                    handle: _rt::Resource<NonterminalNode>,
                }

                type _NonterminalNodeRep<T> = Option<T>;

                impl NonterminalNode {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `NonterminalNode`.
                    pub fn new<T: GuestNonterminalNode>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _NonterminalNodeRep<T> = Some(val);
                        let ptr: *mut _NonterminalNodeRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestNonterminalNode>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestNonterminalNode>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestNonterminalNode>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestNonterminalNode` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _NonterminalNodeRep<T>);
                    }

                    fn as_ptr<T: GuestNonterminalNode>(&self) -> *mut _NonterminalNodeRep<T> {
                        NonterminalNode::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`NonterminalNode`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct NonterminalNodeBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a NonterminalNode>,
                }

                impl<'a> NonterminalNodeBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestNonterminalNode>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _NonterminalNodeRep<T> {
                        NonterminalNode::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for NonterminalNode {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]nonterminal-node"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TerminalNode {
                    handle: _rt::Resource<TerminalNode>,
                }

                type _TerminalNodeRep<T> = Option<T>;

                impl TerminalNode {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `TerminalNode`.
                    pub fn new<T: GuestTerminalNode>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _TerminalNodeRep<T> = Some(val);
                        let ptr: *mut _TerminalNodeRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestTerminalNode>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestTerminalNode>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestTerminalNode>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestTerminalNode` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _TerminalNodeRep<T>);
                    }

                    fn as_ptr<T: GuestTerminalNode>(&self) -> *mut _TerminalNodeRep<T> {
                        TerminalNode::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`TerminalNode`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct TerminalNodeBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a TerminalNode>,
                }

                impl<'a> TerminalNodeBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestTerminalNode>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _TerminalNodeRep<T> {
                        TerminalNode::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for TerminalNode {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]terminal-node"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                pub enum Node {
                    Nonterminal(NonterminalNode),
                    Terminal(TerminalNode),
                }
                impl ::core::fmt::Debug for Node {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Node::Nonterminal(e) => {
                                f.debug_tuple("Node::Nonterminal").field(e).finish()
                            }
                            Node::Terminal(e) => f.debug_tuple("Node::Terminal").field(e).finish(),
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_nonterminal_node_kind_cabi<T: GuestNonterminalNode>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::kind(NonterminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_nonterminal_node_text_len_cabi<
                    T: GuestNonterminalNode,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::text_len(NonterminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf82, utf16:utf162, line:line2, column:column2, } = result0;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(utf82);
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(utf162);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(line2);
                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(column2);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_nonterminal_node_children_cabi<
                    T: GuestNonterminalNode,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::children(NonterminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = result0;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 8, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 8);
                        {
                            match e {
                                Node::Nonterminal(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    *base.add(4).cast::<i32>() = (e).take_handle() as i32;
                                }
                                Node::Terminal(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    *base.add(4).cast::<i32>() = (e).take_handle() as i32;
                                }
                            }
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = result2;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_nonterminal_node_children<
                    T: GuestNonterminalNode,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 8, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_nonterminal_node_unparse_cabi<
                    T: GuestNonterminalNode,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::unparse(NonterminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_nonterminal_node_unparse<
                    T: GuestNonterminalNode,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_terminal_node_kind_cabi<T: GuestTerminalNode>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::kind(TerminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_terminal_node_text_len_cabi<T: GuestTerminalNode>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::text_len(TerminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf82, utf16:utf162, line:line2, column:column2, } = result0;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(utf82);
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(utf162);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(line2);
                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(column2);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_terminal_node_text_cabi<T: GuestTerminalNode>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::text(TerminalNodeBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_terminal_node_text<T: GuestTerminalNode>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    type NonterminalNode: GuestNonterminalNode;
                    type TerminalNode: GuestTerminalNode;
                }
                pub trait GuestNonterminalNode: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-new]nonterminal-node"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]nonterminal-node"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn kind(&self) -> NonterminalKind;
                    fn text_len(&self) -> TextIndex;
                    fn children(&self) -> _rt::Vec<Node>;
                    /// TODO: re-enable once we solve circular references:
                    /// create-cursor: func(text-offset: text-index) -> cursor;
                    fn unparse(&self) -> _rt::String;
                }
                pub trait GuestTerminalNode: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-new]terminal-node"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]nomic-foundation:slang/cst@0.0.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]terminal-node"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn kind(&self) -> TerminalKind;
                    fn text_len(&self) -> TextIndex;
                    fn text(&self) -> _rt::String;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_cst_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.kind"]
    unsafe extern "C" fn export_method_nonterminal_node_kind(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_nonterminal_node_kind_cabi::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.text-len"]
    unsafe extern "C" fn export_method_nonterminal_node_text_len(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_nonterminal_node_text_len_cabi::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.children"]
    unsafe extern "C" fn export_method_nonterminal_node_children(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_nonterminal_node_children_cabi::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.children"]
    unsafe extern "C" fn _post_return_method_nonterminal_node_children(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_nonterminal_node_children::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.unparse"]
    unsafe extern "C" fn export_method_nonterminal_node_unparse(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_nonterminal_node_unparse_cabi::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/cst@0.0.0#[method]nonterminal-node.unparse"]
    unsafe extern "C" fn _post_return_method_nonterminal_node_unparse(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_nonterminal_node_unparse::<<$ty as $($path_to_types)*::Guest>::NonterminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]terminal-node.kind"]
    unsafe extern "C" fn export_method_terminal_node_kind(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_terminal_node_kind_cabi::<<$ty as $($path_to_types)*::Guest>::TerminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]terminal-node.text-len"]
    unsafe extern "C" fn export_method_terminal_node_text_len(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_terminal_node_text_len_cabi::<<$ty as $($path_to_types)*::Guest>::TerminalNode>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cst@0.0.0#[method]terminal-node.text"]
    unsafe extern "C" fn export_method_terminal_node_text(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_terminal_node_text_cabi::<<$ty as $($path_to_types)*::Guest>::TerminalNode>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/cst@0.0.0#[method]terminal-node.text"]
    unsafe extern "C" fn _post_return_method_terminal_node_text(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_terminal_node_text::<<$ty as $($path_to_types)*::Guest>::TerminalNode>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/cst@0.0.0#[dtor]nonterminal-node"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::NonterminalNode::dtor::<
        <$ty as $($path_to_types)*::Guest>::NonterminalNode
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/cst@0.0.0#[dtor]terminal-node"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::TerminalNode::dtor::<
        <$ty as $($path_to_types)*::Guest>::TerminalNode
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_cst_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod cursor {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Node =
                    super::super::super::super::exports::nomic_foundation::slang::cst::Node;
                pub type NonterminalNode = super::super::super::super::exports::nomic_foundation::slang::cst::NonterminalNode;
                pub type NonterminalNodeBorrow<'a> = super::super::super::super::exports::nomic_foundation::slang::cst::NonterminalNodeBorrow<'a>;
                pub type EdgeLabel =
                    super::super::super::super::exports::nomic_foundation::slang::kinds::EdgeLabel;
                pub type NonterminalKind = super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind;
                pub type TerminalKind = super::super::super::super::exports::nomic_foundation::slang::kinds::TerminalKind;
                pub type TextIndex = super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex;
                pub type TextRange = super::super::super::super::exports::nomic_foundation::slang::text_index::TextRange;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Cursor {
                    handle: _rt::Resource<Cursor>,
                }

                type _CursorRep<T> = Option<T>;

                impl Cursor {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Cursor`.
                    pub fn new<T: GuestCursor>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _CursorRep<T> = Some(val);
                        let ptr: *mut _CursorRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestCursor>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestCursor>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestCursor>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestCursor` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _CursorRep<T>);
                    }

                    fn as_ptr<T: GuestCursor>(&self) -> *mut _CursorRep<T> {
                        Cursor::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Cursor`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct CursorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Cursor>,
                }

                impl<'a> CursorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestCursor>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _CursorRep<T> {
                        Cursor::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Cursor {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/cursor@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]cursor"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_reset_cabi<T: GuestCursor>(arg0: *mut u8) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::reset(CursorBorrow::lift(arg0 as u32 as usize).get());
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_complete_cabi<T: GuestCursor>(arg0: *mut u8) {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    T::complete(CursorBorrow::lift(arg0 as u32 as usize).get());
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_is_completed_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::is_completed(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_clone_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::clone(CursorBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_spawn_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::spawn(CursorBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_node_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::node(CursorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    use super::super::super::super::exports::nomic_foundation::slang::cst::Node as V2;
                    match result0 {
                        V2::Nonterminal(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        V2::Terminal(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_label_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::label(CursorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(1).cast::<u8>() = (e.clone() as i32) as u8;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_text_offset_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::text_offset(CursorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf82, utf16:utf162, line:line2, column:column2, } = result0;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(utf82);
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(utf162);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(line2);
                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(column2);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_text_range_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::text_range(CursorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextRange{ start:start2, end:end2, } = result0;
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf83, utf16:utf163, line:line3, column:column3, } = start2;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(utf83);
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(utf163);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(line3);
                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(column3);
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf84, utf16:utf164, line:line4, column:column4, } = end2;
                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(utf84);
                    *ptr1.add(20).cast::<i32>() = _rt::as_i32(utf164);
                    *ptr1.add(24).cast::<i32>() = _rt::as_i32(line4);
                    *ptr1.add(28).cast::<i32>() = _rt::as_i32(column4);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_depth_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::depth(CursorBorrow::lift(arg0 as u32 as usize).get());
                    _rt::as_i32(result0)
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_ancestors_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::ancestors(CursorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = result0;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 4, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = result2;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_cursor_ancestors<T: GuestCursor>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_next(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_non_descendent_cabi<
                    T: GuestCursor,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_next_non_descendent(
                        CursorBorrow::lift(arg0 as u32 as usize).get(),
                    );
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_previous_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_previous(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_parent_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_parent(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_first_child_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_first_child(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_last_child_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_last_child(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_nth_child_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_nth_child(
                        CursorBorrow::lift(arg0 as u32 as usize).get(),
                        arg1 as u32,
                    );
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_sibling_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_next_sibling(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_previous_sibling_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_previous_sibling(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_terminal_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_next_terminal(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_terminal_with_kind_cabi<
                    T: GuestCursor,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_next_terminal_with_kind(CursorBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::exports::nomic_foundation::slang::kinds::TerminalKind::_lift(arg1 as u8));
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_terminal_with_kinds_cabi<
                    T: GuestCursor,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base1 = arg1;
                    let len1 = arg2;
                    let mut result1 = _rt::Vec::with_capacity(len1);
                    for i in 0..len1 {
                        let base = base1.add(i * 1);
                        let e1 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());

                            super::super::super::super::exports::nomic_foundation::slang::kinds::TerminalKind::_lift(l0 as u8)
                        };
                        result1.push(e1);
                    }
                    _rt::cabi_dealloc(base1, len1 * 1, 1);
                    let result2 = T::go_to_next_terminal_with_kinds(
                        CursorBorrow::lift(arg0 as u32 as usize).get(),
                        result1,
                    );
                    match result2 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_nonterminal_cabi<T: GuestCursor>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::go_to_next_nonterminal(CursorBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_nonterminal_with_kind_cabi<
                    T: GuestCursor,
                >(
                    arg0: *mut u8,
                    arg1: i32,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::go_to_next_nonterminal_with_kind(CursorBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind::_lift(arg1 as u8));
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_cursor_go_to_next_nonterminal_with_kinds_cabi<
                    T: GuestCursor,
                >(
                    arg0: *mut u8,
                    arg1: *mut u8,
                    arg2: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let base1 = arg1;
                    let len1 = arg2;
                    let mut result1 = _rt::Vec::with_capacity(len1);
                    for i in 0..len1 {
                        let base = base1.add(i * 1);
                        let e1 = {
                            let l0 = i32::from(*base.add(0).cast::<u8>());

                            super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind::_lift(l0 as u8)
                        };
                        result1.push(e1);
                    }
                    _rt::cabi_dealloc(base1, len1 * 1, 1);
                    let result2 = T::go_to_next_nonterminal_with_kinds(
                        CursorBorrow::lift(arg0 as u32 as usize).get(),
                        result1,
                    );
                    match result2 {
                        true => 1,
                        false => 0,
                    }
                }
                pub trait Guest {
                    type Cursor: GuestCursor;
                }
                pub trait GuestCursor: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/cursor@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]cursor"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/cursor@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]cursor"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn reset(&self);
                    fn complete(&self);
                    fn is_completed(&self) -> bool;
                    fn clone(&self) -> Cursor;
                    fn spawn(&self) -> Cursor;
                    fn node(&self) -> Node;
                    fn label(&self) -> Option<EdgeLabel>;
                    fn text_offset(&self) -> TextIndex;
                    fn text_range(&self) -> TextRange;
                    fn depth(&self) -> u32;
                    fn ancestors(&self) -> _rt::Vec<NonterminalNode>;
                    fn go_to_next(&self) -> bool;
                    fn go_to_next_non_descendent(&self) -> bool;
                    fn go_to_previous(&self) -> bool;
                    fn go_to_parent(&self) -> bool;
                    fn go_to_first_child(&self) -> bool;
                    fn go_to_last_child(&self) -> bool;
                    fn go_to_nth_child(&self, child_number: u32) -> bool;
                    fn go_to_next_sibling(&self) -> bool;
                    fn go_to_previous_sibling(&self) -> bool;
                    fn go_to_next_terminal(&self) -> bool;
                    fn go_to_next_terminal_with_kind(&self, kind: TerminalKind) -> bool;
                    fn go_to_next_terminal_with_kinds(&self, kinds: _rt::Vec<TerminalKind>)
                        -> bool;
                    fn go_to_next_nonterminal(&self) -> bool;
                    fn go_to_next_nonterminal_with_kind(&self, kind: NonterminalKind) -> bool;
                    fn go_to_next_nonterminal_with_kinds(
                        &self,
                        kinds: _rt::Vec<NonterminalKind>,
                    ) -> bool;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_cursor_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.reset"]
    unsafe extern "C" fn export_method_cursor_reset(arg0: *mut u8,) {
      $($path_to_types)*::_export_method_cursor_reset_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.complete"]
    unsafe extern "C" fn export_method_cursor_complete(arg0: *mut u8,) {
      $($path_to_types)*::_export_method_cursor_complete_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.is-completed"]
    unsafe extern "C" fn export_method_cursor_is_completed(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_is_completed_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.clone"]
    unsafe extern "C" fn export_method_cursor_clone(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_clone_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.spawn"]
    unsafe extern "C" fn export_method_cursor_spawn(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_spawn_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.node"]
    unsafe extern "C" fn export_method_cursor_node(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_cursor_node_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.label"]
    unsafe extern "C" fn export_method_cursor_label(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_cursor_label_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.text-offset"]
    unsafe extern "C" fn export_method_cursor_text_offset(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_cursor_text_offset_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.text-range"]
    unsafe extern "C" fn export_method_cursor_text_range(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_cursor_text_range_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.depth"]
    unsafe extern "C" fn export_method_cursor_depth(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_depth_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.ancestors"]
    unsafe extern "C" fn export_method_cursor_ancestors(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_cursor_ancestors_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/cursor@0.0.0#[method]cursor.ancestors"]
    unsafe extern "C" fn _post_return_method_cursor_ancestors(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_cursor_ancestors::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next"]
    unsafe extern "C" fn export_method_cursor_go_to_next(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-non-descendent"]
    unsafe extern "C" fn export_method_cursor_go_to_next_non_descendent(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_non_descendent_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-previous"]
    unsafe extern "C" fn export_method_cursor_go_to_previous(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_previous_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-parent"]
    unsafe extern "C" fn export_method_cursor_go_to_parent(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_parent_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-first-child"]
    unsafe extern "C" fn export_method_cursor_go_to_first_child(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_first_child_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-last-child"]
    unsafe extern "C" fn export_method_cursor_go_to_last_child(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_last_child_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-nth-child"]
    unsafe extern "C" fn export_method_cursor_go_to_nth_child(arg0: *mut u8,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_nth_child_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0, arg1)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-sibling"]
    unsafe extern "C" fn export_method_cursor_go_to_next_sibling(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_sibling_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-previous-sibling"]
    unsafe extern "C" fn export_method_cursor_go_to_previous_sibling(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_previous_sibling_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-terminal"]
    unsafe extern "C" fn export_method_cursor_go_to_next_terminal(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_terminal_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-terminal-with-kind"]
    unsafe extern "C" fn export_method_cursor_go_to_next_terminal_with_kind(arg0: *mut u8,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_terminal_with_kind_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0, arg1)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-terminal-with-kinds"]
    unsafe extern "C" fn export_method_cursor_go_to_next_terminal_with_kinds(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_terminal_with_kinds_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0, arg1, arg2)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-nonterminal"]
    unsafe extern "C" fn export_method_cursor_go_to_next_nonterminal(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_nonterminal_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-nonterminal-with-kind"]
    unsafe extern "C" fn export_method_cursor_go_to_next_nonterminal_with_kind(arg0: *mut u8,arg1: i32,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_nonterminal_with_kind_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0, arg1)
    }
    #[export_name = "nomic-foundation:slang/cursor@0.0.0#[method]cursor.go-to-next-nonterminal-with-kinds"]
    unsafe extern "C" fn export_method_cursor_go_to_next_nonterminal_with_kinds(arg0: *mut u8,arg1: *mut u8,arg2: usize,) -> i32 {
      $($path_to_types)*::_export_method_cursor_go_to_next_nonterminal_with_kinds_cabi::<<$ty as $($path_to_types)*::Guest>::Cursor>(arg0, arg1, arg2)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/cursor@0.0.0#[dtor]cursor"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Cursor::dtor::<
        <$ty as $($path_to_types)*::Guest>::Cursor
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_cursor_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 32]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod diagnostic {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                #[repr(u8)]
                #[derive(Clone, Copy, Eq, PartialEq)]
                pub enum Severity {
                    Error,
                    Warning,
                    Information,
                    Hint,
                }
                impl ::core::fmt::Debug for Severity {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            Severity::Error => f.debug_tuple("Severity::Error").finish(),
                            Severity::Warning => f.debug_tuple("Severity::Warning").finish(),
                            Severity::Information => {
                                f.debug_tuple("Severity::Information").finish()
                            }
                            Severity::Hint => f.debug_tuple("Severity::Hint").finish(),
                        }
                    }
                }

                impl Severity {
                    #[doc(hidden)]
                    pub unsafe fn _lift(val: u8) -> Severity {
                        if !cfg!(debug_assertions) {
                            return ::core::mem::transmute(val);
                        }

                        match val {
                            0 => Severity::Error,
                            1 => Severity::Warning,
                            2 => Severity::Information,
                            3 => Severity::Hint,

                            _ => panic!("invalid enum discriminant"),
                        }
                    }
                }

                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_diagnostic_0_0_0_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_diagnostic_0_0_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod parse_error {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Severity = super::super::super::super::exports::nomic_foundation::slang::diagnostic::Severity;
                pub type TextRange = super::super::super::super::exports::nomic_foundation::slang::text_index::TextRange;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ParseError {
                    handle: _rt::Resource<ParseError>,
                }

                type _ParseErrorRep<T> = Option<T>;

                impl ParseError {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ParseError`.
                    pub fn new<T: GuestParseError>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ParseErrorRep<T> = Some(val);
                        let ptr: *mut _ParseErrorRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestParseError>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestParseError>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestParseError>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestParseError` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ParseErrorRep<T>);
                    }

                    fn as_ptr<T: GuestParseError>(&self) -> *mut _ParseErrorRep<T> {
                        ParseError::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`ParseError`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ParseErrorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ParseError>,
                }

                impl<'a> ParseErrorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestParseError>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ParseErrorRep<T> {
                        ParseError::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for ParseError {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-error@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]parse-error"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_error_severity_cabi<T: GuestParseError>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::severity(ParseErrorBorrow::lift(arg0 as u32 as usize).get());
                    result0.clone() as i32
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_error_text_range_cabi<T: GuestParseError>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::text_range(ParseErrorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextRange{ start:start2, end:end2, } = result0;
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf83, utf16:utf163, line:line3, column:column3, } = start2;
                    *ptr1.add(0).cast::<i32>() = _rt::as_i32(utf83);
                    *ptr1.add(4).cast::<i32>() = _rt::as_i32(utf163);
                    *ptr1.add(8).cast::<i32>() = _rt::as_i32(line3);
                    *ptr1.add(12).cast::<i32>() = _rt::as_i32(column3);
                    let super::super::super::super::exports::nomic_foundation::slang::text_index::TextIndex{ utf8:utf84, utf16:utf164, line:line4, column:column4, } = end2;
                    *ptr1.add(16).cast::<i32>() = _rt::as_i32(utf84);
                    *ptr1.add(20).cast::<i32>() = _rt::as_i32(utf164);
                    *ptr1.add(24).cast::<i32>() = _rt::as_i32(line4);
                    *ptr1.add(28).cast::<i32>() = _rt::as_i32(column4);
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_error_message_cabi<T: GuestParseError>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::message(ParseErrorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_parse_error_message<T: GuestParseError>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    type ParseError: GuestParseError;
                }
                pub trait GuestParseError: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-error@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]parse-error"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-error@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]parse-error"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn severity(&self) -> Severity;
                    fn text_range(&self) -> TextRange;
                    fn message(&self) -> _rt::String;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_parse_error_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/parse-error@0.0.0#[method]parse-error.severity"]
    unsafe extern "C" fn export_method_parse_error_severity(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_parse_error_severity_cabi::<<$ty as $($path_to_types)*::Guest>::ParseError>(arg0)
    }
    #[export_name = "nomic-foundation:slang/parse-error@0.0.0#[method]parse-error.text-range"]
    unsafe extern "C" fn export_method_parse_error_text_range(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_parse_error_text_range_cabi::<<$ty as $($path_to_types)*::Guest>::ParseError>(arg0)
    }
    #[export_name = "nomic-foundation:slang/parse-error@0.0.0#[method]parse-error.message"]
    unsafe extern "C" fn export_method_parse_error_message(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_parse_error_message_cabi::<<$ty as $($path_to_types)*::Guest>::ParseError>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/parse-error@0.0.0#[method]parse-error.message"]
    unsafe extern "C" fn _post_return_method_parse_error_message(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_parse_error_message::<<$ty as $($path_to_types)*::Guest>::ParseError>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/parse-error@0.0.0#[dtor]parse-error"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::ParseError::dtor::<
        <$ty as $($path_to_types)*::Guest>::ParseError
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_parse_error_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 32]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 32]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod parse_output {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Node =
                    super::super::super::super::exports::nomic_foundation::slang::cst::Node;
                pub type Cursor =
                    super::super::super::super::exports::nomic_foundation::slang::cursor::Cursor;
                pub type CursorBorrow<'a> = super::super::super::super::exports::nomic_foundation::slang::cursor::CursorBorrow<'a>;
                pub type ParseError = super::super::super::super::exports::nomic_foundation::slang::parse_error::ParseError;
                pub type ParseErrorBorrow<'a> = super::super::super::super::exports::nomic_foundation::slang::parse_error::ParseErrorBorrow<'a>;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ParseOutput {
                    handle: _rt::Resource<ParseOutput>,
                }

                type _ParseOutputRep<T> = Option<T>;

                impl ParseOutput {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `ParseOutput`.
                    pub fn new<T: GuestParseOutput>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _ParseOutputRep<T> = Some(val);
                        let ptr: *mut _ParseOutputRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestParseOutput>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestParseOutput>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestParseOutput>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestParseOutput` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _ParseOutputRep<T>);
                    }

                    fn as_ptr<T: GuestParseOutput>(&self) -> *mut _ParseOutputRep<T> {
                        ParseOutput::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`ParseOutput`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct ParseOutputBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a ParseOutput>,
                }

                impl<'a> ParseOutputBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestParseOutput>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _ParseOutputRep<T> {
                        ParseOutput::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for ParseOutput {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-output@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]parse-output"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_output_tree_cabi<T: GuestParseOutput>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::tree(ParseOutputBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    use super::super::super::super::exports::nomic_foundation::slang::cst::Node as V2;
                    match result0 {
                        V2::Nonterminal(e) => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        V2::Terminal(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_output_errors_cabi<T: GuestParseOutput>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::errors(ParseOutputBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = result0;
                    let len2 = vec2.len();
                    let layout2 = _rt::alloc::Layout::from_size_align_unchecked(vec2.len() * 4, 4);
                    let result2 = if layout2.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout2).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout2);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec2.into_iter().enumerate() {
                        let base = result2.add(i * 4);
                        {
                            *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = result2;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_parse_output_errors<T: GuestParseOutput>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    let base2 = l0;
                    let len2 = l1;
                    _rt::cabi_dealloc(base2, len2 * 4, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_output_is_valid_cabi<T: GuestParseOutput>(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::is_valid(ParseOutputBorrow::lift(arg0 as u32 as usize).get());
                    match result0 {
                        true => 1,
                        false => 0,
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_parse_output_create_tree_cursor_cabi<
                    T: GuestParseOutput,
                >(
                    arg0: *mut u8,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::create_tree_cursor(ParseOutputBorrow::lift(arg0 as u32 as usize).get());
                    (result0).take_handle() as i32
                }
                pub trait Guest {
                    type ParseOutput: GuestParseOutput;
                }
                pub trait GuestParseOutput: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-output@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]parse-output"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/parse-output@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]parse-output"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn tree(&self) -> Node;
                    fn errors(&self) -> _rt::Vec<ParseError>;
                    fn is_valid(&self) -> bool;
                    fn create_tree_cursor(&self) -> Cursor;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_parse_output_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/parse-output@0.0.0#[method]parse-output.tree"]
    unsafe extern "C" fn export_method_parse_output_tree(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_parse_output_tree_cabi::<<$ty as $($path_to_types)*::Guest>::ParseOutput>(arg0)
    }
    #[export_name = "nomic-foundation:slang/parse-output@0.0.0#[method]parse-output.errors"]
    unsafe extern "C" fn export_method_parse_output_errors(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_parse_output_errors_cabi::<<$ty as $($path_to_types)*::Guest>::ParseOutput>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/parse-output@0.0.0#[method]parse-output.errors"]
    unsafe extern "C" fn _post_return_method_parse_output_errors(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_parse_output_errors::<<$ty as $($path_to_types)*::Guest>::ParseOutput>(arg0)
    }
    #[export_name = "nomic-foundation:slang/parse-output@0.0.0#[method]parse-output.is-valid"]
    unsafe extern "C" fn export_method_parse_output_is_valid(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_parse_output_is_valid_cabi::<<$ty as $($path_to_types)*::Guest>::ParseOutput>(arg0)
    }
    #[export_name = "nomic-foundation:slang/parse-output@0.0.0#[method]parse-output.create-tree-cursor"]
    unsafe extern "C" fn export_method_parse_output_create_tree_cursor(arg0: *mut u8,) -> i32 {
      $($path_to_types)*::_export_method_parse_output_create_tree_cursor_cabi::<<$ty as $($path_to_types)*::Guest>::ParseOutput>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/parse-output@0.0.0#[dtor]parse-output"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::ParseOutput::dtor::<
        <$ty as $($path_to_types)*::Guest>::ParseOutput
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_parse_output_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod language {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type NonterminalKind = super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind;
                pub type ParseOutput = super::super::super::super::exports::nomic_foundation::slang::parse_output::ParseOutput;
                pub type ParseOutputBorrow<'a> = super::super::super::super::exports::nomic_foundation::slang::parse_output::ParseOutputBorrow<'a>;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Language {
                    handle: _rt::Resource<Language>,
                }

                type _LanguageRep<T> = Option<T>;

                impl Language {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Language`.
                    pub fn new<T: GuestLanguage>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _LanguageRep<T> = Some(val);
                        let ptr: *mut _LanguageRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestLanguage>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestLanguage>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestLanguage>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestLanguage` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _LanguageRep<T>);
                    }

                    fn as_ptr<T: GuestLanguage>(&self) -> *mut _LanguageRep<T> {
                        Language::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Language`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct LanguageBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Language>,
                }

                impl<'a> LanguageBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestLanguage>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _LanguageRep<T> {
                        Language::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Language {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/language@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]language"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_language_supported_versions_cabi<T: GuestLanguage>(
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::supported_versions();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec3 = result0;
                    let len3 = vec3.len();
                    let layout3 = _rt::alloc::Layout::from_size_align_unchecked(vec3.len() * 8, 4);
                    let result3 = if layout3.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout3).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout3);
                        }
                        ptr
                    } else {
                        {
                            ::core::ptr::null_mut()
                        }
                    };
                    for (i, e) in vec3.into_iter().enumerate() {
                        let base = result3.add(i * 8);
                        {
                            let vec2 = (e.into_bytes()).into_boxed_slice();
                            let ptr2 = vec2.as_ptr().cast::<u8>();
                            let len2 = vec2.len();
                            ::core::mem::forget(vec2);
                            *base.add(4).cast::<usize>() = len2;
                            *base.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len3;
                    *ptr1.add(0).cast::<*mut u8>() = result3;
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_language_supported_versions<T: GuestLanguage>(
                    arg0: *mut u8,
                ) {
                    let l2 = *arg0.add(0).cast::<*mut u8>();
                    let l3 = *arg0.add(4).cast::<usize>();
                    let base4 = l2;
                    let len4 = l3;
                    for i in 0..len4 {
                        let base = base4.add(i * 8);
                        {
                            let l0 = *base.add(0).cast::<*mut u8>();
                            let l1 = *base.add(4).cast::<usize>();
                            _rt::cabi_dealloc(l0, l1, 1);
                        }
                    }
                    _rt::cabi_dealloc(base4, len4 * 8, 4);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_language_new_cabi<T: GuestLanguage>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::new(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let vec3 = (e.into_bytes()).into_boxed_slice();
                            let ptr3 = vec3.as_ptr().cast::<u8>();
                            let len3 = vec3.len();
                            ::core::mem::forget(vec3);
                            *ptr2.add(8).cast::<usize>() = len3;
                            *ptr2.add(4).cast::<*mut u8>() = ptr3.cast_mut();
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_language_new<T: GuestLanguage>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_language_version_cabi<T: GuestLanguage>(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::version(LanguageBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec2 = (result0.into_bytes()).into_boxed_slice();
                    let ptr2 = vec2.as_ptr().cast::<u8>();
                    let len2 = vec2.len();
                    ::core::mem::forget(vec2);
                    *ptr1.add(4).cast::<usize>() = len2;
                    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_language_version<T: GuestLanguage>(
                    arg0: *mut u8,
                ) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_language_parse_cabi<T: GuestLanguage>(
                    arg0: *mut u8,
                    arg1: i32,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> i32 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg3;
                    let bytes0 = _rt::Vec::from_raw_parts(arg2.cast(), len0, len0);
                    let result1 = T::parse(LanguageBorrow::lift(arg0 as u32 as usize).get(), super::super::super::super::exports::nomic_foundation::slang::kinds::NonterminalKind::_lift(arg1 as u8), _rt::string_lift(bytes0));
                    (result1).take_handle() as i32
                }
                pub trait Guest {
                    type Language: GuestLanguage;
                }
                pub trait GuestLanguage: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/language@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]language"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/language@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]language"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn supported_versions() -> _rt::Vec<_rt::String>;
                    fn new(version: _rt::String) -> Result<Language, _rt::String>;
                    fn version(&self) -> _rt::String;
                    fn parse(&self, kind: NonterminalKind, input: _rt::String) -> ParseOutput;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_language_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/language@0.0.0#[static]language.supported-versions"]
    unsafe extern "C" fn export_static_language_supported_versions() -> *mut u8 {
      $($path_to_types)*::_export_static_language_supported_versions_cabi::<<$ty as $($path_to_types)*::Guest>::Language>()
    }
    #[export_name = "cabi_post_nomic-foundation:slang/language@0.0.0#[static]language.supported-versions"]
    unsafe extern "C" fn _post_return_static_language_supported_versions(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_static_language_supported_versions::<<$ty as $($path_to_types)*::Guest>::Language>(arg0)
    }
    #[export_name = "nomic-foundation:slang/language@0.0.0#[static]language.new"]
    unsafe extern "C" fn export_static_language_new(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_static_language_new_cabi::<<$ty as $($path_to_types)*::Guest>::Language>(arg0, arg1)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/language@0.0.0#[static]language.new"]
    unsafe extern "C" fn _post_return_static_language_new(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_static_language_new::<<$ty as $($path_to_types)*::Guest>::Language>(arg0)
    }
    #[export_name = "nomic-foundation:slang/language@0.0.0#[method]language.version"]
    unsafe extern "C" fn export_method_language_version(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_language_version_cabi::<<$ty as $($path_to_types)*::Guest>::Language>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/language@0.0.0#[method]language.version"]
    unsafe extern "C" fn _post_return_method_language_version(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_language_version::<<$ty as $($path_to_types)*::Guest>::Language>(arg0)
    }
    #[export_name = "nomic-foundation:slang/language@0.0.0#[method]language.parse"]
    unsafe extern "C" fn export_method_language_parse(arg0: *mut u8,arg1: i32,arg2: *mut u8,arg3: usize,) -> i32 {
      $($path_to_types)*::_export_method_language_parse_cabi::<<$ty as $($path_to_types)*::Guest>::Language>(arg0, arg1, arg2, arg3)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/language@0.0.0#[dtor]language"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Language::dtor::<
        <$ty as $($path_to_types)*::Guest>::Language
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_language_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 12]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 12]);
            }

            #[allow(dead_code, clippy::all)]
            pub mod query {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type Cursor =
                    super::super::super::super::exports::nomic_foundation::slang::cursor::Cursor;
                pub type CursorBorrow<'a> = super::super::super::super::exports::nomic_foundation::slang::cursor::CursorBorrow<'a>;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Query {
                    handle: _rt::Resource<Query>,
                }

                type _QueryRep<T> = Option<T>;

                impl Query {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `Query`.
                    pub fn new<T: GuestQuery>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _QueryRep<T> = Some(val);
                        let ptr: *mut _QueryRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestQuery>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestQuery>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestQuery>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestQuery` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _QueryRep<T>);
                    }

                    fn as_ptr<T: GuestQuery>(&self) -> *mut _QueryRep<T> {
                        Query::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Query`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct QueryBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Query>,
                }

                impl<'a> QueryBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestQuery>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _QueryRep<T> {
                        Query::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Query {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]query"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[derive(Clone)]
                pub struct QueryError {
                    pub message: _rt::String,
                    pub row: u32,
                    pub column: u32,
                }
                impl ::core::fmt::Debug for QueryError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("QueryError")
                            .field("message", &self.message)
                            .field("row", &self.row)
                            .field("column", &self.column)
                            .finish()
                    }
                }
                impl ::core::fmt::Display for QueryError {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        write!(f, "{:?}", self)
                    }
                }
                impl std::error::Error for QueryError {}
                pub struct QueryMatch {
                    pub query_number: u32,
                    pub captures: _rt::Vec<(_rt::String, _rt::Vec<Cursor>)>,
                }
                impl ::core::fmt::Debug for QueryMatch {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("QueryMatch")
                            .field("query-number", &self.query_number)
                            .field("captures", &self.captures)
                            .finish()
                    }
                }

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct QueryMatchIterator {
                    handle: _rt::Resource<QueryMatchIterator>,
                }

                type _QueryMatchIteratorRep<T> = Option<T>;

                impl QueryMatchIterator {
                    /// Creates a new resource from the specified representation.
                    ///
                    /// This function will create a new resource handle by moving `val` onto
                    /// the heap and then passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as `QueryMatchIterator`.
                    pub fn new<T: GuestQueryMatchIterator>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _QueryMatchIteratorRep<T> = Some(val);
                        let ptr: *mut _QueryMatchIteratorRep<T> =
                            _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this resource.
                    pub fn get<T: GuestQueryMatchIterator>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which represents this
                    /// resource.
                    pub fn get_mut<T: GuestQueryMatchIterator>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestQueryMatchIterator>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self {
                            handle: _rt::Resource::from_handle(handle),
                        }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestQueryMatchIterator` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(
                                    ty == id,
                                    "cannot use two types with this resource type"
                                ),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _QueryMatchIteratorRep<T>);
                    }

                    fn as_ptr<T: GuestQueryMatchIterator>(&self) -> *mut _QueryMatchIteratorRep<T> {
                        QueryMatchIterator::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`QueryMatchIterator`] which represents a borrowed value
                /// with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct QueryMatchIteratorBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a QueryMatchIterator>,
                }

                impl<'a> QueryMatchIteratorBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self {
                            rep: rep as *mut u8,
                            _marker: core::marker::PhantomData,
                        }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestQueryMatchIterator>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _QueryMatchIteratorRep<T> {
                        QueryMatchIterator::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for QueryMatchIterator {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-drop]query-match-iterator"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_static_query_parse_cabi<T: GuestQuery>(
                    arg0: *mut u8,
                    arg1: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let result1 = T::parse(_rt::string_lift(bytes0));
                    let ptr2 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result1 {
                        Ok(e) => {
                            *ptr2.add(0).cast::<u8>() = (0i32) as u8;
                            *ptr2.add(4).cast::<i32>() = (e).take_handle() as i32;
                        }
                        Err(e) => {
                            *ptr2.add(0).cast::<u8>() = (1i32) as u8;
                            let QueryError {
                                message: message3,
                                row: row3,
                                column: column3,
                            } = e;
                            let vec4 = (message3.into_bytes()).into_boxed_slice();
                            let ptr4 = vec4.as_ptr().cast::<u8>();
                            let len4 = vec4.len();
                            ::core::mem::forget(vec4);
                            *ptr2.add(8).cast::<usize>() = len4;
                            *ptr2.add(4).cast::<*mut u8>() = ptr4.cast_mut();
                            *ptr2.add(12).cast::<i32>() = _rt::as_i32(row3);
                            *ptr2.add(16).cast::<i32>() = _rt::as_i32(column3);
                        }
                    };
                    ptr2
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_static_query_parse<T: GuestQuery>(arg0: *mut u8) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l1 = *arg0.add(4).cast::<*mut u8>();
                            let l2 = *arg0.add(8).cast::<usize>();
                            _rt::cabi_dealloc(l1, l2, 1);
                        }
                    }
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_method_query_match_iterator_next_cabi<
                    T: GuestQueryMatchIterator,
                >(
                    arg0: *mut u8,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 =
                        T::next(QueryMatchIteratorBorrow::lift(arg0 as u32 as usize).get());
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    match result0 {
                        Some(e) => {
                            *ptr1.add(0).cast::<u8>() = (1i32) as u8;
                            let QueryMatch {
                                query_number: query_number2,
                                captures: captures2,
                            } = e;
                            *ptr1.add(4).cast::<i32>() = _rt::as_i32(query_number2);
                            let vec6 = captures2;
                            let len6 = vec6.len();
                            let layout6 =
                                _rt::alloc::Layout::from_size_align_unchecked(vec6.len() * 16, 4);
                            let result6 = if layout6.size() != 0 {
                                let ptr = _rt::alloc::alloc(layout6).cast::<u8>();
                                if ptr.is_null() {
                                    _rt::alloc::handle_alloc_error(layout6);
                                }
                                ptr
                            } else {
                                {
                                    ::core::ptr::null_mut()
                                }
                            };
                            for (i, e) in vec6.into_iter().enumerate() {
                                let base = result6.add(i * 16);
                                {
                                    let (t3_0, t3_1) = e;
                                    let vec4 = (t3_0.into_bytes()).into_boxed_slice();
                                    let ptr4 = vec4.as_ptr().cast::<u8>();
                                    let len4 = vec4.len();
                                    ::core::mem::forget(vec4);
                                    *base.add(4).cast::<usize>() = len4;
                                    *base.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                                    let vec5 = t3_1;
                                    let len5 = vec5.len();
                                    let layout5 = _rt::alloc::Layout::from_size_align_unchecked(
                                        vec5.len() * 4,
                                        4,
                                    );
                                    let result5 = if layout5.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout5).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout5);
                                        }
                                        ptr
                                    } else {
                                        {
                                            ::core::ptr::null_mut()
                                        }
                                    };
                                    for (i, e) in vec5.into_iter().enumerate() {
                                        let base = result5.add(i * 4);
                                        {
                                            *base.add(0).cast::<i32>() = (e).take_handle() as i32;
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len5;
                                    *base.add(8).cast::<*mut u8>() = result5;
                                }
                            }
                            *ptr1.add(12).cast::<usize>() = len6;
                            *ptr1.add(8).cast::<*mut u8>() = result6;
                        }
                        None => {
                            *ptr1.add(0).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_method_query_match_iterator_next<
                    T: GuestQueryMatchIterator,
                >(
                    arg0: *mut u8,
                ) {
                    let l0 = i32::from(*arg0.add(0).cast::<u8>());
                    match l0 {
                        0 => (),
                        _ => {
                            let l6 = *arg0.add(8).cast::<*mut u8>();
                            let l7 = *arg0.add(12).cast::<usize>();
                            let base8 = l6;
                            let len8 = l7;
                            for i in 0..len8 {
                                let base = base8.add(i * 16);
                                {
                                    let l1 = *base.add(0).cast::<*mut u8>();
                                    let l2 = *base.add(4).cast::<usize>();
                                    _rt::cabi_dealloc(l1, l2, 1);
                                    let l3 = *base.add(8).cast::<*mut u8>();
                                    let l4 = *base.add(12).cast::<usize>();
                                    let base5 = l3;
                                    let len5 = l4;
                                    _rt::cabi_dealloc(base5, len5 * 4, 4);
                                }
                            }
                            _rt::cabi_dealloc(base8, len8 * 16, 4);
                        }
                    }
                }
                pub trait Guest {
                    type Query: GuestQuery;
                    type QueryMatchIterator: GuestQueryMatchIterator;
                }
                pub trait GuestQuery: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]query"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]query"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn parse(text: _rt::String) -> Result<Query, QueryError>;
                }
                pub trait GuestQueryMatchIterator: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-new]query-match-iterator"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                    where
                        Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(
                                wasm_import_module = "[export]nomic-foundation:slang/query@0.0.0"
                            )]
                            extern "C" {
                                #[link_name = "[resource-rep]query-match-iterator"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }

                    fn next(&self) -> Option<QueryMatch>;
                }
                #[doc(hidden)]
                #[macro_export]
                macro_rules! __export_nomic_foundation_slang_query_0_0_0_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "nomic-foundation:slang/query@0.0.0#[static]query.parse"]
    unsafe extern "C" fn export_static_query_parse(arg0: *mut u8,arg1: usize,) -> *mut u8 {
      $($path_to_types)*::_export_static_query_parse_cabi::<<$ty as $($path_to_types)*::Guest>::Query>(arg0, arg1)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/query@0.0.0#[static]query.parse"]
    unsafe extern "C" fn _post_return_static_query_parse(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_static_query_parse::<<$ty as $($path_to_types)*::Guest>::Query>(arg0)
    }
    #[export_name = "nomic-foundation:slang/query@0.0.0#[method]query-match-iterator.next"]
    unsafe extern "C" fn export_method_query_match_iterator_next(arg0: *mut u8,) -> *mut u8 {
      $($path_to_types)*::_export_method_query_match_iterator_next_cabi::<<$ty as $($path_to_types)*::Guest>::QueryMatchIterator>(arg0)
    }
    #[export_name = "cabi_post_nomic-foundation:slang/query@0.0.0#[method]query-match-iterator.next"]
    unsafe extern "C" fn _post_return_method_query_match_iterator_next(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_method_query_match_iterator_next::<<$ty as $($path_to_types)*::Guest>::QueryMatchIterator>(arg0)
    }

    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/query@0.0.0#[dtor]query"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::Query::dtor::<
        <$ty as $($path_to_types)*::Guest>::Query
        >(rep)
      }
    };


    const _: () = {
      #[doc(hidden)]
      #[export_name = "nomic-foundation:slang/query@0.0.0#[dtor]query-match-iterator"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn dtor(rep: *mut u8) {
        $($path_to_types)*::QueryMatchIterator::dtor::<
        <$ty as $($path_to_types)*::Guest>::QueryMatchIterator
        >(rep)
      }
    };

  };);
}
                #[doc(hidden)]
                pub use __export_nomic_foundation_slang_query_0_0_0_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 20]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 20]);
            }
        }
    }
}
mod _rt {

    use core::sync::atomic::AtomicU32;
    use core::sync::atomic::Ordering::Relaxed;
    use core::{fmt, marker};

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component model
    /// intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref` implementations
    /// to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability to
    /// drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    #[allow(clippy::missing_safety_doc)]
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self {
                handle: AtomicU32::new(handle),
                _marker: marker::PhantomData,
            }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>` by
        /// ownership. The code generator does not enable that in all situations,
        /// unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function might
        /// take `Resource<T>` as an argument but then call `take_handle` on a
        /// reference to that argument. In that sense the dynamic nature of
        /// `take_handle` should only be exposed internally to generated code, not
        /// to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource")
                .field("handle", &self.handle)
                .finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }
    pub use alloc_crate::boxed::Box;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }
    pub use alloc_crate::alloc;
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    pub use alloc_crate::string::String;
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]
#[macro_export]
macro_rules! __export_slang_impl {
  ($ty:ident) => ($crate::wit::slang::export!($ty with_types_in $crate::wit::slang););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::nomic_foundation::slang::kinds::__export_nomic_foundation_slang_kinds_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::kinds);
  $($path_to_types_root)*::exports::nomic_foundation::slang::text_index::__export_nomic_foundation_slang_text_index_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::text_index);
  $($path_to_types_root)*::exports::nomic_foundation::slang::cst::__export_nomic_foundation_slang_cst_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::cst);
  $($path_to_types_root)*::exports::nomic_foundation::slang::cursor::__export_nomic_foundation_slang_cursor_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::cursor);
  $($path_to_types_root)*::exports::nomic_foundation::slang::diagnostic::__export_nomic_foundation_slang_diagnostic_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::diagnostic);
  $($path_to_types_root)*::exports::nomic_foundation::slang::parse_error::__export_nomic_foundation_slang_parse_error_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::parse_error);
  $($path_to_types_root)*::exports::nomic_foundation::slang::parse_output::__export_nomic_foundation_slang_parse_output_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::parse_output);
  $($path_to_types_root)*::exports::nomic_foundation::slang::language::__export_nomic_foundation_slang_language_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::language);
  $($path_to_types_root)*::exports::nomic_foundation::slang::query::__export_nomic_foundation_slang_query_0_0_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::nomic_foundation::slang::query);
  const _: () = {

    #[cfg(target_arch = "wasm32")]
    #[link_section = "component-type:wit-bindgen:0.26.0:slang:imports and exports"]
    #[doc(hidden)]
    pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 3833] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xfd\x1c\x01A\x02\x01\
A\x1d\x01B\x06\x01m\x03\x05stub1\x05stub2\x05stub3\x04\0\x10nonterminal-kind\x03\
\0\0\x01m\x0b\x04item\x07variant\x09separator\x07operand\x0cleft-operand\x0drigh\
t-operand\x0eleading-trivia\x0ftrailing-trivia\x05stub1\x05stub2\x05stub3\x04\0\x0a\
edge-label\x03\0\x02\x01m\x04\x07skipped\x05stub1\x05stub2\x05stub3\x04\0\x0dter\
minal-kind\x03\0\x04\x04\x01\"nomic-foundation:slang/kinds@0.0.0\x05\0\x01B\x04\x01\
r\x04\x04utf8y\x05utf16y\x04liney\x06columny\x04\0\x0atext-index\x03\0\0\x01r\x02\
\x05start\x01\x03end\x01\x04\0\x0atext-range\x03\0\x02\x04\x01'nomic-foundation:\
slang/text-index@0.0.0\x05\x01\x02\x03\0\0\x10nonterminal-kind\x02\x03\0\0\x0dte\
rminal-kind\x02\x03\0\x01\x0atext-index\x01B\x1d\x02\x03\x02\x01\x02\x04\0\x10no\
nterminal-kind\x03\0\0\x02\x03\x02\x01\x03\x04\0\x0dterminal-kind\x03\0\x02\x02\x03\
\x02\x01\x04\x04\0\x0atext-index\x03\0\x04\x04\0\x10nonterminal-node\x03\x01\x04\
\0\x0dterminal-node\x03\x01\x01i\x06\x01i\x07\x01q\x02\x0bnonterminal\x01\x08\0\x08\
terminal\x01\x09\0\x04\0\x04node\x03\0\x0a\x01h\x06\x01@\x01\x04self\x0c\0\x01\x04\
\0\x1d[method]nonterminal-node.kind\x01\x0d\x01@\x01\x04self\x0c\0\x05\x04\0![me\
thod]nonterminal-node.text-len\x01\x0e\x01p\x0b\x01@\x01\x04self\x0c\0\x0f\x04\0\
![method]nonterminal-node.children\x01\x10\x01@\x01\x04self\x0c\0s\x04\0\x20[met\
hod]nonterminal-node.unparse\x01\x11\x01h\x07\x01@\x01\x04self\x12\0\x03\x04\0\x1a\
[method]terminal-node.kind\x01\x13\x01@\x01\x04self\x12\0\x05\x04\0\x1e[method]t\
erminal-node.text-len\x01\x14\x01@\x01\x04self\x12\0s\x04\0\x1a[method]terminal-\
node.text\x01\x15\x04\x01\x20nomic-foundation:slang/cst@0.0.0\x05\x05\x02\x03\0\x02\
\x04node\x02\x03\0\x02\x10nonterminal-node\x02\x03\0\0\x0aedge-label\x02\x03\0\x01\
\x0atext-range\x01B>\x02\x03\x02\x01\x06\x04\0\x04node\x03\0\0\x02\x03\x02\x01\x07\
\x04\0\x10nonterminal-node\x03\0\x02\x02\x03\x02\x01\x08\x04\0\x0aedge-label\x03\
\0\x04\x02\x03\x02\x01\x02\x04\0\x10nonterminal-kind\x03\0\x06\x02\x03\x02\x01\x03\
\x04\0\x0dterminal-kind\x03\0\x08\x02\x03\x02\x01\x04\x04\0\x0atext-index\x03\0\x0a\
\x02\x03\x02\x01\x09\x04\0\x0atext-range\x03\0\x0c\x04\0\x06cursor\x03\x01\x01h\x0e\
\x01@\x01\x04self\x0f\x01\0\x04\0\x14[method]cursor.reset\x01\x10\x04\0\x17[meth\
od]cursor.complete\x01\x10\x01@\x01\x04self\x0f\0\x7f\x04\0\x1b[method]cursor.is\
-completed\x01\x11\x01i\x0e\x01@\x01\x04self\x0f\0\x12\x04\0\x14[method]cursor.c\
lone\x01\x13\x04\0\x14[method]cursor.spawn\x01\x13\x01@\x01\x04self\x0f\0\x01\x04\
\0\x13[method]cursor.node\x01\x14\x01k\x05\x01@\x01\x04self\x0f\0\x15\x04\0\x14[\
method]cursor.label\x01\x16\x01@\x01\x04self\x0f\0\x0b\x04\0\x1a[method]cursor.t\
ext-offset\x01\x17\x01@\x01\x04self\x0f\0\x0d\x04\0\x19[method]cursor.text-range\
\x01\x18\x01@\x01\x04self\x0f\0y\x04\0\x14[method]cursor.depth\x01\x19\x01i\x03\x01\
p\x1a\x01@\x01\x04self\x0f\0\x1b\x04\0\x18[method]cursor.ancestors\x01\x1c\x04\0\
\x19[method]cursor.go-to-next\x01\x11\x04\0([method]cursor.go-to-next-non-descen\
dent\x01\x11\x04\0\x1d[method]cursor.go-to-previous\x01\x11\x04\0\x1b[method]cur\
sor.go-to-parent\x01\x11\x04\0\x20[method]cursor.go-to-first-child\x01\x11\x04\0\
\x1f[method]cursor.go-to-last-child\x01\x11\x01@\x02\x04self\x0f\x0cchild-number\
y\0\x7f\x04\0\x1e[method]cursor.go-to-nth-child\x01\x1d\x04\0![method]cursor.go-\
to-next-sibling\x01\x11\x04\0%[method]cursor.go-to-previous-sibling\x01\x11\x04\0\
\"[method]cursor.go-to-next-terminal\x01\x11\x01@\x02\x04self\x0f\x04kind\x09\0\x7f\
\x04\0,[method]cursor.go-to-next-terminal-with-kind\x01\x1e\x01p\x09\x01@\x02\x04\
self\x0f\x05kinds\x1f\0\x7f\x04\0-[method]cursor.go-to-next-terminal-with-kinds\x01\
\x20\x04\0%[method]cursor.go-to-next-nonterminal\x01\x11\x01@\x02\x04self\x0f\x04\
kind\x07\0\x7f\x04\0/[method]cursor.go-to-next-nonterminal-with-kind\x01!\x01p\x07\
\x01@\x02\x04self\x0f\x05kinds\"\0\x7f\x04\00[method]cursor.go-to-next-nontermin\
al-with-kinds\x01#\x04\x01#nomic-foundation:slang/cursor@0.0.0\x05\x0a\x01B\x02\x01\
m\x04\x05error\x07warning\x0binformation\x04hint\x04\0\x08severity\x03\0\0\x04\x01\
'nomic-foundation:slang/diagnostic@0.0.0\x05\x0b\x02\x03\0\x04\x08severity\x01B\x0c\
\x02\x03\x02\x01\x0c\x04\0\x08severity\x03\0\0\x02\x03\x02\x01\x09\x04\0\x0atext\
-range\x03\0\x02\x04\0\x0bparse-error\x03\x01\x01h\x04\x01@\x01\x04self\x05\0\x01\
\x04\0\x1c[method]parse-error.severity\x01\x06\x01@\x01\x04self\x05\0\x03\x04\0\x1e\
[method]parse-error.text-range\x01\x07\x01@\x01\x04self\x05\0s\x04\0\x1b[method]\
parse-error.message\x01\x08\x04\x01(nomic-foundation:slang/parse-error@0.0.0\x05\
\x0d\x02\x03\0\x03\x06cursor\x02\x03\0\x05\x0bparse-error\x01B\x13\x02\x03\x02\x01\
\x06\x04\0\x04node\x03\0\0\x02\x03\x02\x01\x0e\x04\0\x06cursor\x03\0\x02\x02\x03\
\x02\x01\x0f\x04\0\x0bparse-error\x03\0\x04\x04\0\x0cparse-output\x03\x01\x01h\x06\
\x01@\x01\x04self\x07\0\x01\x04\0\x19[method]parse-output.tree\x01\x08\x01i\x05\x01\
p\x09\x01@\x01\x04self\x07\0\x0a\x04\0\x1b[method]parse-output.errors\x01\x0b\x01\
@\x01\x04self\x07\0\x7f\x04\0\x1d[method]parse-output.is-valid\x01\x0c\x01i\x03\x01\
@\x01\x04self\x07\0\x0d\x04\0'[method]parse-output.create-tree-cursor\x01\x0e\x04\
\x01)nomic-foundation:slang/parse-output@0.0.0\x05\x10\x02\x03\0\x06\x0cparse-ou\
tput\x01B\x12\x02\x03\x02\x01\x02\x04\0\x10nonterminal-kind\x03\0\0\x02\x03\x02\x01\
\x11\x04\0\x0cparse-output\x03\0\x02\x04\0\x08language\x03\x01\x01ps\x01@\0\0\x05\
\x04\0#[static]language.supported-versions\x01\x06\x01i\x04\x01j\x01\x07\x01s\x01\
@\x01\x07versions\0\x08\x04\0\x14[static]language.new\x01\x09\x01h\x04\x01@\x01\x04\
self\x0a\0s\x04\0\x18[method]language.version\x01\x0b\x01i\x03\x01@\x03\x04self\x0a\
\x04kind\x01\x05inputs\0\x0c\x04\0\x16[method]language.parse\x01\x0d\x04\x01%nom\
ic-foundation:slang/language@0.0.0\x05\x12\x01B\x14\x02\x03\x02\x01\x0e\x04\0\x06\
cursor\x03\0\0\x04\0\x05query\x03\x01\x01r\x03\x07messages\x03rowy\x06columny\x04\
\0\x0bquery-error\x03\0\x03\x01i\x01\x01p\x05\x01o\x02s\x06\x01p\x07\x01r\x02\x0c\
query-numbery\x08captures\x08\x04\0\x0bquery-match\x03\0\x09\x04\0\x14query-matc\
h-iterator\x03\x01\x01i\x02\x01j\x01\x0c\x01\x04\x01@\x01\x04texts\0\x0d\x04\0\x13\
[static]query.parse\x01\x0e\x01h\x0b\x01k\x0a\x01@\x01\x04self\x0f\0\x10\x04\0![\
method]query-match-iterator.next\x01\x11\x04\x01\"nomic-foundation:slang/query@0\
.0.0\x05\x13\x04\x01\"nomic-foundation:slang/slang@0.0.0\x04\0\x0b\x0b\x01\0\x05\
slang\x03\0\0\0G\x09producers\x01\x0cprocessed-by\x02\x0dwit-component\x070.209.\
1\x10wit-bindgen-rust\x060.26.0";
  };
  )
}
#[doc(inline)]
pub use __export_slang_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.26.0:slang-with-all-of-its-exports-removed:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 232] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07M\x01A\x02\x01A\0\x04\
\x01Bnomic-foundation:slang/slang-with-all-of-its-exports-removed@0.0.0\x04\0\x0b\
+\x01\0%slang-with-all-of-its-exports-removed\x03\0\0\0G\x09producers\x01\x0cpro\
cessed-by\x02\x0dwit-component\x070.209.1\x10wit-bindgen-rust\x060.26.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
