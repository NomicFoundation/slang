interface cst {
    /// Represents different kinds of nonterminal nodes in the syntax tree.
    /// These are nodes that can have child nodes and represent higher-level language constructs.
    enum nonterminal-kind {
        {%- if rendering_in_stubs %}
            /// Generated stub.
            stub1,
            /// Generated stub.
            stub2,
            /// Generated stub.
            stub3,
        {%- else %}
            {%- for variant in model.kinds.nonterminal_kinds %}
                /// Represents a node with kind `{{ variant.id | pascal_case }}`, having the following structure:
                ///
                /// ```ebnf
                {%- for line in variant.documentation | split(pat="\n") %}
                /// {{ line }}
                {%- endfor %}
                /// ```
                {{ variant.id | wit_case }},
            {%- endfor %}
        {%- endif %}
    }

    /// Represents different kinds of terminal nodes in the syntax tree.
    /// These are leaf nodes that represent actual tokens in the source code.
    enum terminal-kind {
        /// This terminal is created when the parser encounters an unexpected part of the input,
        /// and it cannot recognize it as any valid syntax in this position in the grammar.
        unrecognized,
        /// This terminal is created when the parser is expecting a certain terminal, but it cannot find it.
        /// Adding the missing input in this position may allow the parser to produce a valid tree there.
        missing,

        {%- if rendering_in_stubs %}
            /// Generated stub.
            stub1,
            /// Generated stub.
            stub2,
            /// Generated stub.
            stub3,
        {%- else %}
            {%- for variant in model.kinds.terminal_kinds %}
                /// Represents a node with kind `{{ variant.id | pascal_case }}`, having the following structure:
                ///
                /// ```ebnf
                {%- for line in variant.documentation | split(pat="\n") %}
                /// {{ line }}
                {%- endfor %}
                /// ```
                {{ variant.id | wit_case }},
            {%- endfor %}
        {%- endif %}
    }

    //// Useful extension methods for working with terminals and terminal kinds.
    resource terminal-kind-extensions {
        /// Returns `true` if the terminal is an identifier token.
        is-identifier: static func(kind: terminal-kind) -> bool;
        /// Returns `true` if the terminal is a trivia token. i.e. whitespace, comments, etc... 
        is-trivia: static func(kind: terminal-kind) -> bool;
        /// Returns `true` if the terminal is a valid token in the language grammar.
        is-valid: static func(kind: terminal-kind) -> bool;
    }

    /// Represents the different types of relationships between nodes in the syntax tree.
    enum edge-label {
        {%- for label in model.kinds.predefined_labels %}
            /// Represents a child node with the label `{{ label | snake_case }}`.
            {{ label | wit_case }},
        {%- endfor %}

        {%- if rendering_in_stubs %}
            /// Generated stub.
            stub1,
            /// Generated stub.
            stub2,
            /// Generated stub.
            stub3,
        {%- else %}
            {%- for label in model.kinds.labels %}
                /// Represents a child node with the label `{{ label | snake_case }}`.
                {{ label | wit_case }},
            {%- endfor %}
        {%- endif %}
    }

    /// The super type of all nodes in a tree.
    variant node {
        /// A nonterminal node that may contain other children nodes.
        nonterminal(nonterminal-node),
        /// A terminal node that represents a recognized part of the source string.
        terminal(terminal-node)
    }

    /// Represents a non-terminal node in the syntax tree.
    /// These nodes can have child nodes and represent language constructs.
    resource nonterminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this nonterminal node.
        kind: func() -> nonterminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of the current node in pre-order traversal.
        descendants: func() -> cursor-iterator;

        /// Converts the node and its children back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;

        /// Creates a cursor positioned at the given text offset within this node.
        create-cursor: func(text-offset: text-index) -> cursor;
    }

    /// Represents a terminal node in the syntax tree.
    /// These are leaf nodes that represent actual tokens from the source code.
    resource terminal-node {
        /// Returns a unique numerical identifier of the node.
        /// It is only valid for the lifetime of the enclosing tree.
        /// It can change between multiple parses, even for the same source code input.
        id: func() -> u32;
        /// Returns the kind enum of this terminal node.
        kind: func() -> terminal-kind;
        /// Returns the length of the text span this node covers.
        text-length: func() -> text-index;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of this node in pre-order traversal.
        descendants: func() -> cursor-iterator;

        /// Converts the node back to source code text.
        unparse: func() -> string;
        /// Converts the node to a JSON representation for debugging.
        to-json: func() -> string;
    }

    /// Represents a connection between nodes in the syntax tree.
    record edge {
        /// Optional label describing the relationship between nodes.
        label: option<edge-label>,
        /// The target node of this edge.
        node: node,
    }

    /// Provides navigation and traversal capabilities over the syntax tree.
    resource cursor {
        /// Resets the cursor to its initial position.
        reset: func();
        /// Marks the cursor as completed.
        complete: func();
        /// Returns whether the cursor has completed its traversal.
        is-completed: func() -> bool;

        /// Creates a copy of this cursor at its current position with the same ancestors.
        /// The new cursor can be moved independently without affecting the original cursor.
        clone: func() -> cursor;
        /// Creates a copy of this cursor at its current position, but without any ancestors.
        /// This is useful for limiting the scope of a search or query to the sub-tree only, without backtracking to parent nodes.
        /// The new cursor can be moved independently without affecting the original cursor.
        spawn: func() -> cursor;

        /// Returns the current node under the cursor.
        node: func() -> node;
        /// Returns the label of the edge from the parent to the current node, if any.
        label: func() -> option<edge-label>;

        /// Returns the current text offset of the cursor.
        text-offset: func() -> text-index;
        /// Returns the text range covered by the current node.
        text-range: func() -> text-range;

        /// Returns the current depth in the tree (i.e. number of ancestors).
        depth: func() -> u32;

        /// Returns the list of child edges directly connected to this node.
        children: func() -> list<edge>;
        /// Returns an iterator over all descendants of the current node in pre-order traversal.
        descendants: func() -> cursor-iterator;
        /// Returns an iterator over all the remaining nodes in the current tree, moving in pre-order traversal, until the tree is completed.
        remaining-nodes: func() -> cursor-iterator;
        /// Returns an iterator over all ancestors of the current node, starting with the immediate parent, and moving upwards, ending with the root node.
        ancestors: func() -> ancestors-iterator;

        /// Moves to the next node in pre-order traversal.
        go-to-next: func() -> bool;
        /// Moves to the next node that isn't a descendant of the current node.
        go-to-next-non-descendant: func() -> bool;
        /// Moves to the previous node in pre-order traversal.
        go-to-previous: func() -> bool;

        /// Moves up to the parent node.
        go-to-parent: func() -> bool;

        /// Moves to the first child of the current node.
        go-to-first-child: func() -> bool;
        /// Moves to the last child of the current node.
        go-to-last-child: func() -> bool;
        /// Moves to the nth child of the current node.
        go-to-nth-child: func(child-index: u32) -> bool;

        /// Moves to the next sibling node.
        go-to-next-sibling: func() -> bool;
        /// Moves to the previous sibling node.
        go-to-previous-sibling: func() -> bool;

        /// Moves to the next terminal node.
        go-to-next-terminal: func() -> bool;
        /// Moves to the next terminal node of a specific kind.
        go-to-next-terminal-with-kind: func(kind: terminal-kind) -> bool;
        /// Moves to the next terminal node matching any of the given kinds.
        go-to-next-terminal-with-kinds: func(kinds: list<terminal-kind>) -> bool;

        /// Nonterminal navigation methods
        /// Moves to the next nonterminal node.
        go-to-next-nonterminal: func() -> bool;
        /// Moves to the next nonterminal node of a specific kind.
        go-to-next-nonterminal-with-kind: func(kind: nonterminal-kind) -> bool;
        /// Moves to the next nonterminal node matching any of the given kinds.
        go-to-next-nonterminal-with-kinds: func(kinds: list<nonterminal-kind>) -> bool;

        /// Executes the given queries and returns an iterator over the matches.
        query: func(queries: list<borrow<query>>) -> query-match-iterator;
    }

    /// Iterator over all the remaining nodes in the current tree, moving in pre-order traversal, until the tree is completed.
    resource cursor-iterator {
        /// Returns the next edge in the iteration, or `undefined` if there are no more edges.
        next: func() -> option<edge>;
    }

    /// Iterator over all ancestors of the current node, starting with the immediate parent, and moving upwards, ending with the root node.
    resource ancestors-iterator {
        /// Returns the next nonterminal node in the iteration, or `undefined` if there are no more nodes.
        next: func() -> option<nonterminal-node>;
    }

    /// Represents a tree query for pattern matching in the syntax tree.
    resource query {
        /// Parses a query string into a query object.
        /// Throws an error if the query syntax is invalid.
        create: static func(text: string) -> result<query, query-error>;
    }

    /// Represents an error that occurred while parsing a query.
    record query-error {
        /// A human-readable message describing what went wrong.
        message: string,
        /// The text range where the error occurred in the query code.
        text-range: text-range,
    }

    /// Represents a match found by executing queries on a cursor.
    record query-match {
        /// The index of the query that produced this match.
        query-index: u32,
        /// List of captured nodes and their names from the query.
        captures: list<tuple<string, list<cursor>>>,
    }

    /// Iterator over query matches in the syntax tree.
    resource query-match-iterator {
        /// Returns the next match or `undefined` if there are no more matches.
        next: func() -> option<query-match>;
    }

    /// Represents a position in the source text, with indices for different unicode encodings of the source.
    record text-index {
        /// Byte offset in UTF-8 encoding.
        /// This is useful when working with languages like Rust that use UTF-8.
        utf8: u32,
        /// Byte offset in UTF-8 encoding.
        /// This is useful when working with languages like JavaScript that use UTF-16.
        utf16: u32,
        /// Line number (0-based).
        /// Lines are separated by:
        ///
        /// - carriage return `\r`.
        /// - newline `\n`.
        /// - line separator `\u2028`.
        /// - paragraph separator `\u2029`.
        line: u32,
        /// Column number (0-based).
        /// Columns are counted in [unicode scalar values](https://www.unicode.org/glossary/#unicode_scalar_value).
        column: u32,
    }

    /// Represents a range in the source text.
    record text-range {
        /// Starting (inclusive) position of the range.
        start: text-index,
        /// Ending (exclusive) position of the range.
        end: text-index,
    }
}
