interface compilation {
    use bindings.{binding-graph};
    use cst.{nonterminal-node, cursor};
    use parser.{parse-error};

    /// A builder for creating compilation units.
    /// Allows incrementally building a transitive list of all files and their imports.
    ///
    /// This is an internal API, and exposed via a public `CompilationBuilder` wrapper class written in TypeScript.
    /// This allows storing/invoking user supplied callbacks in TypeScript, rather than Rust, which has its limitations.
    ///
    /// @internal
    resource internal-compilation-builder {
        /// Creates a new compilation builder for the specified language version.
        create: static func(language-version: string) -> result<internal-compilation-builder, string>;

        /// Adds a source file to the compilation unit.
        add-file: func(id: string, contents: string) -> add-file-response;

        /// Resolves an import in the source file to the destination file.
        resolve-import: func(source-file-id: string, import-path: borrow<cursor>, destination-file-id: string) -> result<_, string>;

        /// Builds and returns the final compilation unit.
        build: func() -> compilation-unit;
    }

    /// Contains information about imports found in an added source file.
    record add-file-response {
        /// List of cursors to any import paths found in the file.
        import-paths: list<cursor>,
    }

    /// A complete compilation unit is a complete view over all compilation inputs:
    ///
    /// - All source files, stored as CSTs.
    /// - Name binding graph that exposes relationships between definitions and references in these files.
    /// - Any relevant compilation options.
    ///
    /// It also exposes utilities to traverse the compilation unit and query it.
    resource compilation-unit {
        /// Returns the language version this compilation unit is configured for.
        language-version: func() -> string;

        /// Returns a list of all files in the compilation unit.
        files: func() -> list<file>;

        /// Returns the file with the specified ID, if it exists.
        file: func(id: string) -> option<file>;
        
        /// Calculates name binding information for all source files within the compilation unit.
        /// Returns a graph that contains all found definitions and their references.
        ///
        /// Note: building this graph is an expensive operation.
        /// It is done lazily on the first access, and cached thereafter.
        binding-graph: func() -> result<binding-graph, string>;
    }

    /// A single source file in the compilation unit.
    resource file {
        /// Returns the unique identifier of this file.
        id: func() -> string;

        /// Returns the syntax tree of this file.
        tree: func() -> nonterminal-node;

        /// Returns a list of all errors encountered during parsing this file.
        errors: func() -> list<parse-error>;

        /// Creates a cursor for traversing the syntax tree of this file.
        create-tree-cursor: func() -> cursor;
    }
}
