// This file is generated automatically by infrastructure scripts. Please don't edit by hand.

interface parser {
    use cst.{cursor, nonterminal-node, nonterminal-kind, text-range};

    /// A parser instance that can parse source code into syntax trees.
    /// Each parser is configured for a specific language version and grammar.
    resource parser {
        /// Creates a new parser instance for the specified language version.
        ///
        /// It will throw an error if the language version is invalid or not supported.
        create: static func(language-version: string) -> result<parser, string>;

        /// Returns the language version this parser instance is configured for.
        language-version: func() -> string;

        /// Parses the input string into a complete source file.
        parse-file-contents: func(input: string) -> parse-output;

        /// Parses the input string into a nonterminal with the specified kind.
        parse-nonterminal: func(kind: nonterminal-kind, input: string) -> parse-output;
    }

    /// Represents an error that occurred while parsing source code.
    record parse-error {
        /// A human-readable message describing what went wrong.
        message: string,

        /// The text range where the error occurred in the source code.
        text-range: text-range,
    }

    /// The output of a parsing operation.
    /// Contains the resulting syntax tree and any errors encountered during parsing.
    resource parse-output {
        /// Returns the root node of the parsed syntax tree.
        /// Even if there are parsing errors, a partial tree will still be available.
        tree: func() -> nonterminal-node;

        /// Returns a list of all parsing errors encountered.
        /// An empty list indicates a successful parse with no errors.
        errors: func() -> list<parse-error>;

        /// Returns whether the parse was completely successful with no errors.
        /// This is equivalent to checking if the errors list is empty.
        is-valid: func() -> bool;

        /// Creates a cursor for traversing the parsed syntax tree.
        /// The cursor starts at the root node of the tree.
        create-tree-cursor: func() -> cursor;
    }
}
