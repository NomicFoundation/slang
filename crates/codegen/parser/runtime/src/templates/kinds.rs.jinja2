#[cfg(feature = "slang_napi_interfaces")]
use napi_derive::napi;

#[derive(
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    serde::Serialize,
    strum_macros::AsRefStr,
    strum_macros::Display,
    strum_macros::EnumString,
)]
#[cfg_attr(feature = "slang_napi_interfaces", /* derives `Clone` and `Copy` */ napi(string_enum, namespace = "kinds"))]
#[cfg_attr(not(feature = "slang_napi_interfaces"), derive(Clone, Copy))]
pub enum RuleKind {
    {%- for variant in generator.rule_kinds -%}
        {# variant.documentation | indent(prefix = "/// ", first = true, blank = true) #}
        {{ variant }},
    {%- endfor -%}
}

impl RuleKind {
    pub fn is_trivia(&self) -> bool {
        #[allow(clippy::match_like_matches_macro)]
        match self {
            {%- for variant in generator.trivia_kinds -%}
                Self::{{ variant }} => true,
            {%- endfor -%}
            _ => false,
        }
    }
}

#[derive(
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    serde::Serialize,
    strum_macros::AsRefStr,
    strum_macros::Display,
    strum_macros::EnumString,
)]
#[strum(serialize_all = "snake_case")]
#[cfg_attr(feature = "slang_napi_interfaces", /* derives `Clone` and `Copy` */ napi(string_enum, namespace = "kinds"))]
#[cfg_attr(not(feature = "slang_napi_interfaces"), derive(Clone, Copy))]
pub enum NodeLabel {
    // Built-in labels
    {# _SLANG_INTERNAL_RESERVED_NODE_LABELS_ (keep in sync) #}
    Item,
    Variant,
    Separator,
    Operand,
    LeftOperand,
    RightOperand,
    // Generated
    {% for variant in generator.labels -%}
        {{ variant | pascal_case }},
    {%- endfor -%}
}

#[derive(
    Debug,
    Eq,
    Hash,
    Ord,
    PartialEq,
    PartialOrd,
    serde::Serialize,
    strum_macros::AsRefStr,
    strum_macros::Display,
    strum_macros::EnumString,
)]
#[cfg_attr(feature = "slang_napi_interfaces", /* derives `Clone` and `Copy` */ napi(string_enum, namespace = "kinds"))]
#[cfg_attr(not(feature = "slang_napi_interfaces"), derive(Clone, Copy))]
pub enum TokenKind {
    SKIPPED,
    {%- for variant in generator.token_kinds -%}
        {# variant.documentation | indent(prefix = "/// ", first = true, blank = true) #}
        {{ variant }},
    {%- endfor -%}
}

impl TokenKind {
    pub fn is_trivia(&self) -> bool {
        #[allow(clippy::match_like_matches_macro)]
        match self {
            {%- for variant in generator.trivia_scanner_names -%}
                Self::{{ variant }} => true,
            {%- endfor -%}
            _ => false,
        }
    }
}

/// The lexical context of the scanner.
#[derive(strum_macros::FromRepr, Clone, Copy)]
pub(crate) enum LexicalContext {
    {%- for context_name, _context in generator.scanner_contexts %}
        {{ context_name }},
    {%- endfor %}
}

/// Marker trait for type-level [`LexicalContext`] variants.
pub(crate) trait IsLexicalContext {
    /// Returns a run-time [`LexicalContext`] value.
    fn value() -> LexicalContext;
}

#[allow(non_snake_case)]
pub(crate) mod LexicalContextType {
    use super::{IsLexicalContext, LexicalContext};

    {%- for context_name, _ in generator.scanner_contexts %}
        pub struct {{ context_name }} {}
        impl IsLexicalContext for {{ context_name }} {
            fn value() -> LexicalContext {
                LexicalContext::{{ context_name }}
            }
        }
    {%- endfor %}
}
