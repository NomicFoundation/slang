#[cfg(feature = "slang_napi_interfaces")]
use {napi::bindgen_prelude::*, napi_derive::napi};

use semver::Version;

use super::{
    kinds::{RuleKind, TokenKind, ProductionKind},
    lexer::Lexer,
    parse_output::ParseOutput,
    support::*,
};

pub use super::kinds::LexicalContext;

#[cfg(feature = "slang_napi_interfaces")]
use super::napi::napi_parse_output::ParseOutput as NAPIParseOutput;

#[derive(Debug)]
#[cfg_attr(feature = "slang_napi_interfaces", napi(namespace = "language"))]
pub struct Language {
    pub(crate) version: Version,
    {%- for version in code.referenced_versions -%}
        pub(crate) version_is_at_least_{{ version | replace(from=".", to="_") }}: bool,
    {%- endfor -%}
}

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("Unsupported {{ language_name }} language version '{0}'.")]
    UnsupportedLanguageVersion(Version),

    #[cfg(feature = "slang_napi_interfaces")]
    #[error("Invalid semantic version '{0}'.")]
    InvalidSemanticVersion(String),
}

#[cfg(feature = "slang_napi_interfaces")]
impl From<Error> for napi::Error {
    fn from(value: Error) -> Self {
        napi::Error::from_reason(value.to_string())
    }
}

impl Language {
    pub const SUPPORTED_VERSIONS: &[Version] = &[
        {% for version in versions %}
            Version::new({{ version | split(pat=".") | join(sep=", ") }}),
        {% endfor %}
    ];

    pub fn new(version: Version) -> std::result::Result<Self, Error> {
        if Self::SUPPORTED_VERSIONS.contains(&version) {
            Ok(Self {
                {%- for version in code.referenced_versions %}
                    version_is_at_least_{{ version | replace(from=".", to="_") }}: Version::new({{ version | split(pat=".") | join(sep=", ") }}) <= version,
                {%- endfor -%}
                version,
            })
        } else {
            Err(Error::UnsupportedLanguageVersion(version))
        }
    }

    pub fn version(&self) -> &Version {
        &self.version
    }

    {% for context in code.scanner_contexts %}
        #[allow(dead_code)]
        fn {{ context.name | snake_case }}_parse_token_with_trivia(
            &self,
            input: &mut ParserContext,
            kind: TokenKind,
        ) -> ParserResult
        {
            Lexer::parse_token_with_trivia::<{ LexicalContext::{{ context.name }} as u8 }>(self, input, kind)
        }

        #[allow(dead_code)]
        fn {{ context.name | snake_case }}_parse_token(&self, input: &mut ParserContext, kind: TokenKind) -> ParserResult
        {
            Lexer::parse_token::<{ LexicalContext::{{ context.name }} as u8 }>(self, input, kind)
        }

        #[allow(dead_code)]
        const fn {{ context.name | snake_case }}_delimiters() -> &'static [(TokenKind, TokenKind)] {
            &[
                {%- for open, close in context.delimiters %}
                    (TokenKind::{{ open }}, TokenKind::{{ close }}),
                {%- endfor %}
            ]
        }
    {% endfor %}

    /********************************************
     *         Parser Functions
     ********************************************/

    {% for parser_name, parser_code in code.parser_functions %}
        #[allow(unused_assignments, unused_parens)]
        fn {{ parser_name | snake_case }}(&self, input: &mut ParserContext) -> ParserResult { {{ parser_code }} }
    {% endfor %}

    /********************************************
     *         Scanner Functions
     ********************************************/

    {% for scanner_name, scanner_code in code.scanner_functions %}
        #[allow(unused_assignments, unused_parens)]
        fn {{ scanner_name | snake_case }}(&self, input: &mut ParserContext) -> bool { {{ scanner_code }} }
    {% endfor %}

    pub fn scan(&self, lexical_context: LexicalContext, input: &str) -> Option<TokenKind> {
        let mut input = ParserContext::new(input);
        match lexical_context {
            {%- for lexical_context in code.scanner_contexts -%}
                LexicalContext::{{ lexical_context.name }} =>
                    Lexer::next_token::<{ LexicalContext::{{ lexical_context.name }} as u8 }>(self, &mut input),
            {%- endfor -%}
        }
    }

    pub fn parse(&self, production_kind: ProductionKind, input: &str) -> ParseOutput {
        match production_kind {
            {%- for parser_name, _code in code.parser_functions -%}
                ProductionKind::{{ parser_name }} => Self::{{ parser_name | snake_case }}.parse(self, input),
            {%- endfor -%}
        }
    }
}

impl Lexer for Language {
    fn leading_trivia(&self, input: &mut ParserContext) -> ParserResult {
        Language::leading_trivia(self, input)
    }

    fn trailing_trivia(&self, input: &mut ParserContext) -> ParserResult {
        Language::trailing_trivia(self, input)
    }

    fn next_token<const LEX_CTX: u8>(&self, input: &mut ParserContext) -> Option<TokenKind> {
        let save = input.position();
        let mut furthest_position = input.position();
        let mut longest_token = None;

        match LexicalContext::from_repr(LEX_CTX).unwrap() {
            {%- for context in code.scanner_contexts %}
                LexicalContext::{{ context.name }} => {
                    macro_rules! longest_match {
                        ($( { $kind:ident = $function:ident } )*) => {
                            $(
                                if self.$function(input) && input.position() > furthest_position {
                                    furthest_position = input.position();
                                    longest_token = Some(TokenKind::$kind);
                                }
                                input.set_position(save);
                            )*
                        };
                    }

                    if let Some(kind) = {{ context.alpha_literal_scanner }} {
                        // Make sure that this is not the start of an identifier
                        if !self.identifier_part(input) {
                            furthest_position = input.position();
                            longest_token = Some(kind);
                        }
                    }
                    input.set_position(save);

                    if let Some(kind) = {{ context.non_alpha_literal_scanner }} {
                        furthest_position = input.position();
                        longest_token = Some(kind);
                    }
                    input.set_position(save);


                    longest_match! {
                        {%- for name in context.compound_scanner_names %}
                            { {{ name }} = {{ name | snake_case }} }
                        {%- endfor %}
                    }
                },
            {%- endfor %}
        }

        match longest_token {
            Some(..) => {
                input.set_position(furthest_position);
                longest_token
            },
            // Skip a character if possible and if we didn't recognize a token
            None if input.peek().is_some() => {
                let _ = input.next();
                Some(TokenKind::SKIPPED)
            },
            // EOF
            None => None,
        }
    }
}

#[cfg(feature = "slang_napi_interfaces")]
#[napi(namespace = "language")]
impl Language {

    #[napi(constructor)]
    pub fn new_napi(version: String) -> std::result::Result<Self, napi::Error> {
        let version = Version::parse(&version).map_err(|_| Error::InvalidSemanticVersion(version))?;
        Self::new(version).map_err(|e| e.into())
    }

    #[napi(getter, js_name = "version")]
    pub fn version_napi(&self) -> String {
        self.version.to_string()
    }

    #[napi(js_name = "supportedVersions")]
    pub fn supported_versions_napi() -> Vec<String> {
        return Self::SUPPORTED_VERSIONS.iter().map(|v| v.to_string()).collect();
    }

    #[napi(js_name = "scan")]
    pub fn scan_napi(&self, lexical_context: LexicalContext, input: String) -> Option<TokenKind> {
        self.scan(lexical_context, input.as_str())
    }

    #[napi(js_name = "parse", ts_return_type = "ParseOutput")]
    pub fn parse_napi(&self, production_kind: ProductionKind, input: String) -> NAPIParseOutput {
        self.parse(production_kind, input.as_str()).into()
    }

}
