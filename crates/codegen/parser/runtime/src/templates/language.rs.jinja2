// This file is generated; we can't reasonably satisfy some of these lints.
#![allow(
    clippy::if_not_else,
    clippy::too_many_lines,
    clippy::unused_self,
    clippy::struct_excessive_bools,
    clippy::similar_names
)]

use semver::Version;
#[cfg(feature = "slang_napi_interfaces")]
use napi_derive::napi;

use crate::cst;
use crate::kinds::{
    FieldName, IsLexicalContext, LexicalContext, LexicalContextType, RuleKind, TokenKind,
};
use crate::lexer::{KeywordScan, Lexer, ScannedToken};
#[cfg(feature = "slang_napi_interfaces")]
use crate::napi_interface::parse_output::ParseOutput as NAPIParseOutput;
use crate::parse_output::ParseOutput;
use crate::parser_support::{
    ChoiceHelper, OneOrMoreHelper, OptionalHelper, ParserContext, ParserFunction, ParserResult,
    PrecedenceHelper, RecoverFromNoMatch, SeparatedHelper, SequenceHelper, ZeroOrMoreHelper,
};

#[derive(Debug)]
#[cfg_attr(feature = "slang_napi_interfaces", napi(namespace = "language"))]
pub struct Language {
    pub(crate) version: Version,
    {%- for version in generator.referenced_versions -%}
        pub(crate) version_is_at_least_{{ version | replace(from=".", to="_") }}: bool,
    {%- endfor -%}
}

#[derive(thiserror::Error, Debug)]
pub enum Error {
    #[error("Unsupported {{ language_name }} language version '{0}'.")]
    UnsupportedLanguageVersion(Version),

    #[cfg(feature = "slang_napi_interfaces")]
    #[error("Invalid semantic version '{0}'.")]
    InvalidSemanticVersion(String),
}

#[cfg(feature = "slang_napi_interfaces")]
impl From<Error> for napi::Error {
    fn from(value: Error) -> Self {
        napi::Error::from_reason(value.to_string())
    }
}

impl Language {
    pub const SUPPORTED_VERSIONS: &[Version] = &[
        {% for version in versions %}
            Version::new({{ version | split(pat=".") | join(sep=", ") }}),
        {% endfor %}
    ];

    pub fn new(version: Version) -> std::result::Result<Self, Error> {
        if Self::SUPPORTED_VERSIONS.binary_search(&version).is_ok() {
            Ok(Self {
                {%- for version in generator.referenced_versions %}
                    version_is_at_least_{{ version | replace(from=".", to="_") }}: Version::new({{ version | split(pat=".") | join(sep=", ") }}) <= version,
                {%- endfor -%}
                version,
            })
        } else {
            Err(Error::UnsupportedLanguageVersion(version))
        }
    }

    pub fn version(&self) -> &Version {
        &self.version
    }

    /********************************************
     *         Parser Functions
     ********************************************/

    {% for parser_name, parser_code in generator.parser_functions %}
        #[allow(unused_assignments, unused_parens)]
        fn {{ parser_name | snake_case }}(&self, input: &mut ParserContext<'_>) -> ParserResult { {{ parser_code }} }
    {% endfor %}

    /********************************************
     *         Scanner Functions
     ********************************************/

    {% for scanner_name, scanner_code in generator.scanner_functions %}
        #[allow(unused_assignments, unused_parens)]
        fn {{ scanner_name | snake_case }}(&self, input: &mut ParserContext<'_>) -> bool { {{ scanner_code }} }
    {% endfor %}

    // Keyword scanners
    {%- for keyword_name, keyword_code in generator.keyword_compound_scanners %}
        #[inline]
        fn {{ keyword_name | snake_case }}(&self, input: &mut ParserContext<'_>, ident: &str) -> KeywordScan { {{ keyword_code }} }
    {% endfor %}

    pub fn parse(&self, kind: RuleKind, input: &str) -> ParseOutput {
        match kind {
            {%- for parser_name, _ in generator.parser_functions -%}
            {# TODO(#737): Remove the special case once we stop generating RuleKind for trivia #}
            {%- if parser_name is ending_with("Trivia") -%}
                RuleKind::{{ parser_name }} => Self::{{ parser_name | snake_case }}.parse(self, input, false),
            {%- else -%}
                RuleKind::{{ parser_name }} => Self::{{ parser_name | snake_case }}.parse(self, input, true),
            {%- endif -%}
            {%- endfor -%}
        }
    }
}

impl Lexer for Language {
    fn leading_trivia(&self, input: &mut ParserContext<'_>) -> ParserResult {
        Language::leading_trivia(self, input)
    }

    fn trailing_trivia(&self, input: &mut ParserContext<'_>) -> ParserResult {
        Language::trailing_trivia(self, input)
    }

    fn delimiters<LexCtx: IsLexicalContext>() -> &'static [(TokenKind, TokenKind)] {
        match LexCtx::value() {
            {%- for context_name, context in generator.scanner_contexts %}
                LexicalContext::{{ context_name }} => &[
                    {%- for open, close in context.delimiters %}
                        (TokenKind::{{ open }}, TokenKind::{{ close }}),
                    {%- endfor %}
                ],
            {%- endfor %}
        }
    }

    fn next_token<LexCtx: IsLexicalContext>(&self, input: &mut ParserContext<'_>) -> Option<ScannedToken> {
        let save = input.position();
        let mut furthest_position = input.position();
        let mut longest_token = None;

        macro_rules! longest_match {
            ($( { $kind:ident = $function:ident } )*) => {
                $(
                    if self.$function(input) && input.position() > furthest_position {
                        furthest_position = input.position();

                        longest_token = Some(TokenKind::$kind);
                    }
                    input.set_position(save);
                )*
            };
        }

        match LexCtx::value() {
            {%- for context_name, context in generator.scanner_contexts %}
                LexicalContext::{{ context_name }} => {
                    if let Some(kind) = {{ context.literal_scanner }} {
                        furthest_position = input.position();
                        longest_token = Some(kind);
                    }
                    input.set_position(save);

                    longest_match! {
                        {%- for name in context.compound_scanner_names %}
                            {%- if name not in context.promotable_identifier_scanners %}
                        { {{name }} = {{ name | snake_case }} }
                            {%- endif -%}
                        {%- endfor %}
                    }
                    // Make sure promotable identifiers are last so they don't grab other things
                    longest_match! {
                        {%- for name in context.promotable_identifier_scanners %}
                        { {{ name }} = {{ name | snake_case }} }
                        {%- endfor %}
                    }

                    // We have an identifier; we need to check if it's a keyword
                    if let Some(identifier) = longest_token.filter(|tok|
                        [
                            {% for name in context.promotable_identifier_scanners %}
                                TokenKind::{{ name }},
                            {% endfor %}
                        ]
                        .contains(tok)
                    ) {
                        let kw_scan = {{ context.keyword_trie_scanner }};
                        let kw_scan = match kw_scan {
                            // Strict prefix; we need to match the whole identifier to promote
                            _ if input.position() < furthest_position => KeywordScan::Absent,
                            value => value,
                        };

                        {% if context.keyword_compound_scanners | length > 0 %}
                        // Perf: only scan for a compound keyword if we didn't already find one
                        let mut kw_scan = kw_scan;
                        if kw_scan == KeywordScan::Absent {
                            input.set_position(save);

                            // TODO: Don't allocate a string here
                            let ident_value = input.content(save.utf8..furthest_position.utf8);

                            for keyword_compound_scanner in [
                            {%- for keyword_name, _ in context.keyword_compound_scanners %}
                                Self::{{ keyword_name | snake_case }},
                            {%- endfor %}
                            ] {
                                match keyword_compound_scanner(self, input, &ident_value) {
                                    _ if input.position() < furthest_position => {/* Strict prefix */},
                                    KeywordScan::Absent => {},
                                    value => kw_scan = value,
                                }
                                input.set_position(save);
                            }
                        }
                        {% endif %}

                        input.set_position(furthest_position);
                        return Some(ScannedToken::IdentifierOrKeyword { identifier, kw: kw_scan });
                    }
                },
            {%- endfor %}
        }

        match longest_token {
            Some(token) => {
                input.set_position(furthest_position);
                Some(ScannedToken::Single(token))
            },
            // Skip a character if possible and if we didn't recognize a token
            None if input.peek().is_some() => {
                let _ = input.next();
                Some(ScannedToken::Single(TokenKind::SKIPPED))
            },
            None => None,
        }
    }
}

#[cfg(feature = "slang_napi_interfaces")]
// NAPI-exposed functions have to accept owned values.
#[allow(clippy::needless_pass_by_value)]
#[napi(namespace = "language")]
impl Language {

    #[napi(constructor, catch_unwind)]
    pub fn new_napi(version: String) -> std::result::Result<Self, napi::Error> {
        let version = Version::parse(&version).map_err(|_| Error::InvalidSemanticVersion(version))?;
        Self::new(version).map_err(|e| e.into())
    }

    #[napi(getter, js_name = "version", catch_unwind)]
    pub fn version_napi(&self) -> String {
        self.version.to_string()
    }

    #[napi(js_name = "supportedVersions", catch_unwind)]
    pub fn supported_versions_napi() -> Vec<String> {
        return Self::SUPPORTED_VERSIONS.iter().map(|v| v.to_string()).collect();
    }

    #[napi(js_name = "parse", ts_return_type = "parse_output.ParseOutput", catch_unwind)]
    pub fn parse_napi(
        &self,
        #[napi(ts_arg_type = "kinds.RuleKind")] kind: RuleKind,
        input: String
    ) -> NAPIParseOutput {
        self.parse(kind, input.as_str()).into()
    }

}
