use super::cursor::Cursor;
use super::queries::QueryKind;
use super::query::QueryResult;
use crate::user_defined::binding::ActionsImpl;

use stack_graphs::graph::{File, StackGraph};

pub(crate) struct Context {
    pub graph: StackGraph,
    pub file: File,
}

pub(crate) trait Actions {
    {%- for _, name in actions -%}
    fn {{ name }}(context: &mut Context, query_result: &QueryResult);
    {%- endfor -%}
}


pub fn compute_bindings(context: &mut Context, cursor: Cursor) { 
    type Action = dyn Fn(&mut Context, &QueryResult);
    let queries = vec![
        {%- for query, _ in actions %}
        QueryKind::{{ query | pascal_case }}.into(),
        {% endfor -%}
    ];
    let actions: Vec<&Action> = vec![
        {%- for _, action in actions %}
        &ActionsImpl::{{ action }},
        {% endfor -%}
    ];
    for result in cursor.query(queries) {
        actions[result.query_number] (context, &result);
    }
 }


