[workspace.package]
version = "1.3.0"
rust-version = "1.87.0" # __RUST_STABLE_VERSION_MARKER__ (keep in sync)
edition = "2021"
publish = false

[workspace]
resolver = "2"
members = [
    "crates/codegen/ebnf",
    "crates/codegen/generator",
    "crates/codegen/runner",
    "crates/codegen/spec",
    "crates/codegen/testing",

    "crates/infra/cli",
    "crates/infra/utils",

    "crates/language/definition",
    "crates/language/internal_macros",
    "crates/language/macros",
    "crates/language/tests",

    "crates/language-v2/definition",
    "crates/language-v2/internal_macros",
    "crates/language-v2/macros",
    "crates/language-v2/tests",

    "crates/metaslang/bindings",
    "crates/metaslang/cst",
    "crates/metaslang/graph_builder",
    "crates/metaslang/stack_graphs",

    "crates/solidity/inputs/language",

    "crates/solidity/outputs/cargo/cli",
    "crates/solidity/outputs/cargo/crate",
    "crates/solidity/outputs/cargo/tests",
    "crates/solidity/outputs/cargo/wasm",
    "crates/solidity/outputs/npm/package",
    "crates/solidity/outputs/spec",
    "crates/solidity/testing/perf/cargo",
    "crates/solidity/testing/perf/npm",
    "crates/solidity/testing/snapshots",
    "crates/solidity/testing/solc",
    "crates/solidity/testing/sourcify",
    "crates/solidity/testing/utils",

    "crates/solidity-v2/inputs/language",
]

[workspace.dependencies]
#
# Internal
#
codegen_ebnf = { path = "crates/codegen/ebnf", version = "1.3.0" }
codegen_generator = { path = "crates/codegen/generator", version = "1.3.0" }
codegen_runner = { path = "crates/codegen/runner", version = "1.3.0" }
codegen_spec = { path = "crates/codegen/spec", version = "1.3.0" }
codegen_testing = { path = "crates/codegen/testing", version = "1.3.0" }

infra_cli = { path = "crates/infra/cli", version = "1.3.0" }
infra_utils = { path = "crates/infra/utils", version = "1.3.0" }

language_definition = { path = "crates/language/definition", version = "1.3.0" }
language_internal_macros = { path = "crates/language/internal_macros", version = "1.3.0" }
language_macros = { path = "crates/language/macros", version = "1.3.0" }
language_tests = { path = "crates/language/tests", version = "1.3.0" }

language_v2_definition = { path = "crates/language-v2/definition", version = "1.3.0" }
language_v2_internal_macros = { path = "crates/language-v2/internal_macros", version = "1.3.0" }
language_v2_macros = { path = "crates/language-v2/macros", version = "1.3.0" }
language_v2_tests = { path = "crates/language-v2/tests", version = "1.3.0" }

metaslang_bindings = { path = "crates/metaslang/bindings", version = "1.3.0" }
metaslang_cst = { path = "crates/metaslang/cst", version = "1.3.0" }
metaslang_graph_builder = { path = "crates/metaslang/graph_builder", version = "1.3.0" }
metaslang_stack_graphs = { path = "crates/metaslang/stack_graphs", version = "1.3.0" }

solidity_language = { path = "crates/solidity/inputs/language", version = "1.3.0" }

slang_solidity = { path = "crates/solidity/outputs/cargo/crate", version = "1.3.0" }
slang_solidity_cli = { path = "crates/solidity/outputs/cargo/cli", version = "1.3.0" }
solidity_cargo_tests = { path = "crates/solidity/outputs/cargo/tests", version = "1.3.0" }
solidity_cargo_wasm = { path = "crates/solidity/outputs/cargo/wasm", version = "1.3.0" }
solidity_npm_package = { path = "crates/solidity/outputs/npm/package", version = "1.3.0" }
solidity_spec = { path = "crates/solidity/outputs/spec", version = "1.3.0" }
solidity_testing_perf_cargo = { path = "crates/solidity/testing/perf/cargo", version = "1.3.0" }
solidity_testing_perf_npm = { path = "crates/solidity/testing/perf/npm", version = "1.3.0" }
solidity_testing_snapshots = { path = "crates/solidity/testing/snapshots", version = "1.3.0" }
solidity_testing_solc = { path = "crates/solidity/testing/solc", version = "1.3.0" }
solidity_testing_sourcify = { path = "crates/solidity/testing/sourcify", version = "1.3.0" }
solidity_testing_utils = { path = "crates/solidity/testing/utils", version = "1.3.0" }

solidity_v2_language = { path = "crates/solidity-v2/inputs/language", version = "1.3.0" }

#
# External
#
anyhow = { version = "1.0.97", features = ["backtrace", "std"] }
ariadne = { version = "0.2.0" }
# Currently 'bencher' backend API is under development/unstable.
# They recommend always running with the latest CLI version from 'main' until it is stabilized.
bencher_cli = { git = "https://github.com/bencherdev/bencher", branch = "main" }
bitvec = { version = "1.0.1" }
cargo-edit = { version = "0.12.3" }
cargo-nextest = { version = "0.9.72" }
clap = { version = "4.5.40", features = ["derive", "wrap_help"] }
clap_complete = { version = "4.5.54" }
console = { version = "0.15.11" }
controlled-option = { version = "0.4.1" }
derive-new = { version = "0.6.0" }
either = { version = "1.6.0" }
enumset = { version = "1.1.0" }
env_logger = { version = "0.11.6" }
fxhash = { version = "0.2.0" }
httpdate = { version = "1.0.3" }
iai-callgrind = { version = "0.12.3" }
iai-callgrind-runner = { version = "0.12.3" }
ignore = { version = "0.4.23" }
indexmap = { version = "2.10.0", features = ["serde"] }
indicatif = { version = "0.17.12", features = ["in_memory"] }
indoc = { version = "2.0.6" }
Inflector = { version = "0.11.4" }
itertools = { version = "0.13.0" }
libc = { version = "0.2.0" }
log = { version = "0.4.27" }
lsp-positions = { version = "0.3.0" } 
markdown = { version = "0.3.0" }
nom = { version = "7.1.3" }
num-format = { version = "0.4.4" }
paste = { version = "1.0.15" }
proc-macro2 = { version = "1.0.94" }
public-api = { version = "0.47.1" }
quote = { version = "1.0.40" }
rayon = { version = "1.10.0" }
regex = { version = "1.11.1" }
reqwest = { version = "0.12.21", features = ["blocking"] }
rustdoc-json = { version = "0.9.5" }
semver = { version = "1.0.26", features = ["serde"] }
serde = { version = "1.0.219", features = ["derive", "rc"] }
serde_json = { version = "1.0.140", features = ["preserve_order"] }
similar-asserts = { version = "1.7.0" }
smallvec = { version = "1.15.0", features = ["union"] }
solar = { version = "0.1.3", package = "solar-compiler" }
streaming-iterator = { version = "0.1.9" }
string-interner = { version = "0.17.0", features = [
    "std",
    "inline-more",
    "backends",
] }
strum = { version = "0.26.3" }
strum_macros = { version = "0.26.4" }
syn = { version = "2.0.104", features = [
    "fold",
    "full",
    "extra-traits",
    "parsing",
    "printing",
] }
tar = { version = "0.4.44" }
tempfile = { version = "3.19.1" }
tera = { version = "1.20.0" }
thiserror = { version = "2.0.12" }
toml = { version = "0.8.20" }
tree-sitter-solidity = { version = "1.2.11" }
tree-sitter = { version = "0.24.7" }
trybuild = { version = "1.0.104" }
url = { version = "2.5.4", features = ["serde"] }
wasm-tools = { version = "1.216.0" }
wit-bindgen = { version = "0.30.0" }

[workspace.lints.rust]
unused_crate_dependencies = "warn"
unused_lifetimes = "warn"
unused_macro_rules = "warn"
meta_variable_misuse = "warn"
# Rust 2018 idioms that are not yet warn-by-default:
elided_lifetimes_in_paths = "warn"
unused_extern_crates = "warn"
explicit_outlives_requirements = "warn"

[workspace.lints.clippy]
# Lints that are enabled (warn/deny) by default
all = "warn"
# Cargo
cargo = "warn"                                              # Warn about Cargo.toml issues, except...
multiple_crate_versions = { level = "allow", priority = 1 } # Not possible to deduplicate, should be done periodically ourselves
# Restriction (optional, neutral lints)
clone_on_ref_ptr = "warn"                # Prefer using 'Arc::clone(x)' instead of 'x.clone()' to make it clear when we are doing an expensive clone
exit = "warn"                            # Prefer not `process::exit`ing directly
rest_pat_in_fully_bound_structs = "warn" # Prefer not to use `..` in fully bound structs
verbose_file_reads = "warn"              # Prefer simpler and more concise `fs::read_to_string`
# Pedantic
pedantic = "warn"                                                      # Warn about pedantic lints, except...
assigning_clones = { level = "allow", priority = 1 }                   # `clone_from()` is less readable, and is rarely used/implemented
match_same_arms = { level = "allow", priority = 1 }                    # It's often clearer to have the same arm twice
missing_errors_doc = { level = "allow", priority = 1 }                 # Most of our code is internal; let's not clutter the docs until...
missing_panics_doc = { level = "allow", priority = 1 }                 # ... we care about the public documentation in our shipped crates
module_name_repetitions = { level = "allow", priority = 1 }            # It seems we prefer it this way; we'd need to discuss that
must_use_candidate = { level = "allow", priority = 1 }                 # Overzealous, we'd have to `[must_use]` a lot of things
needless_continue = { level = "allow", priority = 1 }                  # The `continue` keyword serves to communicate intention, let's keep them
needless_raw_string_hashes = { level = "allow", priority = 1 }         # It is easier to use hashes consistently on all tests/examples in a file
redundant_closure_for_method_calls = { level = "allow", priority = 1 } # Not always clearer, let's not pepper `allow`s whenever needed
unnecessary_debug_formatting = { level = "allow", priority = 1 }       # `Path::display()` doesn't produce the same output as the debug fmt
# Nursery
collection_is_never_read = "warn" # Lint against collections not used after creation
equatable_if_let = "warn"         # Prefer regular `==` checks over Yoda `if let $pat = $value`
useless_let_if_seq = "warn"       # Use idiomatic direct assignment of `let $val = if $cond { .. } else { .. };`
redundant_else = "warn"           # Warn about redundant `else` blocks
